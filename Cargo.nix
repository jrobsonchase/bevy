
# This file was @generated by crate2nix 0.14.0 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrateForPkgs ? pkgs: pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Used for conditional compilation based on CPU feature detection.
, targetFeatures ? []
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #


  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "bevy" = rec {
      packageId = "bevy";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_a11y" = rec {
      packageId = "bevy_a11y";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_a11y";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_animation" = rec {
      packageId = "bevy_animation";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_animation";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_app" = rec {
      packageId = "bevy_app";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_app";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_asset" = rec {
      packageId = "bevy_asset";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_asset";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_asset_macros" = rec {
      packageId = "bevy_asset_macros";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_asset_macros";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_audio" = rec {
      packageId = "bevy_audio";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_audio";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_color" = rec {
      packageId = "bevy_color";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_color";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_core" = rec {
      packageId = "bevy_core";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_core";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_core_pipeline" = rec {
      packageId = "bevy_core_pipeline";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_core_pipeline";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_derive" = rec {
      packageId = "bevy_derive";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_derive";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_dev_tools" = rec {
      packageId = "bevy_dev_tools";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_dev_tools";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_diagnostic" = rec {
      packageId = "bevy_diagnostic";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_diagnostic";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_dylib" = rec {
      packageId = "bevy_dylib";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_dylib";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_dynamic_plugin" = rec {
      packageId = "bevy_dynamic_plugin";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_dynamic_plugin";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_ecs" = rec {
      packageId = "bevy_ecs";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_ecs";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_ecs_macros" = rec {
      packageId = "bevy_ecs_macros";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_ecs_macros";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_encase_derive" = rec {
      packageId = "bevy_encase_derive";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_encase_derive";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_gilrs" = rec {
      packageId = "bevy_gilrs";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_gilrs";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_gizmos" = rec {
      packageId = "bevy_gizmos";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_gizmos";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_gizmos_macros" = rec {
      packageId = "bevy_gizmos_macros";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_gizmos_macros";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_gltf" = rec {
      packageId = "bevy_gltf";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_gltf";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_hierarchy" = rec {
      packageId = "bevy_hierarchy";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_hierarchy";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_input" = rec {
      packageId = "bevy_input";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_input";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_internal" = rec {
      packageId = "bevy_internal";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_internal";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_log" = rec {
      packageId = "bevy_log";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_log";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_macro_utils" = rec {
      packageId = "bevy_macro_utils";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_macro_utils";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_math" = rec {
      packageId = "bevy_math";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_math";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_mikktspace" = rec {
      packageId = "bevy_mikktspace";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_mikktspace";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_mobile_example" = rec {
      packageId = "bevy_mobile_example";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_mobile_example";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_pbr" = rec {
      packageId = "bevy_pbr";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_pbr";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_ptr" = rec {
      packageId = "bevy_ptr";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_ptr";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_reflect" = rec {
      packageId = "bevy_reflect";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_reflect";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_reflect_derive" = rec {
      packageId = "bevy_reflect_derive";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_reflect_derive";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_render" = rec {
      packageId = "bevy_render";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_render";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_render_macros" = rec {
      packageId = "bevy_render_macros";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_render_macros";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_scene" = rec {
      packageId = "bevy_scene";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_scene";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_sprite" = rec {
      packageId = "bevy_sprite";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_sprite";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_tasks" = rec {
      packageId = "bevy_tasks";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_tasks";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_text" = rec {
      packageId = "bevy_text";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_text";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_time" = rec {
      packageId = "bevy_time";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_time";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_transform" = rec {
      packageId = "bevy_transform";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_transform";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_ui" = rec {
      packageId = "bevy_ui";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_ui";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_utils" = rec {
      packageId = "bevy_utils";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_utils";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_utils_proc_macros" = rec {
      packageId = "bevy_utils_proc_macros";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_utils_proc_macros";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_window" = rec {
      packageId = "bevy_window";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_window";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bevy_winit" = rec {
      packageId = "bevy_winit";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bevy_winit";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "build-templated-pages" = rec {
      packageId = "build-templated-pages";
      build = internal.buildRustCrateWithFeatures {
        packageId = "build-templated-pages";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "build-wasm-example" = rec {
      packageId = "build-wasm-example";
      build = internal.buildRustCrateWithFeatures {
        packageId = "build-wasm-example";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "ci" = rec {
      packageId = "ci";
      build = internal.buildRustCrateWithFeatures {
        packageId = "ci";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "errors" = rec {
      packageId = "errors";
      build = internal.buildRustCrateWithFeatures {
        packageId = "errors";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "example-showcase" = rec {
      packageId = "example-showcase";
      build = internal.buildRustCrateWithFeatures {
        packageId = "example-showcase";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
      name = "all-workspace-members";
      paths =
        let members = builtins.attrValues workspaceMembers;
        in builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "ab_glyph" = rec {
        crateName = "ab_glyph";
        version = "0.2.25";
        edition = "2021";
        sha256 = "0xg71psg0wbs80b4x8km1z30994f9bn7izncqzx91ifs6241943g";
        authors = [
          "Alex Butler <alexheretic@gmail.com>"
        ];
        dependencies = [
          {
            name = "ab_glyph_rasterizer";
            packageId = "ab_glyph_rasterizer";
            usesDefaultFeatures = false;
          }
          {
            name = "owned_ttf_parser";
            packageId = "owned_ttf_parser";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "variable-fonts" ];
          "libm" = [ "dep:libm" "ab_glyph_rasterizer/libm" ];
          "std" = [ "owned_ttf_parser/default" "ab_glyph_rasterizer/default" ];
          "variable-fonts" = [ "owned_ttf_parser/variable-fonts" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "variable-fonts" ];
      };
      "ab_glyph_rasterizer" = rec {
        crateName = "ab_glyph_rasterizer";
        version = "0.1.8";
        edition = "2018";
        sha256 = "0ikhgzig59q8b1a1iw83sxfnvylg5gx6w2y8ynbnf231xs9if6y7";
        authors = [
          "Alex Butler <alexheretic@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "accesskit" = rec {
        crateName = "accesskit";
        version = "0.12.3";
        edition = "2021";
        sha256 = "0szw1d6ml049779m55h0l107abhsmchmdx58rdfjbhcr7m7v393l";
        authors = [
          "The AccessKit contributors"
        ];
        features = {
          "enumn" = [ "dep:enumn" ];
          "pyo3" = [ "dep:pyo3" ];
          "schemars" = [ "dep:schemars" "serde" ];
          "serde" = [ "dep:serde" "enumn" ];
        };
      };
      "accesskit_consumer" = rec {
        crateName = "accesskit_consumer";
        version = "0.16.1";
        edition = "2021";
        sha256 = "1rj5vsaxn9m5aazr22vzlb5bxfbl28h2mck7hqldgyq97jjwq5wc";
        authors = [
          "Matt Campbell <mattcampbell@pobox.com>"
        ];
        dependencies = [
          {
            name = "accesskit";
            packageId = "accesskit";
          }
        ];

      };
      "accesskit_macos" = rec {
        crateName = "accesskit_macos";
        version = "0.10.1";
        edition = "2021";
        sha256 = "19vpwi1cnyxbjal4ngjb2x7yhfm9x3yd63w41v8wxyxvxbhnlfyd";
        authors = [
          "Matt Campbell <mattcampbell@pobox.com>"
        ];
        dependencies = [
          {
            name = "accesskit";
            packageId = "accesskit";
          }
          {
            name = "accesskit_consumer";
            packageId = "accesskit_consumer";
          }
          {
            name = "objc2";
            packageId = "objc2 0.3.0-beta.3.patch-leaks.3";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];

      };
      "accesskit_unix" = rec {
        crateName = "accesskit_unix";
        version = "0.6.2";
        edition = "2021";
        sha256 = "022a77nm8461v0f6mpzidamkci0h1kmkxl9x2bbim9lvv4c6rx09";
        authors = [
          "Arnold Loubriat <datatriny@gmail.com>"
        ];
        dependencies = [
          {
            name = "accesskit";
            packageId = "accesskit";
          }
          {
            name = "accesskit_consumer";
            packageId = "accesskit_consumer";
          }
          {
            name = "async-channel";
            packageId = "async-channel";
          }
          {
            name = "async-once-cell";
            packageId = "async-once-cell";
          }
          {
            name = "atspi";
            packageId = "atspi";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 1.13.0";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "zbus";
            packageId = "zbus";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "async-io" = [ "atspi/async-std" "zbus/async-io" ];
          "default" = [ "async-io" ];
          "tokio" = [ "dep:tokio" "atspi/tokio" "zbus/tokio" ];
        };
        resolvedDefaultFeatures = [ "async-io" ];
      };
      "accesskit_windows" = rec {
        crateName = "accesskit_windows";
        version = "0.15.1";
        edition = "2021";
        sha256 = "02sazww6l5h0wsgif0npdpkb5lczx0xph65kn31wfkwpq1zf5jmg";
        authors = [
          "Matt Campbell <mattcampbell@pobox.com>"
        ];
        dependencies = [
          {
            name = "accesskit";
            packageId = "accesskit";
          }
          {
            name = "accesskit_consumer";
            packageId = "accesskit_consumer";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "windows";
            packageId = "windows 0.48.0";
            features = [ "implement" "Win32_Foundation" "Win32_Graphics_Gdi" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_UI_Accessibility" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_WindowsAndMessaging" ];
          }
        ];

      };
      "accesskit_winit" = rec {
        crateName = "accesskit_winit";
        version = "0.17.0";
        edition = "2021";
        sha256 = "09bsww0qmicza5avjh8h9qcmfjrjqz4chi73v1glsibdyv4zgy25";
        authors = [
          "Matt Campbell <mattcampbell@pobox.com>"
        ];
        dependencies = [
          {
            name = "accesskit";
            packageId = "accesskit";
          }
          {
            name = "accesskit_macos";
            packageId = "accesskit_macos";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "accesskit_unix";
            packageId = "accesskit_unix";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null));
          }
          {
            name = "accesskit_windows";
            packageId = "accesskit_windows";
            target = { target, features }: ("windows" == target."os" or null);
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
            rename = "rwh_06";
            optional = true;
            features = [ "std" ];
          }
          {
            name = "winit";
            packageId = "winit";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "winit";
            packageId = "winit";
            usesDefaultFeatures = false;
            features = [ "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita" ];
          }
        ];
        features = {
          "accesskit_unix" = [ "dep:accesskit_unix" ];
          "async-io" = [ "accesskit_unix/async-io" ];
          "default" = [ "accesskit_unix" "async-io" "rwh_06" ];
          "rwh_05" = [ "winit/rwh_05" "dep:rwh_05" ];
          "rwh_06" = [ "winit/rwh_06" "dep:rwh_06" ];
          "tokio" = [ "accesskit_unix/tokio" ];
        };
        resolvedDefaultFeatures = [ "accesskit_unix" "async-io" "rwh_06" ];
      };
      "adler" = rec {
        crateName = "adler";
        version = "1.0.2";
        edition = "2015";
        sha256 = "1zim79cvzd5yrkzl3nyfx0avijwgk9fqv3yrscdy1cc79ih02qpj";
        authors = [
          "Jonas Schievink <jonasschievink@gmail.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "ahash" = rec {
        crateName = "ahash";
        version = "0.8.11";
        edition = "2018";
        sha256 = "04chdfkls5xmhp1d48gnjsmglbqibizs3bpbj6rsj604m10si7g8";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "getrandom";
            packageId = "getrandom";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            target = { target, features }: (!(("arm" == target."arch" or null) && ("none" == target."os" or null)));
            features = [ "alloc" ];
          }
          {
            name = "zerocopy";
            packageId = "zerocopy";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "atomic-polyfill" = [ "dep:atomic-polyfill" "once_cell/atomic-polyfill" ];
          "compile-time-rng" = [ "const-random" ];
          "const-random" = [ "dep:const-random" ];
          "default" = [ "std" "runtime-rng" ];
          "getrandom" = [ "dep:getrandom" ];
          "runtime-rng" = [ "getrandom" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "getrandom" "no-rng" "runtime-rng" "std" ];
      };
      "aho-corasick" = rec {
        crateName = "aho-corasick";
        version = "1.1.3";
        edition = "2021";
        sha256 = "05mrpkvdgp5d20y2p989f187ry9diliijgwrs254fs9s1m1x6q4f";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "perf-literal" ];
          "logging" = [ "dep:log" ];
          "perf-literal" = [ "dep:memchr" ];
          "std" = [ "memchr?/std" ];
        };
        resolvedDefaultFeatures = [ "default" "perf-literal" "std" ];
      };
      "allocator-api2" = rec {
        crateName = "allocator-api2";
        version = "0.2.18";
        edition = "2018";
        sha256 = "0kr6lfnxvnj164j1x38g97qjlhb7akppqzvgfs0697140ixbav2w";
        authors = [
          "Zakarum <zaq.dev@icloud.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "alsa" = rec {
        crateName = "alsa";
        version = "0.9.0";
        edition = "2021";
        sha256 = "1klxza8bn23qbyqs7bg3kls1wk9h82zc7ihsq248lf1mjdvn1zip";
        authors = [
          "David Henningsson <coding@diwic.se>"
        ];
        dependencies = [
          {
            name = "alsa-sys";
            packageId = "alsa-sys";
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "alsa-sys" = rec {
        crateName = "alsa-sys";
        version = "0.3.1";
        edition = "2018";
        links = "alsa";
        sha256 = "09qmmnpmlcj23zcgx2xsi4phcgm5i02g9xaf801y7i067mkfx3yv";
        authors = [
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
          "David Henningsson <coding@diwic.se>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];

      };
      "android-activity" = rec {
        crateName = "android-activity";
        version = "0.5.2";
        edition = "2021";
        sha256 = "12a2qky6147bvs40iz83fxmz47al6r2h8kps9gw49bjvj31c14gf";
        dependencies = [
          {
            name = "android-properties";
            packageId = "android-properties";
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "cesu8";
            packageId = "cesu8";
          }
          {
            name = "jni";
            packageId = "jni";
          }
          {
            name = "jni-sys";
            packageId = "jni-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "ndk";
            packageId = "ndk";
            usesDefaultFeatures = false;
          }
          {
            name = "ndk-context";
            packageId = "ndk-context";
          }
          {
            name = "ndk-sys";
            packageId = "ndk-sys";
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            features = [ "parallel" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" "native-activity" ];
      };
      "android-properties" = rec {
        crateName = "android-properties";
        version = "0.2.2";
        edition = "2018";
        sha256 = "016slvg269c0y120p9qd8vdfqa2jbw4j0g18gfw6p3ain44v4zpw";
        authors = [
          "Mikhail Lappo <mikhail.lappo@esrlabs.com>"
        ];
        features = {
        };
      };
      "android-tzdata" = rec {
        crateName = "android-tzdata";
        version = "0.1.1";
        edition = "2018";
        sha256 = "1w7ynjxrfs97xg3qlcdns4kgfpwcdv824g611fq32cag4cdr96g9";
        authors = [
          "RumovZ"
        ];

      };
      "android_log-sys" = rec {
        crateName = "android_log-sys";
        version = "0.3.1";
        edition = "2015";
        sha256 = "0dwrvwkx2xxqys6nrhfavbbqfx2rs61nq8akrlnqkfbapxb81k2y";
        libName = "android_log_sys";
        authors = [
          "The android_log_sys Developers"
        ];

      };
      "android_system_properties" = rec {
        crateName = "android_system_properties";
        version = "0.1.5";
        edition = "2018";
        sha256 = "04b3wrz12837j7mdczqd95b732gw5q7q66cv4yn4646lvccp57l1";
        authors = [
          "Nicolas Silva <nical@fastmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "anstream" = rec {
        crateName = "anstream";
        version = "0.6.14";
        edition = "2021";
        sha256 = "0nx1vnfs2lil1sl14l49i6jvp6zpjczn85wxx4xw1ycafvx7b321";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "anstyle-parse";
            packageId = "anstyle-parse";
          }
          {
            name = "anstyle-query";
            packageId = "anstyle-query";
            optional = true;
          }
          {
            name = "anstyle-wincon";
            packageId = "anstyle-wincon";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "colorchoice";
            packageId = "colorchoice";
          }
          {
            name = "is_terminal_polyfill";
            packageId = "is_terminal_polyfill";
          }
          {
            name = "utf8parse";
            packageId = "utf8parse";
          }
        ];
        features = {
          "auto" = [ "dep:anstyle-query" ];
          "default" = [ "auto" "wincon" ];
          "wincon" = [ "dep:anstyle-wincon" ];
        };
        resolvedDefaultFeatures = [ "auto" "default" "wincon" ];
      };
      "anstyle" = rec {
        crateName = "anstyle";
        version = "1.0.7";
        edition = "2021";
        sha256 = "06qxmrba0xbhv07jpdvrdrhw1hjlb9icj88bqvlnissz9bqgr383";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "anstyle-parse" = rec {
        crateName = "anstyle-parse";
        version = "0.2.4";
        edition = "2021";
        sha256 = "1m121pa4plpcb4g7xali2kv9njmgb3713q3fxf60b4jd0fli2fn0";
        dependencies = [
          {
            name = "utf8parse";
            packageId = "utf8parse";
            optional = true;
          }
        ];
        features = {
          "core" = [ "dep:arrayvec" ];
          "default" = [ "utf8" ];
          "utf8" = [ "dep:utf8parse" ];
        };
        resolvedDefaultFeatures = [ "default" "utf8" ];
      };
      "anstyle-query" = rec {
        crateName = "anstyle-query";
        version = "1.0.3";
        edition = "2021";
        sha256 = "1x9pyl231rry5g45dvkdb2sfnl2dx2f4qd9a5v3ml8kr9ryr0k56";
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Console" "Win32_Foundation" ];
          }
        ];

      };
      "anstyle-wincon" = rec {
        crateName = "anstyle-wincon";
        version = "3.0.3";
        edition = "2021";
        sha256 = "06gv2vbj4hvwb8fxqjmvabp5kx2w01cjgh86pd98y1mpzr4q98v1";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Console" "Win32_Foundation" ];
          }
        ];

      };
      "approx" = rec {
        crateName = "approx";
        version = "0.5.1";
        edition = "2015";
        sha256 = "1ilpv3dgd58rasslss0labarq7jawxmivk17wsh8wmkdm3q15cfa";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "num-complex" = [ "dep:num-complex" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "argh" = rec {
        crateName = "argh";
        version = "0.1.12";
        edition = "2018";
        sha256 = "06fjmac07knqw7vahra9rkbfrrsv31yrqhf7wi623xvzjq3bmxbs";
        authors = [
          "Taylor Cramer <cramertj@google.com>"
          "Benjamin Brittain <bwb@google.com>"
          "Erick Tryzelaar <etryzelaar@google.com>"
        ];
        dependencies = [
          {
            name = "argh_derive";
            packageId = "argh_derive";
          }
          {
            name = "argh_shared";
            packageId = "argh_shared";
          }
        ];

      };
      "argh_derive" = rec {
        crateName = "argh_derive";
        version = "0.1.12";
        edition = "2018";
        sha256 = "0ynq2f2f05ybhmvg5y4m1kdfihw4jsq3bnq6gp32yykbvzp0mpsn";
        procMacro = true;
        authors = [
          "Taylor Cramer <cramertj@google.com>"
          "Benjamin Brittain <bwb@google.com>"
          "Erick Tryzelaar <etryzelaar@google.com>"
        ];
        dependencies = [
          {
            name = "argh_shared";
            packageId = "argh_shared";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
          }
        ];

      };
      "argh_shared" = rec {
        crateName = "argh_shared";
        version = "0.1.12";
        edition = "2018";
        sha256 = "0cbmf3n5fd7ha014m303f4bmsmj0v84an4a1rh77d9dx868z74sn";
        authors = [
          "Taylor Cramer <cramertj@google.com>"
          "Benjamin Brittain <bwb@google.com>"
          "Erick Tryzelaar <etryzelaar@google.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];

      };
      "arrayref" = rec {
        crateName = "arrayref";
        version = "0.3.7";
        edition = "2015";
        sha256 = "0ia5ndyxqkzdymqr4ls53jdmajf09adjimg5kvw65kkprg930jbb";
        authors = [
          "David Roundy <roundyd@physics.oregonstate.edu>"
        ];

      };
      "arrayvec" = rec {
        crateName = "arrayvec";
        version = "0.7.4";
        edition = "2018";
        sha256 = "04b7n722jij0v3fnm3qk072d5ysc2q30rl9fz33zpfhzah30mlwn";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "as-raw-xcb-connection" = rec {
        crateName = "as-raw-xcb-connection";
        version = "1.0.1";
        edition = "2021";
        sha256 = "0sqgpz2ymv5yx76r5j2npjq2x5qvvqnw0vrs35cyv30p3pfp2m8p";
        features = {
          "default" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" ];
      };
      "ash" = rec {
        crateName = "ash";
        version = "0.37.3+1.3.251";
        edition = "2021";
        sha256 = "0jndbsi5c8xifh4fdp378xpbyzdhs7y38hmbhih0lsv8bn1w7s9r";
        authors = [
          "Maik Klein <maikklein@googlemail.com>"
          "Benjamin Saunders <ben.e.saunders@gmail.com>"
          "Marijn Suijten <marijn@traverseresearch.nl>"
        ];
        dependencies = [
          {
            name = "libloading";
            packageId = "libloading 0.7.4";
            optional = true;
          }
        ];
        features = {
          "default" = [ "loaded" "debug" ];
          "libloading" = [ "dep:libloading" ];
          "loaded" = [ "libloading" ];
        };
        resolvedDefaultFeatures = [ "debug" "default" "libloading" "loaded" ];
      };
      "async-broadcast" = rec {
        crateName = "async-broadcast";
        version = "0.5.1";
        edition = "2018";
        sha256 = "0avdqbci1qdlfc4glc3wqrb0wi5ffc7bqv2q1wg14syayvdwqj3w";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Yoshua Wuyts <yoshuawuyts@gmail.com>"
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "event-listener";
            packageId = "event-listener 2.5.3";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
        ];

      };
      "async-channel" = rec {
        crateName = "async-channel";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0a4r3v8r90q3gf1k39gydp8alcv2v0inicr76x12g7n7philsv8k";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            usesDefaultFeatures = false;
          }
          {
            name = "event-listener";
            packageId = "event-listener 5.3.0";
            usesDefaultFeatures = false;
          }
          {
            name = "event-listener-strategy";
            packageId = "event-listener-strategy 0.5.2";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "concurrent-queue/std" "event-listener/std" "event-listener-strategy/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "async-executor" = rec {
        crateName = "async-executor";
        version = "1.11.0";
        edition = "2021";
        sha256 = "16mj0v0ahpidhvyl739gh8dlnzp4qhi8p3ynk48kbcvq743040mi";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "async-task";
            packageId = "async-task";
          }
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
          }
          {
            name = "fastrand";
            packageId = "fastrand 2.1.0";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 2.3.0";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 2.3.0";
            usesDefaultFeatures = false;
            target = { target, features }: (builtins.elem "wasm" target."family");
            features = [ "std" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
        ];
        devDependencies = [
          {
            name = "fastrand";
            packageId = "fastrand 2.1.0";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 2.3.0";
          }
        ];

      };
      "async-fs 1.6.0" = rec {
        crateName = "async-fs";
        version = "1.6.0";
        edition = "2018";
        sha256 = "01if2h77mry9cnm91ql2md595108i2c1bfy9gaivzvjfcl2gk717";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-lock";
            packageId = "async-lock 2.8.0";
          }
          {
            name = "blocking";
            packageId = "blocking";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 1.13.0";
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];

      };
      "async-fs 2.1.2" = rec {
        crateName = "async-fs";
        version = "2.1.2";
        edition = "2018";
        sha256 = "0jp0p7lg9zqy2djgdmivbzx0yqmfn9sm2s9dkhaws3zlharhkkgb";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-lock";
            packageId = "async-lock 3.3.0";
          }
          {
            name = "blocking";
            packageId = "blocking";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 2.3.0";
          }
        ];

      };
      "async-io 1.13.0" = rec {
        crateName = "async-io";
        version = "1.13.0";
        edition = "2018";
        sha256 = "1byj7lpw0ahk6k63sbc9859v68f28hpaab41dxsjj1ggjdfv9i8g";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-lock";
            packageId = "async-lock 2.8.0";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 1.13.0";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parking";
            packageId = "parking";
          }
          {
            name = "polling";
            packageId = "polling 2.8.0";
          }
          {
            name = "rustix";
            packageId = "rustix 0.37.27";
            usesDefaultFeatures = false;
            features = [ "std" "fs" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "socket2";
            packageId = "socket2";
            features = [ "all" ];
          }
          {
            name = "waker-fn";
            packageId = "waker-fn";
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];

      };
      "async-io 2.3.2" = rec {
        crateName = "async-io";
        version = "2.3.2";
        edition = "2021";
        sha256 = "110847w0ycfhklm3i928avd28x7lf9amblr2wjngi8ngk7sv1k6w";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-lock";
            packageId = "async-lock 3.3.0";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 2.3.0";
            usesDefaultFeatures = false;
          }
          {
            name = "parking";
            packageId = "parking";
          }
          {
            name = "polling";
            packageId = "polling 3.7.0";
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.34";
            usesDefaultFeatures = false;
            features = [ "fs" "net" "std" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" ];
          }
        ];

      };
      "async-lock 2.8.0" = rec {
        crateName = "async-lock";
        version = "2.8.0";
        edition = "2018";
        sha256 = "0asq5xdzgp3d5m82y5rg7a0k9q0g95jy6mgc7ivl334x7qlp4wi8";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "event-listener";
            packageId = "event-listener 2.5.3";
          }
        ];

      };
      "async-lock 3.3.0" = rec {
        crateName = "async-lock";
        version = "3.3.0";
        edition = "2021";
        sha256 = "0yxflkfw46rad4lv86f59b5z555dlfmg1riz1n8830rgi0qb8d6h";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "event-listener";
            packageId = "event-listener 4.0.3";
            usesDefaultFeatures = false;
          }
          {
            name = "event-listener-strategy";
            packageId = "event-listener-strategy 0.4.0";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "event-listener/std" "event-listener-strategy/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "async-once-cell" = rec {
        crateName = "async-once-cell";
        version = "0.5.3";
        edition = "2018";
        sha256 = "1ss2ll9r92jiv4g0fdnwqggs3dn48sakij3fg0ba95dag077jf4k";
        authors = [
          "Daniel De Graaf <code@danieldg.net>"
        ];
        features = {
          "critical-section" = [ "dep:critical-section" ];
        };
      };
      "async-process" = rec {
        crateName = "async-process";
        version = "1.8.1";
        edition = "2018";
        sha256 = "126s968lvhg9rlwsnxp7wfzkfn7rl87p0dlvqqlibn081ax3hr7a";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-io";
            packageId = "async-io 1.13.0";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "async-lock";
            packageId = "async-lock 2.8.0";
          }
          {
            name = "async-signal";
            packageId = "async-signal";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "blocking";
            packageId = "blocking";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "event-listener";
            packageId = "event-listener 3.1.0";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 1.13.0";
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.34";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
            features = [ "std" "fs" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Threading" ];
          }
        ];
        devDependencies = [
          {
            name = "async-io";
            packageId = "async-io 1.13.0";
          }
        ];

      };
      "async-recursion" = rec {
        crateName = "async-recursion";
        version = "1.1.1";
        edition = "2018";
        sha256 = "04ac4zh8qz2xjc79lmfi4jlqj5f92xjvfaqvbzwkizyqd4pl4hrv";
        procMacro = true;
        authors = [
          "Robert Usher <266585+dcchut@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
            usesDefaultFeatures = false;
            features = [ "full" "visit-mut" "parsing" "printing" "proc-macro" "clone-impls" ];
          }
        ];

      };
      "async-signal" = rec {
        crateName = "async-signal";
        version = "0.2.6";
        edition = "2018";
        sha256 = "1nmgyb3a3n2k7yh37jx1ndkb3jxh41sxr6cgnxxrq0rmqf8n3rmg";
        authors = [
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "async-io";
            packageId = "async-io 2.3.2";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "async-lock";
            packageId = "async-lock 3.3.0";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "atomic-waker";
            packageId = "atomic-waker";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.34";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
            features = [ "process" "std" ];
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "slab";
            packageId = "slab";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Console" ];
          }
        ];
        devDependencies = [
          {
            name = "async-io";
            packageId = "async-io 2.3.2";
          }
        ];

      };
      "async-task" = rec {
        crateName = "async-task";
        version = "4.7.1";
        edition = "2021";
        sha256 = "1pp3avr4ri2nbh7s6y9ws0397nkx1zymmcr14sq761ljarh3axcb";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "async-trait" = rec {
        crateName = "async-trait";
        version = "0.1.80";
        edition = "2021";
        sha256 = "1jip2xkv8l67bbg6jrz3b1sdb7api77vy38wrjl7sfkmya3j1yn6";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
            features = [ "full" "visit-mut" ];
          }
        ];

      };
      "atomic-polyfill" = rec {
        crateName = "atomic-polyfill";
        version = "1.0.3";
        edition = "2021";
        sha256 = "1x00ndablb89zvbr8m03cgjzgajg86fqn8pgz85yy2gy1pivrwlc";
        authors = [
          "Dario Nieuwenhuis <dirbaio@dirbaio.net>"
        ];
        dependencies = [
          {
            name = "critical-section";
            packageId = "critical-section";
          }
        ];

      };
      "atomic-waker" = rec {
        crateName = "atomic-waker";
        version = "1.1.2";
        edition = "2018";
        sha256 = "1h5av1lw56m0jf0fd3bchxq8a30xv0b4wv8s4zkp4s0i7mfvs18m";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Contributors to futures-rs"
        ];
        features = {
          "portable-atomic" = [ "dep:portable-atomic" ];
        };
      };
      "atspi" = rec {
        crateName = "atspi";
        version = "0.19.0";
        edition = "2021";
        sha256 = "1jl7iv3bvnabg5jd4cpf8ba7zz2dbhk39cr70yh3wnbgmd8g6nb0";
        authors = [
          "Michael Connor Buchan <mikey@blindcomputing.org>"
          "Tait Hoyem <tait@tait.tech>"
          "Alberto Tirla <albertotirla@gmail.com>"
          "DataTriny <datatriny@gmail.com>"
          "Luuk van der Duim <luukvanderduim@gmail.com>"
        ];
        dependencies = [
          {
            name = "atspi-common";
            packageId = "atspi-common";
            usesDefaultFeatures = false;
          }
          {
            name = "atspi-connection";
            packageId = "atspi-connection";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "atspi-proxies";
            packageId = "atspi-proxies";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "async-std" = [ "proxies-async-std" "connection-async-std" ];
          "atspi-connection" = [ "dep:atspi-connection" ];
          "atspi-proxies" = [ "dep:atspi-proxies" ];
          "connection-async-std" = [ "atspi-connection/async-std" "connection" ];
          "connection-tokio" = [ "atspi-connection/tokio" "connection" ];
          "default" = [ "async-std" ];
          "proxies-async-std" = [ "atspi-proxies/async-std" "proxies" ];
          "proxies-tokio" = [ "atspi-proxies/tokio" "proxies" ];
          "tokio" = [ "proxies-tokio" "connection-tokio" ];
          "tracing" = [ "atspi-connection/tracing" ];
        };
        resolvedDefaultFeatures = [ "async-std" "atspi-connection" "atspi-proxies" "connection" "connection-async-std" "proxies" "proxies-async-std" ];
      };
      "atspi-common" = rec {
        crateName = "atspi-common";
        version = "0.3.0";
        edition = "2021";
        sha256 = "1xfdn94r697l98669gsq04rpfxysivkc4cn65fb1yhyjcvwrbbwj";
        dependencies = [
          {
            name = "enumflags2";
            packageId = "enumflags2";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "zbus";
            packageId = "zbus";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zbus_names";
            packageId = "zbus_names";
          }
          {
            name = "zvariant";
            packageId = "zvariant";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "zbus";
            packageId = "zbus";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "async-std" = [ "zbus/async-io" ];
          "default" = [ "async-std" ];
          "tokio" = [ "zbus/tokio" ];
          "zbus" = [ "dep:zbus" ];
        };
        resolvedDefaultFeatures = [ "async-std" "zbus" ];
      };
      "atspi-connection" = rec {
        crateName = "atspi-connection";
        version = "0.3.0";
        edition = "2021";
        sha256 = "0fdrfsgjg3d84mkk6nk3knqz0ygryfdmsn1d7c74qvgqf1ymxim0";
        dependencies = [
          {
            name = "atspi-common";
            packageId = "atspi-common";
            usesDefaultFeatures = false;
          }
          {
            name = "atspi-proxies";
            packageId = "atspi-proxies";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 1.13.0";
          }
          {
            name = "zbus";
            packageId = "zbus";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "async-std" = [ "zbus/async-io" "atspi-proxies/async-std" "atspi-common/async-std" ];
          "default" = [ "async-std" ];
          "tokio" = [ "zbus/tokio" "atspi-proxies/tokio" "atspi-common/tokio" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "async-std" ];
      };
      "atspi-proxies" = rec {
        crateName = "atspi-proxies";
        version = "0.3.0";
        edition = "2021";
        sha256 = "0lmvfycsrach6phz1ymcg9lks8iqiy6bxp2njci7lgkhfc96d5b4";
        dependencies = [
          {
            name = "atspi-common";
            packageId = "atspi-common";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "zbus";
            packageId = "zbus";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "atspi-common";
            packageId = "atspi-common";
            features = [ "async-std" ];
          }
        ];
        features = {
          "async-std" = [ "zbus/async-io" "atspi-common/async-std" ];
          "async-trait" = [ "dep:async-trait" ];
          "default" = [ "async-std" ];
          "futures-lite" = [ "dep:futures-lite" ];
          "gvariant" = [ "zbus/gvariant" ];
          "tokio" = [ "zbus/tokio" "atspi-common/tokio" ];
        };
        resolvedDefaultFeatures = [ "async-std" ];
      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.3.0";
        edition = "2015";
        sha256 = "1c3njkfzpil03k92q0mij5y1pkhhfr4j3bf0h53bgl2vs85lsjqc";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];

      };
      "base64 0.21.7" = rec {
        crateName = "base64";
        version = "0.21.7";
        edition = "2018";
        sha256 = "0rw52yvsk75kar9wgqfwgb414kvil1gn7mqkrhn9zf1537mpsacx";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "base64 0.22.1" = rec {
        crateName = "base64";
        version = "0.22.1";
        edition = "2018";
        sha256 = "1imqzgh7bxcikp5vx3shqvw9j09g9ly0xr0jma0q66i52r7jbcvj";
        authors = [
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "basis-universal" = rec {
        crateName = "basis-universal";
        version = "0.3.1";
        edition = "2018";
        sha256 = "055xgkkqix8hyr0vln15rc7fnrzimh7lhfmrysi2zqgl15bv0psm";
        authors = [
          "Philip Degarmo <aclysma@gmail.com>"
        ];
        dependencies = [
          {
            name = "basis-universal-sys";
            packageId = "basis-universal-sys";
          }
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];

      };
      "basis-universal-sys" = rec {
        crateName = "basis-universal-sys";
        version = "0.3.1";
        edition = "2018";
        sha256 = "01l5bvrnr4ari7pp5qy8w3ar3kzdg5wgqybxwyq8z5a7jmgdx6zx";
        authors = [
          "Philip Degarmo <aclysma@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "bevy" = rec {
        crateName = "bevy";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./.; }
          else ./.;
        dependencies = [
          {
            name = "bevy_dylib";
            packageId = "bevy_dylib";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "bevy_internal";
            packageId = "bevy_internal";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "argh";
            packageId = "argh";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
          }
          {
            name = "flate2";
            packageId = "flate2";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 2.3.0";
          }
          {
            name = "rand";
            packageId = "rand";
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha";
          }
          {
            name = "ron";
            packageId = "ron";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "accesskit_unix" = [ "bevy_internal/accesskit_unix" ];
          "android_shared_stdcxx" = [ "bevy_internal/android_shared_stdcxx" ];
          "animation" = [ "bevy_internal/animation" "bevy_animation" ];
          "asset_processor" = [ "bevy_internal/asset_processor" ];
          "async-io" = [ "bevy_internal/async-io" ];
          "basis-universal" = [ "bevy_internal/basis-universal" ];
          "bevy_animation" = [ "bevy_internal/bevy_animation" "bevy_color" ];
          "bevy_asset" = [ "bevy_internal/bevy_asset" ];
          "bevy_audio" = [ "bevy_internal/bevy_audio" ];
          "bevy_ci_testing" = [ "bevy_internal/bevy_ci_testing" ];
          "bevy_color" = [ "bevy_internal/bevy_color" ];
          "bevy_core_pipeline" = [ "bevy_internal/bevy_core_pipeline" "bevy_asset" "bevy_render" ];
          "bevy_debug_stepping" = [ "bevy_internal/bevy_debug_stepping" ];
          "bevy_dev_tools" = [ "bevy_internal/bevy_dev_tools" ];
          "bevy_dynamic_plugin" = [ "bevy_internal/bevy_dynamic_plugin" ];
          "bevy_gilrs" = [ "bevy_internal/bevy_gilrs" ];
          "bevy_gizmos" = [ "bevy_internal/bevy_gizmos" "bevy_color" ];
          "bevy_gltf" = [ "bevy_internal/bevy_gltf" "bevy_asset" "bevy_scene" "bevy_pbr" ];
          "bevy_pbr" = [ "bevy_internal/bevy_pbr" "bevy_asset" "bevy_render" "bevy_core_pipeline" ];
          "bevy_render" = [ "bevy_internal/bevy_render" "bevy_color" ];
          "bevy_scene" = [ "bevy_internal/bevy_scene" "bevy_asset" ];
          "bevy_sprite" = [ "bevy_internal/bevy_sprite" "bevy_render" "bevy_core_pipeline" "bevy_color" ];
          "bevy_text" = [ "bevy_internal/bevy_text" "bevy_asset" "bevy_sprite" ];
          "bevy_ui" = [ "bevy_internal/bevy_ui" "bevy_core_pipeline" "bevy_text" "bevy_sprite" "bevy_color" ];
          "bevy_winit" = [ "bevy_internal/bevy_winit" ];
          "bmp" = [ "bevy_internal/bmp" ];
          "dds" = [ "bevy_internal/dds" ];
          "debug_glam_assert" = [ "bevy_internal/debug_glam_assert" ];
          "default" = [ "animation" "bevy_asset" "bevy_audio" "bevy_color" "bevy_gilrs" "bevy_scene" "bevy_winit" "bevy_core_pipeline" "bevy_pbr" "bevy_gltf" "bevy_render" "bevy_sprite" "bevy_text" "bevy_ui" "multi_threaded" "png" "hdr" "vorbis" "x11" "bevy_gizmos" "android_shared_stdcxx" "tonemapping_luts" "default_font" "webgl2" "sysinfo_plugin" ];
          "default_font" = [ "bevy_internal/default_font" ];
          "detailed_trace" = [ "bevy_internal/detailed_trace" ];
          "dynamic_linking" = [ "dep:bevy_dylib" "bevy_internal/dynamic_linking" ];
          "embedded_watcher" = [ "bevy_internal/embedded_watcher" ];
          "exr" = [ "bevy_internal/exr" ];
          "file_watcher" = [ "bevy_internal/file_watcher" ];
          "flac" = [ "bevy_internal/flac" ];
          "glam_assert" = [ "bevy_internal/glam_assert" ];
          "hdr" = [ "bevy_internal/hdr" ];
          "ios_simulator" = [ "bevy_internal/ios_simulator" ];
          "jpeg" = [ "bevy_internal/jpeg" ];
          "ktx2" = [ "bevy_internal/ktx2" ];
          "meshlet" = [ "bevy_internal/meshlet" ];
          "meshlet_processor" = [ "bevy_internal/meshlet_processor" ];
          "minimp3" = [ "bevy_internal/minimp3" ];
          "mp3" = [ "bevy_internal/mp3" ];
          "multi_threaded" = [ "bevy_internal/multi_threaded" ];
          "pbr_multi_layer_material_textures" = [ "bevy_internal/pbr_multi_layer_material_textures" ];
          "pbr_transmission_textures" = [ "bevy_internal/pbr_transmission_textures" ];
          "png" = [ "bevy_internal/png" ];
          "pnm" = [ "bevy_internal/pnm" ];
          "serialize" = [ "bevy_internal/serialize" ];
          "shader_format_glsl" = [ "bevy_internal/shader_format_glsl" ];
          "shader_format_spirv" = [ "bevy_internal/shader_format_spirv" ];
          "subpixel_glyph_atlas" = [ "bevy_internal/subpixel_glyph_atlas" ];
          "symphonia-aac" = [ "bevy_internal/symphonia-aac" ];
          "symphonia-all" = [ "bevy_internal/symphonia-all" ];
          "symphonia-flac" = [ "bevy_internal/symphonia-flac" ];
          "symphonia-isomp4" = [ "bevy_internal/symphonia-isomp4" ];
          "symphonia-vorbis" = [ "bevy_internal/symphonia-vorbis" ];
          "symphonia-wav" = [ "bevy_internal/symphonia-wav" ];
          "sysinfo_plugin" = [ "bevy_internal/sysinfo_plugin" ];
          "tga" = [ "bevy_internal/tga" ];
          "tonemapping_luts" = [ "bevy_internal/tonemapping_luts" "ktx2" "zstd" ];
          "trace" = [ "bevy_internal/trace" ];
          "trace_chrome" = [ "trace" "bevy_internal/trace_chrome" ];
          "trace_tracy" = [ "trace" "bevy_internal/trace_tracy" ];
          "trace_tracy_memory" = [ "trace" "bevy_internal/trace_tracy" "bevy_internal/trace_tracy_memory" ];
          "vorbis" = [ "bevy_internal/vorbis" ];
          "wav" = [ "bevy_internal/wav" ];
          "wayland" = [ "bevy_internal/wayland" ];
          "webgl2" = [ "bevy_internal/webgl" ];
          "webgpu" = [ "bevy_internal/webgpu" ];
          "webp" = [ "bevy_internal/webp" ];
          "wgpu_trace" = [ "bevy_internal/wgpu_trace" ];
          "x11" = [ "bevy_internal/x11" ];
          "zlib" = [ "bevy_internal/zlib" ];
          "zstd" = [ "bevy_internal/zstd" ];
        };
        resolvedDefaultFeatures = [ "accesskit_unix" "android_shared_stdcxx" "animation" "asset_processor" "async-io" "basis-universal" "bevy_animation" "bevy_asset" "bevy_audio" "bevy_ci_testing" "bevy_color" "bevy_core_pipeline" "bevy_debug_stepping" "bevy_dev_tools" "bevy_dynamic_plugin" "bevy_gilrs" "bevy_gizmos" "bevy_gltf" "bevy_pbr" "bevy_render" "bevy_scene" "bevy_sprite" "bevy_text" "bevy_ui" "bevy_winit" "bmp" "dds" "debug_glam_assert" "default" "default_font" "detailed_trace" "dynamic_linking" "embedded_watcher" "exr" "file_watcher" "flac" "glam_assert" "hdr" "ios_simulator" "jpeg" "ktx2" "meshlet" "meshlet_processor" "minimp3" "mp3" "multi_threaded" "pbr_multi_layer_material_textures" "pbr_transmission_textures" "png" "pnm" "serialize" "shader_format_glsl" "shader_format_spirv" "subpixel_glyph_atlas" "symphonia-aac" "symphonia-all" "symphonia-flac" "symphonia-isomp4" "symphonia-vorbis" "symphonia-wav" "sysinfo_plugin" "tga" "tonemapping_luts" "trace" "trace_chrome" "trace_tracy" "trace_tracy_memory" "vorbis" "wav" "wayland" "webgl2" "webgpu" "webp" "wgpu_trace" "x11" "zlib" "zstd" ];
      };
      "bevy_a11y" = rec {
        crateName = "bevy_a11y";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_a11y; }
          else ./crates/bevy_a11y;
        dependencies = [
          {
            name = "accesskit";
            packageId = "accesskit";
          }
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_derive";
            packageId = "bevy_derive";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
          }
        ];

      };
      "bevy_animation" = rec {
        crateName = "bevy_animation";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_animation; }
          else ./crates/bevy_animation;
        dependencies = [
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_asset";
            packageId = "bevy_asset";
          }
          {
            name = "bevy_color";
            packageId = "bevy_color";
          }
          {
            name = "bevy_core";
            packageId = "bevy_core";
          }
          {
            name = "bevy_derive";
            packageId = "bevy_derive";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
          }
          {
            name = "bevy_hierarchy";
            packageId = "bevy_hierarchy";
          }
          {
            name = "bevy_log";
            packageId = "bevy_log";
          }
          {
            name = "bevy_math";
            packageId = "bevy_math";
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
            features = [ "bevy" "petgraph" ];
          }
          {
            name = "bevy_render";
            packageId = "bevy_render";
          }
          {
            name = "bevy_time";
            packageId = "bevy_time";
          }
          {
            name = "bevy_transform";
            packageId = "bevy_transform";
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "blake3";
            packageId = "blake3";
          }
          {
            name = "fixedbitset";
            packageId = "fixedbitset 0.5.7";
          }
          {
            name = "petgraph";
            packageId = "petgraph";
            features = [ "serde-1" ];
          }
          {
            name = "ron";
            packageId = "ron";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "thread_local";
            packageId = "thread_local";
          }
          {
            name = "uuid";
            packageId = "uuid";
            features = [ "v4" ];
          }
        ];

      };
      "bevy_app" = rec {
        crateName = "bevy_app";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_app; }
          else ./crates/bevy_app;
        dependencies = [
          {
            name = "bevy_derive";
            packageId = "bevy_derive";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
            usesDefaultFeatures = false;
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
            optional = true;
          }
          {
            name = "bevy_tasks";
            packageId = "bevy_tasks";
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "console_error_panic_hook";
            packageId = "console_error_panic_hook";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "downcast-rs";
            packageId = "downcast-rs";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "Window" ];
          }
        ];
        features = {
          "bevy_reflect" = [ "dep:bevy_reflect" "bevy_ecs/bevy_reflect" ];
          "default" = [ "bevy_reflect" ];
          "serde" = [ "dep:serde" ];
          "serialize" = [ "bevy_ecs/serde" ];
        };
        resolvedDefaultFeatures = [ "bevy_debug_stepping" "bevy_reflect" "default" "serde" "serialize" "trace" ];
      };
      "bevy_asset" = rec {
        crateName = "bevy_asset";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_asset; }
          else ./crates/bevy_asset;
        dependencies = [
          {
            name = "async-broadcast";
            packageId = "async-broadcast";
          }
          {
            name = "async-fs";
            packageId = "async-fs 2.1.2";
          }
          {
            name = "async-lock";
            packageId = "async-lock 3.3.0";
          }
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_asset_macros";
            packageId = "bevy_asset_macros";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
            features = [ "uuid" ];
          }
          {
            name = "bevy_tasks";
            packageId = "bevy_tasks";
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "bevy_winit";
            packageId = "bevy_winit";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "blake3";
            packageId = "blake3";
          }
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
          }
          {
            name = "downcast-rs";
            packageId = "downcast-rs";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 2.3.0";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "notify-debouncer-full";
            packageId = "notify-debouncer-full";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            features = [ "arc_lock" "send_guard" ];
          }
          {
            name = "ron";
            packageId = "ron";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "uuid";
            packageId = "uuid";
            features = [ "v4" ];
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "Request" "Window" "Response" ];
          }
        ];
        devDependencies = [
          {
            name = "bevy_core";
            packageId = "bevy_core";
          }
          {
            name = "bevy_log";
            packageId = "bevy_log";
          }
        ];
        features = {
          "embedded_watcher" = [ "file_watcher" ];
          "file_watcher" = [ "notify-debouncer-full" "watch" ];
          "multi_threaded" = [ "bevy_tasks/multi_threaded" ];
          "notify-debouncer-full" = [ "dep:notify-debouncer-full" ];
        };
        resolvedDefaultFeatures = [ "asset_processor" "embedded_watcher" "file_watcher" "multi_threaded" "notify-debouncer-full" "trace" "watch" ];
      };
      "bevy_asset_macros" = rec {
        crateName = "bevy_asset_macros";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_asset/macros; }
          else ./crates/bevy_asset/macros;
        procMacro = true;
        dependencies = [
          {
            name = "bevy_macro_utils";
            packageId = "bevy_macro_utils";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
          }
        ];

      };
      "bevy_audio" = rec {
        crateName = "bevy_audio";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_audio; }
          else ./crates/bevy_audio;
        dependencies = [
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_asset";
            packageId = "bevy_asset";
          }
          {
            name = "bevy_derive";
            packageId = "bevy_derive";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
          }
          {
            name = "bevy_hierarchy";
            packageId = "bevy_hierarchy";
          }
          {
            name = "bevy_math";
            packageId = "bevy_math";
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
            features = [ "bevy" ];
          }
          {
            name = "bevy_transform";
            packageId = "bevy_transform";
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "cpal";
            packageId = "cpal";
            optional = true;
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "rodio";
            packageId = "rodio";
            usesDefaultFeatures = false;
          }
          {
            name = "rodio";
            packageId = "rodio";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "wasm-bindgen" ];
          }
        ];
        features = {
          "android_shared_stdcxx" = [ "cpal/oboe-shared-stdcxx" ];
          "cpal" = [ "dep:cpal" ];
          "flac" = [ "rodio/flac" ];
          "minimp3" = [ "rodio/minimp3" ];
          "mp3" = [ "rodio/mp3" ];
          "symphonia-aac" = [ "rodio/symphonia-aac" ];
          "symphonia-all" = [ "rodio/symphonia-all" ];
          "symphonia-flac" = [ "rodio/symphonia-flac" ];
          "symphonia-isomp4" = [ "rodio/symphonia-isomp4" ];
          "symphonia-vorbis" = [ "rodio/symphonia-vorbis" ];
          "symphonia-wav" = [ "rodio/symphonia-wav" ];
          "vorbis" = [ "rodio/vorbis" ];
          "wav" = [ "rodio/wav" ];
        };
        resolvedDefaultFeatures = [ "android_shared_stdcxx" "cpal" "flac" "minimp3" "mp3" "symphonia-aac" "symphonia-all" "symphonia-flac" "symphonia-isomp4" "symphonia-vorbis" "symphonia-wav" "vorbis" "wav" ];
      };
      "bevy_color" = rec {
        crateName = "bevy_color";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_color; }
          else ./crates/bevy_color;
        dependencies = [
          {
            name = "bevy_math";
            packageId = "bevy_math";
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
            features = [ "bevy" ];
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
          {
            name = "encase";
            packageId = "encase";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "wgpu-types";
            packageId = "wgpu-types";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serialize" = [ "serde" ];
          "wgpu-types" = [ "dep:wgpu-types" ];
        };
        resolvedDefaultFeatures = [ "serde" "serialize" "wgpu-types" ];
      };
      "bevy_core" = rec {
        crateName = "bevy_core";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_core; }
          else ./crates/bevy_core;
        dependencies = [
          {
            name = "bevy_app";
            packageId = "bevy_app";
            features = [ "bevy_reflect" ];
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
            features = [ "bevy_reflect" ];
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
            features = [ "bevy" ];
          }
          {
            name = "bevy_tasks";
            packageId = "bevy_tasks";
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "uuid";
            packageId = "uuid";
          }
        ];
        devDependencies = [
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
          }
        ];
        features = {
          "serialize" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serialize" ];
      };
      "bevy_core_pipeline" = rec {
        crateName = "bevy_core_pipeline";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_core_pipeline; }
          else ./crates/bevy_core_pipeline;
        authors = [
          "Bevy Contributors <bevyengine@gmail.com>"
          "Carter Anderson <mcanders1@gmail.com>"
        ];
        dependencies = [
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_asset";
            packageId = "bevy_asset";
          }
          {
            name = "bevy_color";
            packageId = "bevy_color";
          }
          {
            name = "bevy_core";
            packageId = "bevy_core";
          }
          {
            name = "bevy_derive";
            packageId = "bevy_derive";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
          }
          {
            name = "bevy_math";
            packageId = "bevy_math";
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
          }
          {
            name = "bevy_render";
            packageId = "bevy_render";
          }
          {
            name = "bevy_transform";
            packageId = "bevy_transform";
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "nonmax";
            packageId = "nonmax";
          }
          {
            name = "radsort";
            packageId = "radsort";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "dds" = [ "bevy_render/dds" ];
          "tonemapping_luts" = [ "bevy_render/ktx2" "bevy_render/zstd" ];
        };
        resolvedDefaultFeatures = [ "dds" "tonemapping_luts" "trace" "webgl" "webgpu" ];
      };
      "bevy_derive" = rec {
        crateName = "bevy_derive";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_derive; }
          else ./crates/bevy_derive;
        procMacro = true;
        dependencies = [
          {
            name = "bevy_macro_utils";
            packageId = "bevy_macro_utils";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
            features = [ "full" ];
          }
        ];

      };
      "bevy_dev_tools" = rec {
        crateName = "bevy_dev_tools";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_dev_tools; }
          else ./crates/bevy_dev_tools;
        dependencies = [
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_asset";
            packageId = "bevy_asset";
          }
          {
            name = "bevy_color";
            packageId = "bevy_color";
          }
          {
            name = "bevy_core";
            packageId = "bevy_core";
          }
          {
            name = "bevy_core_pipeline";
            packageId = "bevy_core_pipeline";
          }
          {
            name = "bevy_diagnostic";
            packageId = "bevy_diagnostic";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
          }
          {
            name = "bevy_gizmos";
            packageId = "bevy_gizmos";
          }
          {
            name = "bevy_hierarchy";
            packageId = "bevy_hierarchy";
          }
          {
            name = "bevy_input";
            packageId = "bevy_input";
          }
          {
            name = "bevy_math";
            packageId = "bevy_math";
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
          }
          {
            name = "bevy_render";
            packageId = "bevy_render";
          }
          {
            name = "bevy_text";
            packageId = "bevy_text";
          }
          {
            name = "bevy_time";
            packageId = "bevy_time";
          }
          {
            name = "bevy_transform";
            packageId = "bevy_transform";
          }
          {
            name = "bevy_ui";
            packageId = "bevy_ui";
            features = [ "bevy_text" ];
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "bevy_window";
            packageId = "bevy_window";
          }
          {
            name = "ron";
            packageId = "ron";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        features = {
          "bevy_ci_testing" = [ "serde" "ron" ];
          "default" = [ "bevy_ui_debug" ];
          "ron" = [ "dep:ron" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "bevy_ci_testing" "bevy_ui_debug" "default" "ron" "serde" ];
      };
      "bevy_diagnostic" = rec {
        crateName = "bevy_diagnostic";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_diagnostic; }
          else ./crates/bevy_diagnostic;
        dependencies = [
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_core";
            packageId = "bevy_core";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
          }
          {
            name = "bevy_time";
            packageId = "bevy_time";
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "const-fnv1a-hash";
            packageId = "const-fnv1a-hash";
          }
          {
            name = "sysinfo";
            packageId = "sysinfo";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (("macos" == target."os" or null));
            features = [ "apple-app-store" ];
          }
          {
            name = "sysinfo";
            packageId = "sysinfo";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (("linux" == target."os" or null) || ("windows" == target."os" or null) || ("android" == target."os" or null));
          }
        ];
        features = {
          "sysinfo" = [ "dep:sysinfo" ];
          "sysinfo_plugin" = [ "sysinfo" ];
        };
        resolvedDefaultFeatures = [ "dynamic_linking" "sysinfo" "sysinfo_plugin" ];
      };
      "bevy_dylib" = rec {
        crateName = "bevy_dylib";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_dylib; }
          else ./crates/bevy_dylib;type = [ "dylib" ];
        dependencies = [
          {
            name = "bevy_internal";
            packageId = "bevy_internal";
            usesDefaultFeatures = false;
          }
        ];

      };
      "bevy_dynamic_plugin" = rec {
        crateName = "bevy_dynamic_plugin";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_dynamic_plugin; }
          else ./crates/bevy_dynamic_plugin;
        dependencies = [
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "libloading";
            packageId = "libloading 0.8.3";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];

      };
      "bevy_ecs" = rec {
        crateName = "bevy_ecs";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_ecs; }
          else ./crates/bevy_ecs;
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            optional = true;
          }
          {
            name = "bevy_ecs_macros";
            packageId = "bevy_ecs_macros";
          }
          {
            name = "bevy_ptr";
            packageId = "bevy_ptr";
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
            optional = true;
          }
          {
            name = "bevy_tasks";
            packageId = "bevy_tasks";
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
          }
          {
            name = "fixedbitset";
            packageId = "fixedbitset 0.5.7";
          }
          {
            name = "nonmax";
            packageId = "nonmax";
          }
          {
            name = "petgraph";
            packageId = "petgraph";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "arrayvec" = [ "dep:arrayvec" ];
          "bevy_reflect" = [ "dep:bevy_reflect" ];
          "default" = [ "bevy_reflect" ];
          "multi_threaded" = [ "bevy_tasks/multi_threaded" "arrayvec" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "arrayvec" "bevy_debug_stepping" "bevy_reflect" "default" "multi_threaded" "serde" "trace" ];
      };
      "bevy_ecs_macros" = rec {
        crateName = "bevy_ecs_macros";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_ecs/macros; }
          else ./crates/bevy_ecs/macros;
        procMacro = true;
        dependencies = [
          {
            name = "bevy_macro_utils";
            packageId = "bevy_macro_utils";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
            features = [ "full" ];
          }
        ];

      };
      "bevy_encase_derive" = rec {
        crateName = "bevy_encase_derive";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_encase_derive; }
          else ./crates/bevy_encase_derive;
        procMacro = true;
        dependencies = [
          {
            name = "bevy_macro_utils";
            packageId = "bevy_macro_utils";
          }
          {
            name = "encase_derive_impl";
            packageId = "encase_derive_impl";
          }
        ];

      };
      "bevy_gilrs" = rec {
        crateName = "bevy_gilrs";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_gilrs; }
          else ./crates/bevy_gilrs;
        dependencies = [
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
          }
          {
            name = "bevy_input";
            packageId = "bevy_input";
          }
          {
            name = "bevy_time";
            packageId = "bevy_time";
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "gilrs";
            packageId = "gilrs";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];

      };
      "bevy_gizmos" = rec {
        crateName = "bevy_gizmos";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_gizmos; }
          else ./crates/bevy_gizmos;
        dependencies = [
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_asset";
            packageId = "bevy_asset";
          }
          {
            name = "bevy_color";
            packageId = "bevy_color";
          }
          {
            name = "bevy_core_pipeline";
            packageId = "bevy_core_pipeline";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
          }
          {
            name = "bevy_gizmos_macros";
            packageId = "bevy_gizmos_macros";
          }
          {
            name = "bevy_math";
            packageId = "bevy_math";
          }
          {
            name = "bevy_pbr";
            packageId = "bevy_pbr";
            optional = true;
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
          }
          {
            name = "bevy_render";
            packageId = "bevy_render";
          }
          {
            name = "bevy_sprite";
            packageId = "bevy_sprite";
            optional = true;
          }
          {
            name = "bevy_time";
            packageId = "bevy_time";
          }
          {
            name = "bevy_transform";
            packageId = "bevy_transform";
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
        ];
        features = {
          "bevy_pbr" = [ "dep:bevy_pbr" ];
          "bevy_sprite" = [ "dep:bevy_sprite" ];
        };
        resolvedDefaultFeatures = [ "bevy_pbr" "bevy_sprite" "webgl" "webgpu" ];
      };
      "bevy_gizmos_macros" = rec {
        crateName = "bevy_gizmos_macros";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_gizmos/macros; }
          else ./crates/bevy_gizmos/macros;
        procMacro = true;
        dependencies = [
          {
            name = "bevy_macro_utils";
            packageId = "bevy_macro_utils";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
          }
        ];

      };
      "bevy_gltf" = rec {
        crateName = "bevy_gltf";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_gltf; }
          else ./crates/bevy_gltf;
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bevy_animation";
            packageId = "bevy_animation";
            optional = true;
          }
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_asset";
            packageId = "bevy_asset";
          }
          {
            name = "bevy_color";
            packageId = "bevy_color";
          }
          {
            name = "bevy_core";
            packageId = "bevy_core";
          }
          {
            name = "bevy_core_pipeline";
            packageId = "bevy_core_pipeline";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
          }
          {
            name = "bevy_hierarchy";
            packageId = "bevy_hierarchy";
          }
          {
            name = "bevy_math";
            packageId = "bevy_math";
          }
          {
            name = "bevy_pbr";
            packageId = "bevy_pbr";
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
            features = [ "bevy" ];
          }
          {
            name = "bevy_render";
            packageId = "bevy_render";
          }
          {
            name = "bevy_scene";
            packageId = "bevy_scene";
            features = [ "bevy_render" ];
          }
          {
            name = "bevy_tasks";
            packageId = "bevy_tasks";
          }
          {
            name = "bevy_transform";
            packageId = "bevy_transform";
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "gltf";
            packageId = "gltf";
            usesDefaultFeatures = false;
            features = [ "KHR_lights_punctual" "KHR_materials_transmission" "KHR_materials_ior" "KHR_materials_volume" "KHR_materials_unlit" "KHR_materials_emissive_strength" "KHR_texture_transform" "extras" "extensions" "names" "utils" ];
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "bevy_animation" = [ "dep:bevy_animation" ];
          "dds" = [ "bevy_render/dds" ];
          "pbr_transmission_textures" = [ "bevy_pbr/pbr_transmission_textures" ];
        };
        resolvedDefaultFeatures = [ "bevy_animation" "dds" "pbr_multi_layer_material_textures" "pbr_transmission_textures" ];
      };
      "bevy_hierarchy" = rec {
        crateName = "bevy_hierarchy";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_hierarchy; }
          else ./crates/bevy_hierarchy;
        dependencies = [
          {
            name = "bevy_app";
            packageId = "bevy_app";
            optional = true;
          }
          {
            name = "bevy_core";
            packageId = "bevy_core";
            optional = true;
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
            usesDefaultFeatures = false;
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
            optional = true;
            features = [ "bevy" "smallvec" ];
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = [ "union" "const_generics" ];
          }
        ];
        features = {
          "bevy_app" = [ "reflect" "dep:bevy_app" "bevy_core" ];
          "bevy_core" = [ "dep:bevy_core" ];
          "bevy_reflect" = [ "dep:bevy_reflect" ];
          "default" = [ "bevy_app" ];
          "reflect" = [ "bevy_ecs/bevy_reflect" "bevy_reflect" ];
        };
        resolvedDefaultFeatures = [ "bevy_app" "bevy_core" "bevy_reflect" "default" "reflect" "trace" ];
      };
      "bevy_input" = rec {
        crateName = "bevy_input";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_input; }
          else ./crates/bevy_input;
        dependencies = [
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
          }
          {
            name = "bevy_math";
            packageId = "bevy_math";
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
            features = [ "glam" "smol_str" ];
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "smol_str";
            packageId = "smol_str";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serialize" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "serialize" ];
      };
      "bevy_internal" = rec {
        crateName = "bevy_internal";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_internal; }
          else ./crates/bevy_internal;
        dependencies = [
          {
            name = "bevy_a11y";
            packageId = "bevy_a11y";
          }
          {
            name = "bevy_animation";
            packageId = "bevy_animation";
            optional = true;
          }
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_asset";
            packageId = "bevy_asset";
            optional = true;
          }
          {
            name = "bevy_audio";
            packageId = "bevy_audio";
            optional = true;
          }
          {
            name = "bevy_color";
            packageId = "bevy_color";
            optional = true;
          }
          {
            name = "bevy_core";
            packageId = "bevy_core";
          }
          {
            name = "bevy_core_pipeline";
            packageId = "bevy_core_pipeline";
            optional = true;
          }
          {
            name = "bevy_derive";
            packageId = "bevy_derive";
          }
          {
            name = "bevy_dev_tools";
            packageId = "bevy_dev_tools";
            optional = true;
          }
          {
            name = "bevy_diagnostic";
            packageId = "bevy_diagnostic";
          }
          {
            name = "bevy_dynamic_plugin";
            packageId = "bevy_dynamic_plugin";
            optional = true;
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
          }
          {
            name = "bevy_gilrs";
            packageId = "bevy_gilrs";
            optional = true;
          }
          {
            name = "bevy_gizmos";
            packageId = "bevy_gizmos";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "bevy_gltf";
            packageId = "bevy_gltf";
            optional = true;
          }
          {
            name = "bevy_hierarchy";
            packageId = "bevy_hierarchy";
          }
          {
            name = "bevy_input";
            packageId = "bevy_input";
          }
          {
            name = "bevy_log";
            packageId = "bevy_log";
          }
          {
            name = "bevy_math";
            packageId = "bevy_math";
          }
          {
            name = "bevy_pbr";
            packageId = "bevy_pbr";
            optional = true;
          }
          {
            name = "bevy_ptr";
            packageId = "bevy_ptr";
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
            features = [ "bevy" ];
          }
          {
            name = "bevy_render";
            packageId = "bevy_render";
            optional = true;
          }
          {
            name = "bevy_scene";
            packageId = "bevy_scene";
            optional = true;
          }
          {
            name = "bevy_sprite";
            packageId = "bevy_sprite";
            optional = true;
          }
          {
            name = "bevy_tasks";
            packageId = "bevy_tasks";
          }
          {
            name = "bevy_text";
            packageId = "bevy_text";
            optional = true;
          }
          {
            name = "bevy_time";
            packageId = "bevy_time";
          }
          {
            name = "bevy_transform";
            packageId = "bevy_transform";
          }
          {
            name = "bevy_ui";
            packageId = "bevy_ui";
            optional = true;
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "bevy_window";
            packageId = "bevy_window";
          }
          {
            name = "bevy_winit";
            packageId = "bevy_winit";
            optional = true;
          }
        ];
        features = {
          "accesskit_unix" = [ "bevy_winit/accesskit_unix" ];
          "android_shared_stdcxx" = [ "bevy_audio/android_shared_stdcxx" ];
          "animation" = [ "bevy_animation" "bevy_gltf?/bevy_animation" ];
          "asset_processor" = [ "bevy_asset?/asset_processor" ];
          "async-io" = [ "bevy_tasks/async-io" ];
          "basis-universal" = [ "bevy_render/basis-universal" ];
          "bevy_animation" = [ "dep:bevy_animation" ];
          "bevy_asset" = [ "dep:bevy_asset" ];
          "bevy_audio" = [ "dep:bevy_audio" ];
          "bevy_ci_testing" = [ "bevy_dev_tools/bevy_ci_testing" "bevy_render?/ci_limits" ];
          "bevy_color" = [ "dep:bevy_color" ];
          "bevy_core_pipeline" = [ "dep:bevy_core_pipeline" ];
          "bevy_debug_stepping" = [ "bevy_ecs/bevy_debug_stepping" "bevy_app/bevy_debug_stepping" ];
          "bevy_dev_tools" = [ "dep:bevy_dev_tools" ];
          "bevy_dynamic_plugin" = [ "dep:bevy_dynamic_plugin" ];
          "bevy_gilrs" = [ "dep:bevy_gilrs" ];
          "bevy_gizmos" = [ "dep:bevy_gizmos" ];
          "bevy_gltf" = [ "dep:bevy_gltf" ];
          "bevy_pbr" = [ "dep:bevy_pbr" "bevy_gizmos?/bevy_pbr" ];
          "bevy_render" = [ "dep:bevy_render" "bevy_scene?/bevy_render" ];
          "bevy_scene" = [ "dep:bevy_scene" ];
          "bevy_sprite" = [ "dep:bevy_sprite" "bevy_gizmos?/bevy_sprite" ];
          "bevy_text" = [ "dep:bevy_text" "bevy_ui?/bevy_text" ];
          "bevy_ui" = [ "dep:bevy_ui" ];
          "bevy_winit" = [ "dep:bevy_winit" ];
          "bmp" = [ "bevy_render/bmp" ];
          "dds" = [ "bevy_render/dds" "bevy_core_pipeline/dds" "bevy_gltf/dds" ];
          "debug_glam_assert" = [ "bevy_math/debug_glam_assert" ];
          "default_font" = [ "bevy_text?/default_font" ];
          "detailed_trace" = [ "bevy_utils/detailed_trace" ];
          "dynamic_linking" = [ "bevy_diagnostic/dynamic_linking" ];
          "embedded_watcher" = [ "bevy_asset?/embedded_watcher" ];
          "exr" = [ "bevy_render/exr" ];
          "file_watcher" = [ "bevy_asset?/file_watcher" ];
          "flac" = [ "bevy_audio/flac" ];
          "glam_assert" = [ "bevy_math/glam_assert" ];
          "hdr" = [ "bevy_render/hdr" ];
          "ios_simulator" = [ "bevy_pbr?/ios_simulator" "bevy_render?/ios_simulator" ];
          "jpeg" = [ "bevy_render/jpeg" ];
          "ktx2" = [ "bevy_render/ktx2" ];
          "meshlet" = [ "bevy_pbr?/meshlet" ];
          "meshlet_processor" = [ "bevy_pbr?/meshlet_processor" ];
          "minimp3" = [ "bevy_audio/minimp3" ];
          "mp3" = [ "bevy_audio/mp3" ];
          "multi_threaded" = [ "bevy_asset?/multi_threaded" "bevy_ecs/multi_threaded" "bevy_render?/multi_threaded" "bevy_tasks/multi_threaded" ];
          "pbr_multi_layer_material_textures" = [ "bevy_pbr?/pbr_multi_layer_material_textures" "bevy_gltf?/pbr_multi_layer_material_textures" ];
          "pbr_transmission_textures" = [ "bevy_pbr?/pbr_transmission_textures" "bevy_gltf?/pbr_transmission_textures" ];
          "png" = [ "bevy_render/png" ];
          "pnm" = [ "bevy_render/pnm" ];
          "serialize" = [ "bevy_core/serialize" "bevy_input/serialize" "bevy_time/serialize" "bevy_window/serialize" "bevy_winit?/serialize" "bevy_transform/serialize" "bevy_math/serialize" "bevy_scene?/serialize" "bevy_ui?/serialize" "bevy_color?/serialize" ];
          "shader_format_glsl" = [ "bevy_render/shader_format_glsl" ];
          "shader_format_spirv" = [ "bevy_render/shader_format_spirv" ];
          "subpixel_glyph_atlas" = [ "bevy_text/subpixel_glyph_atlas" ];
          "symphonia-aac" = [ "bevy_audio/symphonia-aac" ];
          "symphonia-all" = [ "bevy_audio/symphonia-all" ];
          "symphonia-flac" = [ "bevy_audio/symphonia-flac" ];
          "symphonia-isomp4" = [ "bevy_audio/symphonia-isomp4" ];
          "symphonia-vorbis" = [ "bevy_audio/symphonia-vorbis" ];
          "symphonia-wav" = [ "bevy_audio/symphonia-wav" ];
          "sysinfo_plugin" = [ "bevy_diagnostic/sysinfo_plugin" ];
          "tga" = [ "bevy_render/tga" ];
          "tonemapping_luts" = [ "bevy_core_pipeline/tonemapping_luts" ];
          "trace" = [ "bevy_app/trace" "bevy_asset?/trace" "bevy_core_pipeline?/trace" "bevy_ecs/trace" "bevy_log/trace" "bevy_pbr?/trace" "bevy_render?/trace" "bevy_hierarchy/trace" "bevy_winit?/trace" ];
          "trace_chrome" = [ "bevy_log/tracing-chrome" ];
          "trace_tracy" = [ "bevy_render?/tracing-tracy" "bevy_log/tracing-tracy" ];
          "trace_tracy_memory" = [ "bevy_log/trace_tracy_memory" ];
          "vorbis" = [ "bevy_audio/vorbis" ];
          "wav" = [ "bevy_audio/wav" ];
          "wayland" = [ "bevy_winit/wayland" ];
          "webgl" = [ "bevy_core_pipeline?/webgl" "bevy_pbr?/webgl" "bevy_render?/webgl" "bevy_gizmos?/webgl" "bevy_sprite?/webgl" ];
          "webgpu" = [ "bevy_core_pipeline?/webgpu" "bevy_pbr?/webgpu" "bevy_render?/webgpu" "bevy_gizmos?/webgpu" "bevy_sprite?/webgpu" ];
          "webp" = [ "bevy_render/webp" ];
          "wgpu_trace" = [ "bevy_render/wgpu_trace" ];
          "x11" = [ "bevy_winit/x11" ];
          "zlib" = [ "bevy_render/zlib" ];
          "zstd" = [ "bevy_render/zstd" ];
        };
        resolvedDefaultFeatures = [ "accesskit_unix" "android_shared_stdcxx" "animation" "asset_processor" "async-io" "basis-universal" "bevy_animation" "bevy_asset" "bevy_audio" "bevy_ci_testing" "bevy_color" "bevy_core_pipeline" "bevy_debug_stepping" "bevy_dev_tools" "bevy_dynamic_plugin" "bevy_gilrs" "bevy_gizmos" "bevy_gltf" "bevy_pbr" "bevy_render" "bevy_scene" "bevy_sprite" "bevy_text" "bevy_ui" "bevy_winit" "bmp" "dds" "debug_glam_assert" "default_font" "detailed_trace" "dynamic_linking" "embedded_watcher" "exr" "file_watcher" "flac" "glam_assert" "hdr" "ios_simulator" "jpeg" "ktx2" "meshlet" "meshlet_processor" "minimp3" "mp3" "multi_threaded" "pbr_multi_layer_material_textures" "pbr_transmission_textures" "png" "pnm" "serialize" "shader_format_glsl" "shader_format_spirv" "subpixel_glyph_atlas" "symphonia-aac" "symphonia-all" "symphonia-flac" "symphonia-isomp4" "symphonia-vorbis" "symphonia-wav" "sysinfo_plugin" "tga" "tonemapping_luts" "trace" "trace_chrome" "trace_tracy" "trace_tracy_memory" "vorbis" "wav" "wayland" "webgl" "webgpu" "webp" "wgpu_trace" "x11" "zlib" "zstd" ];
      };
      "bevy_log" = rec {
        crateName = "bevy_log";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_log; }
          else ./crates/bevy_log;
        dependencies = [
          {
            name = "android_log-sys";
            packageId = "android_log-sys";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "tracing-chrome";
            packageId = "tracing-chrome";
            optional = true;
          }
          {
            name = "tracing-error";
            packageId = "tracing-error";
            optional = true;
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            features = [ "registry" "env-filter" ];
          }
          {
            name = "tracing-tracy";
            packageId = "tracing-tracy";
            optional = true;
          }
          {
            name = "tracing-wasm";
            packageId = "tracing-wasm";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "tracy-client";
            packageId = "tracy-client";
            optional = true;
          }
        ];
        features = {
          "trace" = [ "tracing-error" ];
          "trace_tracy_memory" = [ "dep:tracy-client" ];
          "tracing-chrome" = [ "dep:tracing-chrome" ];
          "tracing-error" = [ "dep:tracing-error" ];
          "tracing-tracy" = [ "dep:tracing-tracy" ];
        };
        resolvedDefaultFeatures = [ "trace" "trace_tracy_memory" "tracing-chrome" "tracing-error" "tracing-tracy" ];
      };
      "bevy_macro_utils" = rec {
        crateName = "bevy_macro_utils";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_macro_utils; }
          else ./crates/bevy_macro_utils;
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.22.12";
            usesDefaultFeatures = false;
            features = [ "parse" ];
          }
        ];

      };
      "bevy_math" = rec {
        crateName = "bevy_math";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_math; }
          else ./crates/bevy_math;
        dependencies = [
          {
            name = "approx";
            packageId = "approx";
            optional = true;
          }
          {
            name = "glam";
            packageId = "glam";
            features = [ "bytemuck" ];
          }
          {
            name = "libm";
            packageId = "libm";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        devDependencies = [
          {
            name = "approx";
            packageId = "approx";
          }
          {
            name = "bevy_math";
            packageId = "bevy_math";
            features = [ "approx" ];
          }
          {
            name = "rand";
            packageId = "rand";
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha";
          }
        ];
        features = {
          "approx" = [ "dep:approx" "glam/approx" ];
          "debug_glam_assert" = [ "glam/debug-glam-assert" ];
          "default" = [ "rand" ];
          "glam_assert" = [ "glam/glam-assert" ];
          "libm" = [ "dep:libm" "glam/libm" ];
          "mint" = [ "glam/mint" ];
          "rand" = [ "dep:rand" "glam/rand" ];
          "serialize" = [ "dep:serde" "glam/serde" ];
        };
        resolvedDefaultFeatures = [ "approx" "debug_glam_assert" "default" "glam_assert" "libm" "mint" "rand" "serialize" ];
      };
      "bevy_mikktspace" = rec {
        crateName = "bevy_mikktspace";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_mikktspace; }
          else ./crates/bevy_mikktspace;
        authors = [
          "Benjamin Wasty <benny.wasty@gmail.com>"
          "David Harvey-Macaulay <alteous@outlook.com>"
          "Layl Bongers <LaylConway@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "glam";
            packageId = "glam";
          }
        ];

      };
      "bevy_mobile_example" = rec {
        crateName = "bevy_mobile_example";
        version = "0.0.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./examples/mobile; }
          else ./examples/mobile;type = [ "staticlib" "cdylib" ];
        dependencies = [
          {
            name = "bevy";
            packageId = "bevy";
          }
          {
            name = "bevy";
            packageId = "bevy";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-apple-ios-sim");
            features = [ "ios_simulator" ];
          }
        ];

      };
      "bevy_pbr" = rec {
        crateName = "bevy_pbr";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_pbr; }
          else ./crates/bevy_pbr;
        dependencies = [
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_asset";
            packageId = "bevy_asset";
          }
          {
            name = "bevy_color";
            packageId = "bevy_color";
          }
          {
            name = "bevy_core_pipeline";
            packageId = "bevy_core_pipeline";
          }
          {
            name = "bevy_derive";
            packageId = "bevy_derive";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
          }
          {
            name = "bevy_math";
            packageId = "bevy_math";
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
            features = [ "bevy" ];
          }
          {
            name = "bevy_render";
            packageId = "bevy_render";
          }
          {
            name = "bevy_transform";
            packageId = "bevy_transform";
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "bevy_window";
            packageId = "bevy_window";
          }
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" "must_cast" ];
          }
          {
            name = "fixedbitset";
            packageId = "fixedbitset 0.5.7";
          }
          {
            name = "itertools";
            packageId = "itertools";
            optional = true;
          }
          {
            name = "lz4_flex";
            packageId = "lz4_flex";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "frame" ];
          }
          {
            name = "meshopt";
            packageId = "meshopt";
            optional = true;
          }
          {
            name = "metis";
            packageId = "metis";
            optional = true;
          }
          {
            name = "nonmax";
            packageId = "nonmax";
          }
          {
            name = "radsort";
            packageId = "radsort";
          }
          {
            name = "range-alloc";
            packageId = "range-alloc";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" "rc" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
            optional = true;
          }
        ];
        features = {
          "ios_simulator" = [ "bevy_render/ios_simulator" ];
          "meshlet" = [ "dep:lz4_flex" "dep:serde" "dep:bincode" "dep:thiserror" "dep:range-alloc" ];
          "meshlet_processor" = [ "meshlet" "dep:meshopt" "dep:metis" "dep:itertools" ];
          "shader_format_glsl" = [ "bevy_render/shader_format_glsl" ];
          "trace" = [ "bevy_render/trace" ];
        };
        resolvedDefaultFeatures = [ "ios_simulator" "meshlet" "meshlet_processor" "pbr_multi_layer_material_textures" "pbr_transmission_textures" "shader_format_glsl" "trace" "webgl" "webgpu" ];
      };
      "bevy_ptr" = rec {
        crateName = "bevy_ptr";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_ptr; }
          else ./crates/bevy_ptr;

      };
      "bevy_reflect" = rec {
        crateName = "bevy_reflect";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_reflect; }
          else ./crates/bevy_reflect;
        dependencies = [
          {
            name = "bevy_math";
            packageId = "bevy_math";
            optional = true;
            features = [ "serialize" ];
          }
          {
            name = "bevy_ptr";
            packageId = "bevy_ptr";
          }
          {
            name = "bevy_reflect_derive";
            packageId = "bevy_reflect_derive";
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "downcast-rs";
            packageId = "downcast-rs";
          }
          {
            name = "erased-serde";
            packageId = "erased-serde";
          }
          {
            name = "glam";
            packageId = "glam";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "petgraph";
            packageId = "petgraph";
            optional = true;
            features = [ "serde-1" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
          }
          {
            name = "smol_str";
            packageId = "smol_str";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "uuid";
            packageId = "uuid";
            optional = true;
            features = [ "v4" "serde" ];
          }
        ];
        devDependencies = [
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "rmp-serde";
            packageId = "rmp-serde";
          }
          {
            name = "ron";
            packageId = "ron";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "bevy" = [ "smallvec" "bevy_math" "smol_str" ];
          "bevy_math" = [ "glam" "dep:bevy_math" ];
          "default" = [ "smallvec" ];
          "documentation" = [ "bevy_reflect_derive/documentation" ];
          "glam" = [ "dep:glam" ];
          "petgraph" = [ "dep:petgraph" ];
          "smallvec" = [ "dep:smallvec" ];
          "smol_str" = [ "dep:smol_str" ];
          "uuid" = [ "dep:uuid" ];
        };
        resolvedDefaultFeatures = [ "bevy" "bevy_math" "default" "documentation" "glam" "petgraph" "smallvec" "smol_str" "uuid" ];
      };
      "bevy_reflect_derive" = rec {
        crateName = "bevy_reflect_derive";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_reflect/derive; }
          else ./crates/bevy_reflect/derive;
        procMacro = true;
        dependencies = [
          {
            name = "bevy_macro_utils";
            packageId = "bevy_macro_utils";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
            features = [ "full" ];
          }
          {
            name = "uuid";
            packageId = "uuid";
            features = [ "v4" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" "documentation" ];
      };
      "bevy_render" = rec {
        crateName = "bevy_render";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_render; }
          else ./crates/bevy_render;
        dependencies = [
          {
            name = "async-channel";
            packageId = "async-channel";
          }
          {
            name = "basis-universal";
            packageId = "basis-universal";
            optional = true;
          }
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_asset";
            packageId = "bevy_asset";
          }
          {
            name = "bevy_color";
            packageId = "bevy_color";
            features = [ "serialize" "wgpu-types" ];
          }
          {
            name = "bevy_core";
            packageId = "bevy_core";
          }
          {
            name = "bevy_derive";
            packageId = "bevy_derive";
          }
          {
            name = "bevy_diagnostic";
            packageId = "bevy_diagnostic";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
          }
          {
            name = "bevy_encase_derive";
            packageId = "bevy_encase_derive";
          }
          {
            name = "bevy_hierarchy";
            packageId = "bevy_hierarchy";
          }
          {
            name = "bevy_math";
            packageId = "bevy_math";
          }
          {
            name = "bevy_mikktspace";
            packageId = "bevy_mikktspace";
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
            features = [ "bevy" ];
          }
          {
            name = "bevy_render_macros";
            packageId = "bevy_render_macros";
          }
          {
            name = "bevy_tasks";
            packageId = "bevy_tasks";
          }
          {
            name = "bevy_time";
            packageId = "bevy_time";
          }
          {
            name = "bevy_transform";
            packageId = "bevy_transform";
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "bevy_window";
            packageId = "bevy_window";
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
            features = [ "serde" ];
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" "must_cast" ];
          }
          {
            name = "codespan-reporting";
            packageId = "codespan-reporting";
          }
          {
            name = "ddsfile";
            packageId = "ddsfile";
            optional = true;
          }
          {
            name = "downcast-rs";
            packageId = "downcast-rs";
          }
          {
            name = "encase";
            packageId = "encase";
            features = [ "glam" ];
          }
          {
            name = "flate2";
            packageId = "flate2";
            optional = true;
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 2.3.0";
          }
          {
            name = "hexasphere";
            packageId = "hexasphere";
          }
          {
            name = "image";
            packageId = "image";
            usesDefaultFeatures = false;
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "ktx2";
            packageId = "ktx2";
            optional = true;
          }
          {
            name = "naga";
            packageId = "naga";
            features = [ "wgsl-in" ];
          }
          {
            name = "naga_oil";
            packageId = "naga_oil";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "test_shader" ];
          }
          {
            name = "naga_oil";
            packageId = "naga_oil";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "nonmax";
            packageId = "nonmax";
          }
          {
            name = "profiling";
            packageId = "profiling";
            optional = true;
            features = [ "profile-with-tracing" ];
          }
          {
            name = "ruzstd";
            packageId = "ruzstd";
            optional = true;
          }
          {
            name = "send_wrapper";
            packageId = "send_wrapper";
            target = { target, features }: (("wasm32" == target."arch" or null) && (builtins.elem "atomics" targetFeatures));
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "Blob" "Document" "Element" "HtmlElement" "Node" "Url" "Window" ];
          }
          {
            name = "wgpu";
            packageId = "wgpu";
            usesDefaultFeatures = false;
            features = [ "wgsl" "dx12" "metal" "naga" "naga-ir" "fragile-send-sync-non-atomic-wasm" ];
          }
        ];
        features = {
          "basis-universal" = [ "dep:basis-universal" ];
          "bmp" = [ "image/bmp" ];
          "dds" = [ "ddsfile" ];
          "ddsfile" = [ "dep:ddsfile" ];
          "exr" = [ "image/exr" ];
          "flate2" = [ "dep:flate2" ];
          "hdr" = [ "image/hdr" ];
          "jpeg" = [ "image/jpeg" ];
          "ktx2" = [ "dep:ktx2" ];
          "multi_threaded" = [ "bevy_tasks/multi_threaded" ];
          "png" = [ "image/png" ];
          "pnm" = [ "image/pnm" ];
          "profiling" = [ "dep:profiling" ];
          "ruzstd" = [ "dep:ruzstd" ];
          "shader_format_glsl" = [ "naga/glsl-in" "naga/wgsl-out" "naga_oil/glsl" ];
          "shader_format_spirv" = [ "wgpu/spirv" "naga/spv-in" "naga/spv-out" ];
          "tga" = [ "image/tga" ];
          "trace" = [ "profiling" ];
          "webgl" = [ "wgpu/webgl" ];
          "webgpu" = [ "wgpu/webgpu" ];
          "webp" = [ "image/webp" ];
          "wgpu_trace" = [ "wgpu/trace" ];
          "zlib" = [ "flate2" ];
          "zstd" = [ "ruzstd" ];
        };
        resolvedDefaultFeatures = [ "basis-universal" "bmp" "ci_limits" "dds" "ddsfile" "exr" "flate2" "hdr" "ios_simulator" "jpeg" "ktx2" "multi_threaded" "png" "pnm" "profiling" "ruzstd" "shader_format_glsl" "shader_format_spirv" "tga" "trace" "tracing-tracy" "webgl" "webgpu" "webp" "wgpu_trace" "zlib" "zstd" ];
      };
      "bevy_render_macros" = rec {
        crateName = "bevy_render_macros";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_render/macros; }
          else ./crates/bevy_render/macros;
        procMacro = true;
        dependencies = [
          {
            name = "bevy_macro_utils";
            packageId = "bevy_macro_utils";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
          }
        ];

      };
      "bevy_scene" = rec {
        crateName = "bevy_scene";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_scene; }
          else ./crates/bevy_scene;
        dependencies = [
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_asset";
            packageId = "bevy_asset";
          }
          {
            name = "bevy_derive";
            packageId = "bevy_derive";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
          }
          {
            name = "bevy_hierarchy";
            packageId = "bevy_hierarchy";
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
            features = [ "bevy" ];
          }
          {
            name = "bevy_render";
            packageId = "bevy_render";
            optional = true;
          }
          {
            name = "bevy_transform";
            packageId = "bevy_transform";
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "uuid";
            packageId = "uuid";
            features = [ "v4" ];
          }
        ];
        devDependencies = [
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "postcard";
            packageId = "postcard";
            features = [ "alloc" ];
          }
          {
            name = "rmp-serde";
            packageId = "rmp-serde";
          }
        ];
        features = {
          "bevy_render" = [ "dep:bevy_render" ];
          "default" = [ "serialize" ];
          "serialize" = [ "dep:serde" "uuid/serde" "bevy_app/serialize" ];
        };
        resolvedDefaultFeatures = [ "bevy_render" "default" "serialize" ];
      };
      "bevy_sprite" = rec {
        crateName = "bevy_sprite";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_sprite; }
          else ./crates/bevy_sprite;
        dependencies = [
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_asset";
            packageId = "bevy_asset";
          }
          {
            name = "bevy_color";
            packageId = "bevy_color";
          }
          {
            name = "bevy_core_pipeline";
            packageId = "bevy_core_pipeline";
          }
          {
            name = "bevy_derive";
            packageId = "bevy_derive";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
          }
          {
            name = "bevy_math";
            packageId = "bevy_math";
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
            features = [ "bevy" ];
          }
          {
            name = "bevy_render";
            packageId = "bevy_render";
          }
          {
            name = "bevy_transform";
            packageId = "bevy_transform";
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
          {
            name = "fixedbitset";
            packageId = "fixedbitset 0.5.7";
          }
          {
            name = "guillotiere";
            packageId = "guillotiere";
          }
          {
            name = "radsort";
            packageId = "radsort";
          }
          {
            name = "rectangle-pack";
            packageId = "rectangle-pack";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "webgl" "webgpu" ];
      };
      "bevy_tasks" = rec {
        crateName = "bevy_tasks";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_tasks; }
          else ./crates/bevy_tasks;
        dependencies = [
          {
            name = "async-channel";
            packageId = "async-channel";
            optional = true;
          }
          {
            name = "async-executor";
            packageId = "async-executor";
          }
          {
            name = "async-io";
            packageId = "async-io 2.3.2";
            optional = true;
          }
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            optional = true;
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 2.3.0";
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        devDependencies = [
          {
            name = "web-time";
            packageId = "web-time";
          }
        ];
        features = {
          "async-io" = [ "dep:async-io" ];
          "multi_threaded" = [ "dep:async-channel" "dep:concurrent-queue" ];
        };
        resolvedDefaultFeatures = [ "async-io" "multi_threaded" ];
      };
      "bevy_text" = rec {
        crateName = "bevy_text";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_text; }
          else ./crates/bevy_text;
        dependencies = [
          {
            name = "ab_glyph";
            packageId = "ab_glyph";
          }
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_asset";
            packageId = "bevy_asset";
          }
          {
            name = "bevy_color";
            packageId = "bevy_color";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
          }
          {
            name = "bevy_math";
            packageId = "bevy_math";
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
            features = [ "bevy" ];
          }
          {
            name = "bevy_render";
            packageId = "bevy_render";
          }
          {
            name = "bevy_sprite";
            packageId = "bevy_sprite";
          }
          {
            name = "bevy_transform";
            packageId = "bevy_transform";
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "bevy_window";
            packageId = "bevy_window";
          }
          {
            name = "glyph_brush_layout";
            packageId = "glyph_brush_layout";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        devDependencies = [
          {
            name = "approx";
            packageId = "approx";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default_font" "subpixel_glyph_atlas" ];
      };
      "bevy_time" = rec {
        crateName = "bevy_time";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_time; }
          else ./crates/bevy_time;
        dependencies = [
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
            features = [ "bevy_reflect" ];
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
            features = [ "bevy" ];
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serialize" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "serialize" ];
      };
      "bevy_transform" = rec {
        crateName = "bevy_transform";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_transform; }
          else ./crates/bevy_transform;
        dependencies = [
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
            features = [ "bevy_reflect" ];
          }
          {
            name = "bevy_hierarchy";
            packageId = "bevy_hierarchy";
          }
          {
            name = "bevy_math";
            packageId = "bevy_math";
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
            features = [ "bevy" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        devDependencies = [
          {
            name = "approx";
            packageId = "approx";
          }
          {
            name = "bevy_math";
            packageId = "bevy_math";
            features = [ "approx" ];
          }
          {
            name = "bevy_tasks";
            packageId = "bevy_tasks";
          }
        ];
        features = {
          "serialize" = [ "dep:serde" "bevy_math/serialize" ];
        };
        resolvedDefaultFeatures = [ "serialize" ];
      };
      "bevy_ui" = rec {
        crateName = "bevy_ui";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_ui; }
          else ./crates/bevy_ui;
        dependencies = [
          {
            name = "bevy_a11y";
            packageId = "bevy_a11y";
          }
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_asset";
            packageId = "bevy_asset";
          }
          {
            name = "bevy_color";
            packageId = "bevy_color";
          }
          {
            name = "bevy_core_pipeline";
            packageId = "bevy_core_pipeline";
          }
          {
            name = "bevy_derive";
            packageId = "bevy_derive";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
          }
          {
            name = "bevy_hierarchy";
            packageId = "bevy_hierarchy";
          }
          {
            name = "bevy_input";
            packageId = "bevy_input";
          }
          {
            name = "bevy_math";
            packageId = "bevy_math";
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
            features = [ "bevy" ];
          }
          {
            name = "bevy_render";
            packageId = "bevy_render";
          }
          {
            name = "bevy_sprite";
            packageId = "bevy_sprite";
          }
          {
            name = "bevy_text";
            packageId = "bevy_text";
            optional = true;
          }
          {
            name = "bevy_transform";
            packageId = "bevy_transform";
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "bevy_window";
            packageId = "bevy_window";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
          {
            name = "nonmax";
            packageId = "nonmax";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "taffy";
            packageId = "taffy";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "bevy_text" = [ "dep:bevy_text" ];
          "serde" = [ "dep:serde" ];
          "serialize" = [ "serde" "smallvec/serde" ];
        };
        resolvedDefaultFeatures = [ "bevy_text" "serde" "serialize" ];
      };
      "bevy_utils" = rec {
        crateName = "bevy_utils";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_utils; }
          else ./crates/bevy_utils;
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
          }
          {
            name = "bevy_utils_proc_macros";
            packageId = "bevy_utils_proc_macros";
          }
          {
            name = "getrandom";
            packageId = "getrandom";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "js" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown";
            features = [ "serde" ];
          }
          {
            name = "thread_local";
            packageId = "thread_local";
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "web-time";
            packageId = "web-time";
          }
        ];
        devDependencies = [
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "detailed_trace" ];
      };
      "bevy_utils_proc_macros" = rec {
        crateName = "bevy_utils_proc_macros";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_utils/macros; }
          else ./crates/bevy_utils/macros;
        procMacro = true;
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
          }
        ];

      };
      "bevy_window" = rec {
        crateName = "bevy_window";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_window; }
          else ./crates/bevy_window;
        dependencies = [
          {
            name = "bevy_a11y";
            packageId = "bevy_a11y";
          }
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
          }
          {
            name = "bevy_math";
            packageId = "bevy_math";
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
            features = [ "glam" "smol_str" ];
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "smol_str";
            packageId = "smol_str";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serialize" = [ "serde" "smol_str/serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "serialize" ];
      };
      "bevy_winit" = rec {
        crateName = "bevy_winit";
        version = "0.14.0-dev";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/bevy_winit; }
          else ./crates/bevy_winit;
        dependencies = [
          {
            name = "accesskit_winit";
            packageId = "accesskit_winit";
            usesDefaultFeatures = false;
            features = [ "rwh_06" ];
          }
          {
            name = "approx";
            packageId = "approx";
            usesDefaultFeatures = false;
          }
          {
            name = "bevy_a11y";
            packageId = "bevy_a11y";
          }
          {
            name = "bevy_app";
            packageId = "bevy_app";
          }
          {
            name = "bevy_derive";
            packageId = "bevy_derive";
          }
          {
            name = "bevy_ecs";
            packageId = "bevy_ecs";
          }
          {
            name = "bevy_hierarchy";
            packageId = "bevy_hierarchy";
          }
          {
            name = "bevy_input";
            packageId = "bevy_input";
          }
          {
            name = "bevy_log";
            packageId = "bevy_log";
          }
          {
            name = "bevy_math";
            packageId = "bevy_math";
          }
          {
            name = "bevy_reflect";
            packageId = "bevy_reflect";
          }
          {
            name = "bevy_tasks";
            packageId = "bevy_tasks";
          }
          {
            name = "bevy_utils";
            packageId = "bevy_utils";
          }
          {
            name = "bevy_window";
            packageId = "bevy_window";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "winit";
            packageId = "winit";
            usesDefaultFeatures = false;
            features = [ "rwh_06" ];
          }
          {
            name = "winit";
            packageId = "winit";
            usesDefaultFeatures = false;
            target = { target, features }: ("android" == target."os" or null);
            features = [ "android-native-activity" "rwh_06" ];
          }
        ];
        features = {
          "accesskit_unix" = [ "accesskit_winit/accesskit_unix" "accesskit_winit/async-io" ];
          "serde" = [ "dep:serde" ];
          "serialize" = [ "serde" ];
          "wayland" = [ "winit/wayland" "winit/wayland-csd-adwaita" ];
          "x11" = [ "winit/x11" ];
        };
        resolvedDefaultFeatures = [ "accesskit_unix" "serde" "serialize" "trace" "wayland" "x11" ];
      };
      "bincode" = rec {
        crateName = "bincode";
        version = "1.3.3";
        edition = "2015";
        sha256 = "1bfw3mnwzx5g1465kiqllp5n4r10qrqy88kdlp3jfwnq2ya5xx5i";
        authors = [
          "Ty Overby <ty@pre-alpha.com>"
          "Francesco Mazzoli <f@mazzo.li>"
          "David Tolnay <dtolnay@gmail.com>"
          "Zoey Riordan <zoey@dos.cafe>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
        };
      };
      "bindgen" = rec {
        crateName = "bindgen";
        version = "0.69.4";
        edition = "2018";
        sha256 = "18194611hn3k1dkxlha7a52sr8vmfhl9blc54xhj08cahd8wh3d0";
        libPath = "lib.rs";
        authors = [
          "Jyun-Yan You <jyyou.tw@gmail.com>"
          "Emilio Cobos Álvarez <emilio@crisal.io>"
          "Nick Fitzgerald <fitzgen@gmail.com>"
          "The Servo project developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "cexpr";
            packageId = "cexpr";
          }
          {
            name = "clang-sys";
            packageId = "clang-sys";
            features = [ "clang_6_0" ];
          }
          {
            name = "itertools";
            packageId = "itertools";
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "lazycell";
            packageId = "lazycell";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" "unicode-perl" ];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash";
          }
          {
            name = "shlex";
            packageId = "shlex";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
            features = [ "full" "extra-traits" "visit-mut" ];
          }
        ];
        features = {
          "default" = [ "logging" "prettyplease" "runtime" "which-rustfmt" ];
          "experimental" = [ "dep:annotate-snippets" ];
          "logging" = [ "dep:log" ];
          "prettyplease" = [ "dep:prettyplease" ];
          "runtime" = [ "clang-sys/runtime" ];
          "static" = [ "clang-sys/static" ];
          "which-rustfmt" = [ "dep:which" ];
        };
        resolvedDefaultFeatures = [ "runtime" ];
      };
      "bit-set" = rec {
        crateName = "bit-set";
        version = "0.5.3";
        edition = "2015";
        sha256 = "1wcm9vxi00ma4rcxkl3pzzjli6ihrpn9cfdi0c5b4cvga2mxs007";
        authors = [
          "Alexis Beingessner <a.beingessner@gmail.com>"
        ];
        dependencies = [
          {
            name = "bit-vec";
            packageId = "bit-vec";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "bit-vec/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bit-vec" = rec {
        crateName = "bit-vec";
        version = "0.6.3";
        edition = "2015";
        sha256 = "1ywqjnv60cdh1slhz67psnp422md6jdliji6alq0gmly2xm9p7rl";
        authors = [
          "Alexis Beingessner <a.beingessner@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde_no_std" = [ "serde/alloc" ];
          "serde_std" = [ "std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bit_field" = rec {
        crateName = "bit_field";
        version = "0.10.2";
        edition = "2015";
        sha256 = "0qav5rpm4hqc33vmf4vc4r0mh51yjx5vmd9zhih26n9yjs3730nw";
        authors = [
          "Philipp Oppermann <dev@phil-opp.com>"
        ];

      };
      "bitflags 1.3.2" = rec {
        crateName = "bitflags";
        version = "1.3.2";
        edition = "2018";
        sha256 = "12ki6w8gn1ldq7yz9y680llwk5gmrhrzszaa17g1sbrw2r2qvwxy";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bitflags 2.5.0" = rec {
        crateName = "bitflags";
        version = "2.5.0";
        edition = "2021";
        sha256 = "1h91vdx1il069vdiiissj8ymzj130rbiic0dbs77yxjgjim9sjyg";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" "std" ];
      };
      "blake3" = rec {
        crateName = "blake3";
        version = "1.5.1";
        edition = "2021";
        sha256 = "0lpgw3gl564wqwf98v9jsa29lp6nv7w7nn1cvw6w75s5cz9sdk1h";
        authors = [
          "Jack O'Connor <oconnor663@gmail.com>"
          "Samuel Neves"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "default" = [ "std" ];
          "digest" = [ "dep:digest" ];
          "mmap" = [ "std" "dep:memmap2" ];
          "rayon" = [ "dep:rayon" "std" ];
          "serde" = [ "dep:serde" ];
          "traits-preview" = [ "digest" ];
          "zeroize" = [ "dep:zeroize" "arrayvec/zeroize" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "block" = rec {
        crateName = "block";
        version = "0.1.6";
        edition = "2015";
        sha256 = "16k9jgll25pzsq14f244q22cdv0zb4bqacldg3kx6h89d7piz30d";
        authors = [
          "Steven Sheldon"
        ];

      };
      "block-buffer" = rec {
        crateName = "block-buffer";
        version = "0.10.4";
        edition = "2018";
        sha256 = "0w9sa2ypmrsqqvc20nhwr75wbb5cjr4kkyhpjm1z1lv2kdicfy1h";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];

      };
      "block-sys 0.1.0-beta.1" = rec {
        crateName = "block-sys";
        version = "0.1.0-beta.1";
        edition = "2021";
        links = "block_0_1";
        sha256 = "0ihiar08hk0das4q0ii1gsmql975z3rslli1h13jb44hxr0mg98g";
        authors = [
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "objc-sys";
            packageId = "objc-sys 0.2.0-beta.2";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "objc-sys?/alloc" ];
          "default" = [ "std" "apple" ];
          "gnustep-1-7" = [ "objc-sys" "objc-sys/gnustep-1-7" ];
          "gnustep-1-8" = [ "objc-sys/gnustep-1-8" "gnustep-1-7" ];
          "gnustep-1-9" = [ "objc-sys/gnustep-1-9" "gnustep-1-8" ];
          "gnustep-2-0" = [ "objc-sys/gnustep-2-0" "gnustep-1-9" ];
          "gnustep-2-1" = [ "objc-sys/gnustep-2-1" "gnustep-2-0" ];
          "objc-sys" = [ "dep:objc-sys" ];
          "std" = [ "alloc" "objc-sys?/std" ];
          "unstable-docsrs" = [ "objc-sys" "objc-sys/unstable-docsrs" ];
          "unstable-winobjc" = [ "objc-sys/unstable-winobjc" "gnustep-1-8" ];
        };
        resolvedDefaultFeatures = [ "alloc" "apple" "std" ];
      };
      "block-sys 0.2.1" = rec {
        crateName = "block-sys";
        version = "0.2.1";
        edition = "2021";
        links = "block_0_2";
        sha256 = "1rzp0218mwigdmfd5rhmj5h7c1vp0bq0nxaklhsvi8vydrls11df";
        authors = [
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "objc-sys";
            packageId = "objc-sys 0.3.3";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "objc-sys?/alloc" ];
          "default" = [ "std" "apple" ];
          "gnustep-1-7" = [ "objc-sys" "objc-sys/gnustep-1-7" ];
          "gnustep-1-8" = [ "objc-sys/gnustep-1-8" "gnustep-1-7" ];
          "gnustep-1-9" = [ "objc-sys/gnustep-1-9" "gnustep-1-8" ];
          "gnustep-2-0" = [ "objc-sys/gnustep-2-0" "gnustep-1-9" ];
          "gnustep-2-1" = [ "objc-sys/gnustep-2-1" "gnustep-2-0" ];
          "objc-sys" = [ "dep:objc-sys" ];
          "std" = [ "alloc" "objc-sys?/std" ];
          "unstable-docsrs" = [ "objc-sys" "objc-sys/unstable-docsrs" ];
          "unstable-winobjc" = [ "objc-sys/unstable-winobjc" "gnustep-1-8" ];
        };
        resolvedDefaultFeatures = [ "alloc" "apple" "std" ];
      };
      "block2 0.2.0-alpha.6" = rec {
        crateName = "block2";
        version = "0.2.0-alpha.6";
        edition = "2021";
        sha256 = "0hpcdl81rmwvhfni9413hrg1wd4xwf6vhch3yv15bxs42wyfdncd";
        authors = [
          "Steven Sheldon"
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "block-sys";
            packageId = "block-sys 0.1.0-beta.1";
            usesDefaultFeatures = false;
          }
          {
            name = "objc2-encode";
            packageId = "objc2-encode 2.0.0-pre.2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "objc2-encode/alloc" "block-sys/alloc" ];
          "apple" = [ "block-sys/apple" "objc2-encode/apple" ];
          "compiler-rt" = [ "block-sys/compiler-rt" "objc2-encode/apple" ];
          "default" = [ "std" "apple" ];
          "gnustep-1-7" = [ "block-sys/gnustep-1-7" "objc2-encode/gnustep-1-7" ];
          "gnustep-1-8" = [ "gnustep-1-7" "block-sys/gnustep-1-8" "objc2-encode/gnustep-1-8" ];
          "gnustep-1-9" = [ "gnustep-1-8" "block-sys/gnustep-1-9" "objc2-encode/gnustep-1-9" ];
          "gnustep-2-0" = [ "gnustep-1-9" "block-sys/gnustep-2-0" "objc2-encode/gnustep-2-0" ];
          "gnustep-2-1" = [ "gnustep-2-0" "block-sys/gnustep-2-1" "objc2-encode/gnustep-2-1" ];
          "std" = [ "alloc" "objc2-encode/std" "block-sys/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "apple" "std" ];
      };
      "block2 0.3.0" = rec {
        crateName = "block2";
        version = "0.3.0";
        edition = "2021";
        sha256 = "0s2ywcis2xf9444vmdgzr7ankrrkpchn8zimaw950cszm1imdd8m";
        authors = [
          "Steven Sheldon"
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "block-sys";
            packageId = "block-sys 0.2.1";
            usesDefaultFeatures = false;
          }
          {
            name = "objc2";
            packageId = "objc2 0.4.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "objc2/alloc" "block-sys/alloc" ];
          "apple" = [ "block-sys/apple" "objc2/apple" ];
          "compiler-rt" = [ "block-sys/compiler-rt" "objc2/unstable-compiler-rt" ];
          "default" = [ "std" "apple" ];
          "gnustep-1-7" = [ "block-sys/gnustep-1-7" "objc2/gnustep-1-7" ];
          "gnustep-1-8" = [ "gnustep-1-7" "block-sys/gnustep-1-8" "objc2/gnustep-1-8" ];
          "gnustep-1-9" = [ "gnustep-1-8" "block-sys/gnustep-1-9" "objc2/gnustep-1-9" ];
          "gnustep-2-0" = [ "gnustep-1-9" "block-sys/gnustep-2-0" "objc2/gnustep-2-0" ];
          "gnustep-2-1" = [ "gnustep-2-0" "block-sys/gnustep-2-1" "objc2/gnustep-2-1" ];
          "std" = [ "alloc" "objc2/std" "block-sys/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "apple" "std" ];
      };
      "blocking" = rec {
        crateName = "blocking";
        version = "1.6.0";
        edition = "2021";
        sha256 = "123yf6slr47jnwnmhimkhgkx5rqzr9x28d7b19pkbdv2x4272ps9";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-channel";
            packageId = "async-channel";
          }
          {
            name = "async-lock";
            packageId = "async-lock 3.3.0";
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "async-task";
            packageId = "async-task";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 2.3.0";
            usesDefaultFeatures = false;
          }
          {
            name = "piper";
            packageId = "piper";
          }
        ];
        devDependencies = [
          {
            name = "futures-lite";
            packageId = "futures-lite 2.3.0";
          }
        ];
        features = {
          "tracing" = [ "dep:tracing" ];
        };
      };
      "bstr" = rec {
        crateName = "bstr";
        version = "1.9.1";
        edition = "2021";
        sha256 = "01ipr5rncw3kf4dyc1p2g00njn1df2b0xpviwhb8830iv77wbvq5";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "memchr/alloc" "serde?/alloc" ];
          "default" = [ "std" "unicode" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" "memchr/std" "serde?/std" ];
          "unicode" = [ "dep:regex-automata" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "build-templated-pages" = rec {
        crateName = "build-templated-pages";
        version = "0.0.0";
        edition = "2021";
        crateBin = [
          {
            name = "build-templated-pages";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./tools/build-templated-pages; }
          else ./tools/build-templated-pages;
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown";
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "tera";
            packageId = "tera";
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.22.12";
            usesDefaultFeatures = false;
            features = [ "parse" ];
          }
        ];

      };
      "build-wasm-example" = rec {
        crateName = "build-wasm-example";
        version = "0.0.0";
        edition = "2021";
        crateBin = [
          {
            name = "build-wasm-example";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./tools/build-wasm-example; }
          else ./tools/build-wasm-example;
        dependencies = [
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "xshell";
            packageId = "xshell";
          }
        ];

      };
      "bumpalo" = rec {
        crateName = "bumpalo";
        version = "3.16.0";
        edition = "2021";
        sha256 = "0b015qb4knwanbdlp1x48pkb4pm57b8gidbhhhxr900q2wb6fabr";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        features = {
          "allocator-api2" = [ "dep:allocator-api2" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bytemuck" = rec {
        crateName = "bytemuck";
        version = "1.15.0";
        edition = "2018";
        sha256 = "05gxh5i8vhjhr8b7abzla1k74m3khsifr439320s18rmfb2nhvax";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytemuck_derive";
            packageId = "bytemuck_derive";
            optional = true;
          }
        ];
        features = {
          "bytemuck_derive" = [ "dep:bytemuck_derive" ];
          "derive" = [ "bytemuck_derive" ];
          "extern_crate_std" = [ "extern_crate_alloc" ];
        };
        resolvedDefaultFeatures = [ "aarch64_simd" "bytemuck_derive" "derive" "extern_crate_alloc" "must_cast" ];
      };
      "bytemuck_derive" = rec {
        crateName = "bytemuck_derive";
        version = "1.6.0";
        edition = "2018";
        sha256 = "0q1gkhwdg8xaslanwa45cq8c6rw229l2k1iwz80p8cgd7wps7aad";
        procMacro = true;
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
          }
        ];

      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.5.0";
        edition = "2021";
        sha256 = "0jzncxyf404mwqdbspihyzpkndfgda450l0893pz5xj685cg5l0z";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "byteorder-lite" = rec {
        crateName = "byteorder-lite";
        version = "0.1.0";
        edition = "2021";
        sha256 = "15alafmz4b9az56z6x7glcbcb6a8bfgyd109qc3bvx07zx4fj7wg";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bytes" = rec {
        crateName = "bytes";
        version = "1.6.0";
        edition = "2018";
        sha256 = "1jf2awc1fywpk15m6pxay3wqcg65ararg9xi4b08vnszwiyy2kai";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "calloop" = rec {
        crateName = "calloop";
        version = "0.12.4";
        edition = "2018";
        sha256 = "162jk6j6qgqisyngkiay2qhzcj3i1q0260jiadaqxaasvnsav9zv";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "polling";
            packageId = "polling 3.7.0";
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.34";
            usesDefaultFeatures = false;
            features = [ "event" "fs" "pipe" "std" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        devDependencies = [
          {
            name = "rustix";
            packageId = "rustix 0.38.34";
            usesDefaultFeatures = false;
            features = [ "net" ];
          }
        ];
        features = {
          "async-task" = [ "dep:async-task" ];
          "block_on" = [ "pin-utils" ];
          "executor" = [ "async-task" ];
          "futures-io" = [ "dep:futures-io" ];
          "nix" = [ "dep:nix" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "signals" = [ "nix" ];
        };
      };
      "calloop-wayland-source" = rec {
        crateName = "calloop-wayland-source";
        version = "0.2.0";
        edition = "2021";
        sha256 = "00lgxlqnkd150ylfn3wi4464ibif1qwbp38shj1aszvc8ywsj3hg";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
        ];
        dependencies = [
          {
            name = "calloop";
            packageId = "calloop";
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.34";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
          }
        ];
        features = {
          "log" = [ "dep:log" ];
        };
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.0.97";
        edition = "2018";
        sha256 = "1d6rv3nk5q6lrr3mf7lifqpjr44slylsz3pw6pmn2k2cv1bm76h9";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "jobserver";
            packageId = "jobserver";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
        ];
        features = {
          "jobserver" = [ "dep:jobserver" ];
          "libc" = [ "dep:libc" ];
          "once_cell" = [ "dep:once_cell" ];
          "parallel" = [ "libc" "jobserver" "once_cell" ];
        };
        resolvedDefaultFeatures = [ "jobserver" "libc" "once_cell" "parallel" ];
      };
      "cesu8" = rec {
        crateName = "cesu8";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0g6q58wa7khxrxcxgnqyi9s1z2cjywwwd3hzr5c55wskhx6s0hvd";
        authors = [
          "Eric Kidd <git@randomhacks.net>"
        ];
        features = {
        };
      };
      "cexpr" = rec {
        crateName = "cexpr";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0rl77bwhs5p979ih4r0202cn5jrfsrbgrksp40lkfz5vk1x3ib3g";
        authors = [
          "Jethro Beekman <jethro@jbeekman.nl>"
        ];
        dependencies = [
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];

      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "1.0.0";
        edition = "2018";
        sha256 = "1za0vb97n4brpzpv8lsbnzmq5r8f2b0cpqqr0sy8h5bn751xxwds";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "cfg_aliases" = rec {
        crateName = "cfg_aliases";
        version = "0.1.1";
        edition = "2018";
        sha256 = "17p821nc6jm830vzl2lmwz60g3a30hcm33nk6l257i1rjdqw85px";
        authors = [
          "Zicklag <zicklag@katharostech.com>"
        ];

      };
      "chrono" = rec {
        crateName = "chrono";
        version = "0.4.38";
        edition = "2021";
        sha256 = "009l8vc5p8750vn02z30mblg4pv2qhkbfizhfwmzc6vpy5nr67x2";
        dependencies = [
          {
            name = "android-tzdata";
            packageId = "android-tzdata";
            optional = true;
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "iana-time-zone";
            packageId = "iana-time-zone";
            optional = true;
            target = { target, features }: (target."unix" or false);
            features = [ "fallback" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.5";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "android-tzdata" = [ "dep:android-tzdata" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "clock" = [ "winapi" "iana-time-zone" "android-tzdata" "now" ];
          "default" = [ "clock" "std" "oldtime" "wasmbind" ];
          "iana-time-zone" = [ "dep:iana-time-zone" ];
          "js-sys" = [ "dep:js-sys" ];
          "now" = [ "std" ];
          "pure-rust-locales" = [ "dep:pure-rust-locales" ];
          "rkyv" = [ "dep:rkyv" "rkyv/size_32" ];
          "rkyv-16" = [ "dep:rkyv" "rkyv?/size_16" ];
          "rkyv-32" = [ "dep:rkyv" "rkyv?/size_32" ];
          "rkyv-64" = [ "dep:rkyv" "rkyv?/size_64" ];
          "rkyv-validation" = [ "rkyv?/validation" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "unstable-locales" = [ "pure-rust-locales" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
          "wasmbind" = [ "wasm-bindgen" "js-sys" ];
          "winapi" = [ "windows-targets" ];
          "windows-targets" = [ "dep:windows-targets" ];
        };
        resolvedDefaultFeatures = [ "alloc" "android-tzdata" "clock" "iana-time-zone" "now" "std" "winapi" "windows-targets" ];
      };
      "chrono-tz" = rec {
        crateName = "chrono-tz";
        version = "0.8.6";
        edition = "2021";
        sha256 = "0vlksnmpb6rd4h55245agnfhphnpslwnq9al3aw3is43dd3f16nm";
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
          }
          {
            name = "phf";
            packageId = "phf";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "chrono-tz-build";
            packageId = "chrono-tz-build";
          }
        ];
        devDependencies = [
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "case-insensitive" = [ "dep:uncased" "chrono-tz-build/case-insensitive" "phf/uncased" ];
          "default" = [ "std" ];
          "filter-by-regex" = [ "chrono-tz-build/filter-by-regex" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "chrono-tz-build" = rec {
        crateName = "chrono-tz-build";
        version = "0.2.1";
        edition = "2021";
        sha256 = "03rmzd69cn7fp0fgkjr5042b3g54s2l941afjm3001ls7kqkjgj3";
        dependencies = [
          {
            name = "parse-zoneinfo";
            packageId = "parse-zoneinfo";
          }
          {
            name = "phf";
            packageId = "phf";
            usesDefaultFeatures = false;
          }
          {
            name = "phf_codegen";
            packageId = "phf_codegen";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "case-insensitive" = [ "uncased" "phf/uncased" ];
          "filter-by-regex" = [ "regex" ];
          "regex" = [ "dep:regex" ];
          "uncased" = [ "dep:uncased" ];
        };
      };
      "ci" = rec {
        crateName = "ci";
        version = "0.0.0";
        edition = "2021";
        crateBin = [
          {
            name = "ci";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./tools/ci; }
          else ./tools/ci;
        dependencies = [
          {
            name = "argh";
            packageId = "argh";
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "xshell";
            packageId = "xshell";
          }
        ];

      };
      "clang-sys" = rec {
        crateName = "clang-sys";
        version = "1.7.0";
        edition = "2015";
        links = "clang";
        sha256 = "1lb9ffil7bidvpsfg38wkkfj55946v82ia07ss4ikkp39cxkllk7";
        authors = [
          "Kyle Mayes <kyle@mayeses.com>"
        ];
        dependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "libloading";
            packageId = "libloading 0.8.3";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
        ];
        devDependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
        ];
        features = {
          "clang_10_0" = [ "clang_9_0" ];
          "clang_11_0" = [ "clang_10_0" ];
          "clang_12_0" = [ "clang_11_0" ];
          "clang_13_0" = [ "clang_12_0" ];
          "clang_14_0" = [ "clang_13_0" ];
          "clang_15_0" = [ "clang_14_0" ];
          "clang_16_0" = [ "clang_15_0" ];
          "clang_17_0" = [ "clang_16_0" ];
          "clang_3_6" = [ "clang_3_5" ];
          "clang_3_7" = [ "clang_3_6" ];
          "clang_3_8" = [ "clang_3_7" ];
          "clang_3_9" = [ "clang_3_8" ];
          "clang_4_0" = [ "clang_3_9" ];
          "clang_5_0" = [ "clang_4_0" ];
          "clang_6_0" = [ "clang_5_0" ];
          "clang_7_0" = [ "clang_6_0" ];
          "clang_8_0" = [ "clang_7_0" ];
          "clang_9_0" = [ "clang_8_0" ];
          "libloading" = [ "dep:libloading" ];
          "runtime" = [ "libloading" ];
        };
        resolvedDefaultFeatures = [ "clang_3_5" "clang_3_6" "clang_3_7" "clang_3_8" "clang_3_9" "clang_4_0" "clang_5_0" "clang_6_0" "libloading" "runtime" ];
      };
      "clap" = rec {
        crateName = "clap";
        version = "4.5.4";
        edition = "2021";
        crateBin = [];
        sha256 = "1828wm9qws5gh2xnimnvmp2vria6d6hsxnqmhnm84dwjcxm0dg4h";
        dependencies = [
          {
            name = "clap_builder";
            packageId = "clap_builder";
            usesDefaultFeatures = false;
          }
          {
            name = "clap_derive";
            packageId = "clap_derive";
            optional = true;
          }
        ];
        features = {
          "cargo" = [ "clap_builder/cargo" ];
          "color" = [ "clap_builder/color" ];
          "debug" = [ "clap_builder/debug" "clap_derive?/debug" ];
          "default" = [ "std" "color" "help" "usage" "error-context" "suggestions" ];
          "deprecated" = [ "clap_builder/deprecated" "clap_derive?/deprecated" ];
          "derive" = [ "dep:clap_derive" ];
          "env" = [ "clap_builder/env" ];
          "error-context" = [ "clap_builder/error-context" ];
          "help" = [ "clap_builder/help" ];
          "std" = [ "clap_builder/std" ];
          "string" = [ "clap_builder/string" ];
          "suggestions" = [ "clap_builder/suggestions" ];
          "unicode" = [ "clap_builder/unicode" ];
          "unstable-doc" = [ "clap_builder/unstable-doc" "derive" ];
          "unstable-styles" = [ "clap_builder/unstable-styles" ];
          "unstable-v5" = [ "clap_builder/unstable-v5" "clap_derive?/unstable-v5" "deprecated" ];
          "usage" = [ "clap_builder/usage" ];
          "wrap_help" = [ "clap_builder/wrap_help" ];
        };
        resolvedDefaultFeatures = [ "color" "default" "derive" "error-context" "help" "std" "suggestions" "usage" ];
      };
      "clap_builder" = rec {
        crateName = "clap_builder";
        version = "4.5.2";
        edition = "2021";
        sha256 = "1d7p4hph4fyhaphkf0v5zv0kq4lz25a9jq2f901yrq3afqp9w4mf";
        dependencies = [
          {
            name = "anstream";
            packageId = "anstream";
            optional = true;
          }
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "clap_lex";
            packageId = "clap_lex";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
        ];
        features = {
          "color" = [ "dep:anstream" ];
          "debug" = [ "dep:backtrace" ];
          "default" = [ "std" "color" "help" "usage" "error-context" "suggestions" ];
          "std" = [ "anstyle/std" ];
          "suggestions" = [ "dep:strsim" "error-context" ];
          "unicode" = [ "dep:unicode-width" "dep:unicase" ];
          "unstable-doc" = [ "cargo" "wrap_help" "env" "unicode" "string" ];
          "unstable-styles" = [ "color" ];
          "unstable-v5" = [ "deprecated" ];
          "wrap_help" = [ "help" "dep:terminal_size" ];
        };
        resolvedDefaultFeatures = [ "color" "error-context" "help" "std" "suggestions" "usage" ];
      };
      "clap_derive" = rec {
        crateName = "clap_derive";
        version = "4.5.4";
        edition = "2021";
        sha256 = "0r2gs2p10pb435w52xzsgz2mmx5qd3qfkmk29y4mbz9ph11k30aj";
        procMacro = true;
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
            features = [ "full" ];
          }
        ];
        features = {
          "raw-deprecated" = [ "deprecated" ];
          "unstable-v5" = [ "deprecated" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "clap_lex" = rec {
        crateName = "clap_lex";
        version = "0.7.0";
        edition = "2021";
        sha256 = "1kh1sckgq71kay2rrr149pl9gbsrvyccsq6xm5xpnq0cxnyqzk4q";

      };
      "claxon" = rec {
        crateName = "claxon";
        version = "0.4.3";
        edition = "2015";
        sha256 = "1206mxvw833ysg10029apcsjjwly8zmsvksgza5cm7ma4ikzbysb";
        authors = [
          "Ruud van Asseldonk <dev@veniogames.com>"
        ];

      };
      "cobs" = rec {
        crateName = "cobs";
        version = "0.2.3";
        edition = "2018";
        sha256 = "05gd16mws4yd63h8jr3p08in8y8w21rpjp5jb55hzl9bgalh5fk7";
        authors = [
          "Allen Welkie <>"
          "James Munns <james.munns@ferrous-systems.com>"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "codespan-reporting" = rec {
        crateName = "codespan-reporting";
        version = "0.11.1";
        edition = "2018";
        sha256 = "0vkfay0aqk73d33kh79k1kqxx06ka22894xhqi89crnc6c6jff1m";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
        ];
        dependencies = [
          {
            name = "termcolor";
            packageId = "termcolor";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serialization" = [ "serde" "serde/rc" ];
        };
      };
      "colorchoice" = rec {
        crateName = "colorchoice";
        version = "1.0.1";
        edition = "2021";
        sha256 = "08h4jsrd2j5k6lp1b9v5p1f1g7cmyzm4djsvb3ydywdb4hmqashb";

      };
      "com" = rec {
        crateName = "com";
        version = "0.6.0";
        edition = "2018";
        sha256 = "1xnryd43mqdyq66qlnagwxrcs9iyr0kcbw9f3ddvclvks5zqh5vy";
        authors = [
          "Microsoft Corp."
        ];
        dependencies = [
          {
            name = "com_macros";
            packageId = "com_macros";
          }
        ];
        features = {
          "default" = [ "std" ];
          "production" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "production" "std" ];
      };
      "com_macros" = rec {
        crateName = "com_macros";
        version = "0.6.0";
        edition = "2018";
        sha256 = "198k9fqd9rnpv3x6pxav6g636gl6m30iyqx63r4cfs56h0sqhxfk";
        procMacro = true;
        authors = [
          "Microsoft Corp."
        ];
        dependencies = [
          {
            name = "com_macros_support";
            packageId = "com_macros_support";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];

      };
      "com_macros_support" = rec {
        crateName = "com_macros_support";
        version = "0.6.0";
        edition = "2018";
        sha256 = "033ix2k6j0930b0gpm77r2zc2d4f5fvpqbbr8ib6sad9hw89m2dd";
        authors = [
          "Microsoft Corp."
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "extra-traits" ];
          }
        ];

      };
      "combine" = rec {
        crateName = "combine";
        version = "4.6.7";
        edition = "2018";
        sha256 = "1z8rh8wp59gf8k23ar010phgs0wgf5i8cx4fg01gwcnzfn5k0nms";
        authors = [
          "Markus Westerlind <marwes91@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "bytes_05" = [ "dep:bytes_05" ];
          "default" = [ "std" ];
          "futures-03" = [ "pin-project" "std" "futures-core-03" "futures-io-03" "pin-project-lite" ];
          "futures-core-03" = [ "dep:futures-core-03" ];
          "futures-io-03" = [ "dep:futures-io-03" ];
          "pin-project" = [ "pin-project-lite" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "regex" = [ "dep:regex" ];
          "std" = [ "memchr/std" "bytes" "alloc" ];
          "tokio" = [ "tokio-dep" "tokio-util/io" "futures-core-03" "pin-project-lite" ];
          "tokio-02" = [ "pin-project" "std" "tokio-02-dep" "futures-core-03" "pin-project-lite" "bytes_05" ];
          "tokio-02-dep" = [ "dep:tokio-02-dep" ];
          "tokio-03" = [ "pin-project" "std" "tokio-03-dep" "futures-core-03" "pin-project-lite" ];
          "tokio-03-dep" = [ "dep:tokio-03-dep" ];
          "tokio-dep" = [ "dep:tokio-dep" ];
          "tokio-util" = [ "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bytes" "default" "std" ];
      };
      "concurrent-queue" = rec {
        crateName = "concurrent-queue";
        version = "2.5.0";
        edition = "2021";
        sha256 = "0wrr3mzq2ijdkxwndhf79k952cp4zkz35ray8hvsxl96xrx1k82c";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Taiki Endo <te316e89@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "dep:loom" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "console_error_panic_hook" = rec {
        crateName = "console_error_panic_hook";
        version = "0.1.7";
        edition = "2015";
        sha256 = "1g5v8s0ndycc10mdn6igy914k645pgpcl8vjpz6nvxkhyirynsm0";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];

      };
      "const-fnv1a-hash" = rec {
        crateName = "const-fnv1a-hash";
        version = "1.1.0";
        edition = "2018";
        sha256 = "1jicrrr85ckvy8scp4qmxj37r19ajjrichz3g6xbw4m842hkxc9j";

      };
      "const_panic" = rec {
        crateName = "const_panic";
        version = "0.2.8";
        edition = "2021";
        sha256 = "16w72mnzjqgwfhlq8cqm6xhd2n6lc1wan08987izv1pcxhwz4lb0";
        authors = [
          "rodrimati1992 <rodrimatt1985@gmail.com>"
        ];
        features = {
          "const_panic_proc_macros" = [ "dep:const_panic_proc_macros" ];
          "default" = [ "non_basic" ];
          "derive" = [ "const_panic_proc_macros" "non_basic" ];
          "non_basic" = [ "typewit" ];
          "typewit" = [ "dep:typewit" ];
        };
      };
      "const_soft_float" = rec {
        crateName = "const_soft_float";
        version = "0.1.4";
        edition = "2021";
        sha256 = "1zrxrj3qy75bzkq3f4w7bcpipksi5rhxpcwbwr9x8kpgcjm1rjl7";
        features = {
        };
        resolvedDefaultFeatures = [ "no_std" ];
      };
      "constant_time_eq" = rec {
        crateName = "constant_time_eq";
        version = "0.3.0";
        edition = "2021";
        sha256 = "1hl0y8frzlhpr58rh8rlg4bm53ax09ikj2i5fk7gpyphvhq4s57p";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
        features = {
        };
      };
      "constgebra" = rec {
        crateName = "constgebra";
        version = "0.1.4";
        edition = "2021";
        sha256 = "1g2gfszm0jlwmg7xfzch1fb5qxisi741023cmii8d9j9b2vgkap1";
        dependencies = [
          {
            name = "const_soft_float";
            packageId = "const_soft_float";
            features = [ "no_std" ];
          }
        ];

      };
      "core-foundation" = rec {
        crateName = "core-foundation";
        version = "0.9.4";
        edition = "2018";
        sha256 = "13zvbbj07yk3b61b8fhwfzhy35535a583irf23vlcg59j7h9bqci";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "chrono" = [ "dep:chrono" ];
          "default" = [ "link" ];
          "link" = [ "core-foundation-sys/link" ];
          "mac_os_10_7_support" = [ "core-foundation-sys/mac_os_10_7_support" ];
          "mac_os_10_8_features" = [ "core-foundation-sys/mac_os_10_8_features" ];
          "uuid" = [ "dep:uuid" ];
          "with-chrono" = [ "chrono" ];
          "with-uuid" = [ "uuid" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "core-foundation-sys" = rec {
        crateName = "core-foundation-sys";
        version = "0.8.6";
        edition = "2018";
        sha256 = "13w6sdf06r0hn7bx2b45zxsg1mm2phz34jikm6xc5qrbr6djpsh6";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = [ "link" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "core-graphics" = rec {
        crateName = "core-graphics";
        version = "0.23.2";
        edition = "2018";
        sha256 = "10dhv3gk4kmbzl14xxkrhhky4fdp8h6nzff6h0019qgr6nz84xy0";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
            usesDefaultFeatures = false;
          }
          {
            name = "core-graphics-types";
            packageId = "core-graphics-types";
            usesDefaultFeatures = false;
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = [ "link" ];
          "link" = [ "core-foundation/link" "core-graphics-types/link" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "core-graphics-types" = rec {
        crateName = "core-graphics-types";
        version = "0.1.3";
        edition = "2018";
        sha256 = "1bxg8nxc8fk4kxnqyanhf36wq0zrjr552c58qy6733zn2ihhwfa5";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = [ "link" ];
          "link" = [ "core-foundation/link" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "coreaudio-rs" = rec {
        crateName = "coreaudio-rs";
        version = "0.11.3";
        edition = "2018";
        sha256 = "1kmssby4rqhv2iq1a8zmaav5p3bl40qs0wah9zv65ikr5lbpf41j";
        libName = "coreaudio";
        authors = [
          "mitchmindtree <mitchell.nordine@gmail.com>"
          "yupferris <jake@fusetools.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "coreaudio-sys";
            packageId = "coreaudio-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "audio_toolbox" = [ "coreaudio-sys/audio_toolbox" ];
          "audio_unit" = [ "coreaudio-sys/audio_unit" ];
          "core_audio" = [ "coreaudio-sys/core_audio" ];
          "core_midi" = [ "coreaudio-sys/core_midi" ];
          "default" = [ "audio_toolbox" "audio_unit" "core_audio" "open_al" "core_midi" ];
          "open_al" = [ "coreaudio-sys/open_al" ];
        };
        resolvedDefaultFeatures = [ "audio_toolbox" "audio_unit" "core_audio" ];
      };
      "coreaudio-sys" = rec {
        crateName = "coreaudio-sys";
        version = "0.2.15";
        edition = "2015";
        sha256 = "1agmf1idf5m08rgkvsdxqni985acmrs629xzlpqgazq54x85h0bz";
        authors = [
          "Mitchell Nordine <mitchell.nordine@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "bindgen";
            packageId = "bindgen";
            usesDefaultFeatures = false;
            features = [ "runtime" ];
          }
        ];
        features = {
          "default" = [ "audio_toolbox" "audio_unit" "core_audio" "audio_server_plugin" "open_al" "core_midi" ];
        };
        resolvedDefaultFeatures = [ "audio_toolbox" "audio_unit" "core_audio" ];
      };
      "cpal" = rec {
        crateName = "cpal";
        version = "0.15.3";
        edition = "2021";
        sha256 = "0yd7d51kcf8ml0bfkjrac12zgfjzk21wa97maxg0fhzpr03sngc7";
        dependencies = [
          {
            name = "alsa";
            packageId = "alsa";
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("netbsd" == target."os" or null));
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "coreaudio-rs";
            packageId = "coreaudio-rs";
            usesDefaultFeatures = false;
            target = { target, features }: ("ios" == target."os" or null);
            features = [ "audio_unit" "core_audio" "audio_toolbox" ];
          }
          {
            name = "coreaudio-rs";
            packageId = "coreaudio-rs";
            usesDefaultFeatures = false;
            target = { target, features }: ("macos" == target."os" or null);
            features = [ "audio_unit" "core_audio" ];
          }
          {
            name = "dasp_sample";
            packageId = "dasp_sample";
          }
          {
            name = "jni";
            packageId = "jni";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("emscripten" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("netbsd" == target."os" or null));
          }
          {
            name = "mach2";
            packageId = "mach2";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "ndk";
            packageId = "ndk";
            usesDefaultFeatures = false;
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "ndk-context";
            packageId = "ndk-context";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "oboe";
            packageId = "oboe";
            target = { target, features }: ("android" == target."os" or null);
            features = [ "java-interface" ];
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("emscripten" == target."os" or null);
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: ("emscripten" == target."os" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
            features = [ "AudioContext" "AudioContextOptions" "AudioBuffer" "AudioBufferSourceNode" "AudioNode" "AudioDestinationNode" "Window" "AudioContextState" ];
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("emscripten" == target."os" or null);
            features = [ "AudioContext" "AudioContextOptions" "AudioBuffer" "AudioBufferSourceNode" "AudioNode" "AudioDestinationNode" "Window" "AudioContextState" ];
          }
          {
            name = "windows";
            packageId = "windows 0.54.0";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "Win32_Media_Audio" "Win32_Foundation" "Win32_Devices_Properties" "Win32_Media_KernelStreaming" "Win32_System_Com_StructuredStorage" "Win32_System_Threading" "Win32_Security" "Win32_System_SystemServices" "Win32_System_Variant" "Win32_Media_Multimedia" "Win32_UI_Shell_PropertiesSystem" ];
          }
        ];
        features = {
          "asio" = [ "asio-sys" "num-traits" ];
          "asio-sys" = [ "dep:asio-sys" ];
          "jack" = [ "dep:jack" ];
          "num-traits" = [ "dep:num-traits" ];
          "oboe-shared-stdcxx" = [ "oboe/shared-stdcxx" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "oboe-shared-stdcxx" "wasm-bindgen" ];
      };
      "cpufeatures" = rec {
        crateName = "cpufeatures";
        version = "0.2.12";
        edition = "2018";
        sha256 = "012m7rrak4girqlii3jnqwrr73gv1i980q4wra5yyyhvzwk5xzjk";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-linux-android");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("apple" == target."vendor" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (("loongarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
        ];

      };
      "crc32fast" = rec {
        crateName = "crc32fast";
        version = "1.4.0";
        edition = "2015";
        sha256 = "1ahy259ypc955l5ak24hdlgllb6vm6y2pvwr6qrlyisbg255m1dk";
        authors = [
          "Sam Rijs <srijs@airpost.net>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "critical-section" = rec {
        crateName = "critical-section";
        version = "1.1.2";
        edition = "2018";
        sha256 = "05pj0pvkdyc9r30xxabam4n8zxdbzxcddr0gdypajcbqjgwgynbh";
        features = {
          "std" = [ "restore-state-bool" ];
        };
      };
      "crossbeam-channel" = rec {
        crateName = "crossbeam-channel";
        version = "0.5.12";
        edition = "2021";
        sha256 = "159gp30clv2ci3r473659ii04pjznspb3g9gwkhj2lavkhmb0gdb";
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-deque" = rec {
        crateName = "crossbeam-deque";
        version = "0.8.5";
        edition = "2021";
        sha256 = "03bp38ljx4wj6vvy4fbhx41q8f585zyqix6pncz1mkz93z08qgv1";
        dependencies = [
          {
            name = "crossbeam-epoch";
            packageId = "crossbeam-epoch";
            usesDefaultFeatures = false;
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "crossbeam-epoch/std" "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-epoch" = rec {
        crateName = "crossbeam-epoch";
        version = "0.9.18";
        edition = "2021";
        sha256 = "03j2np8llwf376m3fxqx859mgp9f83hj1w34153c7a9c7i5ar0jv";
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "loom-crate" "crossbeam-utils/loom" ];
          "loom-crate" = [ "dep:loom-crate" ];
          "nightly" = [ "crossbeam-utils/nightly" ];
          "std" = [ "alloc" "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "crossbeam-utils" = rec {
        crateName = "crossbeam-utils";
        version = "0.8.19";
        edition = "2021";
        sha256 = "0iakrb1b8fjqrag7wphl94d10irhbh2fw1g444xslsywqyn3p3i4";
        features = {
          "default" = [ "std" ];
          "loom" = [ "dep:loom" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crunchy" = rec {
        crateName = "crunchy";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1dx9mypwd5mpfbbajm78xcrg5lirqk7934ik980mmaffg3hdm0bs";
        authors = [
          "Vurich <jackefransham@hotmail.co.uk>"
        ];
        features = {
          "default" = [ "limit_128" ];
        };
        resolvedDefaultFeatures = [ "default" "limit_128" ];
      };
      "crypto-common" = rec {
        crateName = "crypto-common";
        version = "0.1.6";
        edition = "2018";
        sha256 = "1cvby95a6xg7kxdz5ln3rl9xh66nz66w46mm3g56ri1z5x815yqv";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
            features = [ "more_lengths" ];
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "getrandom" = [ "rand_core/getrandom" ];
          "rand_core" = [ "dep:rand_core" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "cursor-icon" = rec {
        crateName = "cursor-icon";
        version = "1.1.0";
        edition = "2021";
        sha256 = "14brf4vd6az9hnszwzqj7xyfaymqx9806d4i7xmwlaja3wjsr9ln";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "d3d12" = rec {
        crateName = "d3d12";
        version = "0.19.0";
        edition = "2018";
        sha256 = "01x322av5z761lrgcfzyxwfpwqznc5pihlmp4k5a340221zp8g9y";
        authors = [
          "gfx-rs developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libloading";
            packageId = "libloading 0.8.3";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "dxgi1_2" "dxgi1_3" "dxgi1_4" "dxgi1_5" "dxgi1_6" "dxgidebug" "d3d12" "d3d12sdklayers" "d3dcommon" "d3dcompiler" "dxgiformat" "synchapi" "winerror" ];
          }
        ];
        features = {
          "libloading" = [ "dep:libloading" ];
        };
        resolvedDefaultFeatures = [ "libloading" ];
      };
      "dasp_sample" = rec {
        crateName = "dasp_sample";
        version = "0.11.0";
        edition = "2018";
        sha256 = "0zzw35akm3qs2rixbmlijk6h0l4g9ry6g74qc59zv1q8vs1f31qc";
        authors = [
          "mitchmindtree <mitchell.nordine@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "data-encoding" = rec {
        crateName = "data-encoding";
        version = "2.6.0";
        edition = "2018";
        sha256 = "1qnn68n4vragxaxlkqcb1r28d3hhj43wch67lm4rpxlw89wnjmp8";
        authors = [
          "Julien Cretin <git@ia0.eu>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "ddsfile" = rec {
        crateName = "ddsfile";
        version = "0.5.2";
        edition = "2021";
        crateBin = [];
        sha256 = "1i36igx6mmrr8xs14b1z72l2vhy4kml6jyxcqsb9xaipcwggx7a7";
        authors = [
          "Mike Dilger <mike@optcomp.nz>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "enum-primitive-derive";
            packageId = "enum-primitive-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
        ];

      };
      "derivative" = rec {
        crateName = "derivative";
        version = "2.2.0";
        edition = "2015";
        sha256 = "02vpb81wisk2zh1d5f44szzxamzinqgq2k8ydrfjj2wwkrgdvhzw";
        procMacro = true;
        authors = [
          "mcarton <cartonmartin+git@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "visit" "extra-traits" ];
          }
        ];
        features = {
        };
      };
      "derive_more" = rec {
        crateName = "derive_more";
        version = "0.99.17";
        edition = "2018";
        sha256 = "0883jr0gdf9mi8rn7qbz1p0z7hqzfd275pil2gwm66bw1b9i1f2g";
        procMacro = true;
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];
        features = {
          "convert_case" = [ "dep:convert_case" ];
          "default" = [ "add_assign" "add" "as_mut" "as_ref" "constructor" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "iterator" "mul_assign" "mul" "not" "sum" "try_into" "is_variant" "unwrap" ];
          "display" = [ "syn/extra-traits" ];
          "error" = [ "syn/extra-traits" ];
          "from" = [ "syn/extra-traits" ];
          "generate-parsing-rs" = [ "peg" ];
          "into" = [ "syn/extra-traits" ];
          "is_variant" = [ "convert_case" ];
          "mul" = [ "syn/extra-traits" ];
          "mul_assign" = [ "syn/extra-traits" ];
          "not" = [ "syn/extra-traits" ];
          "peg" = [ "dep:peg" ];
          "rustc_version" = [ "dep:rustc_version" ];
          "testing-helpers" = [ "rustc_version" ];
          "try_into" = [ "syn/extra-traits" ];
          "unwrap" = [ "convert_case" "rustc_version" ];
        };
        resolvedDefaultFeatures = [ "display" "error" "from" ];
      };
      "deunicode" = rec {
        crateName = "deunicode";
        version = "1.4.4";
        edition = "2021";
        sha256 = "0khx3356c984ycplqailbdm2fybza6aj5szhwql3drj48w4z0bij";
        authors = [
          "Kornel Lesinski <kornel@geekhood.net>"
          "Amit Chowdhury <amitc97@gmail.com>"
        ];
        features = {
          "default" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" ];
      };
      "digest" = rec {
        crateName = "digest";
        version = "0.10.7";
        edition = "2018";
        sha256 = "14p2n6ih29x81akj097lvz7wi9b6b9hvls0lwrv7b6xwyy0s5ncy";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer";
            optional = true;
          }
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "block-buffer" = [ "dep:block-buffer" ];
          "const-oid" = [ "dep:const-oid" ];
          "core-api" = [ "block-buffer" ];
          "default" = [ "core-api" ];
          "dev" = [ "blobby" ];
          "mac" = [ "subtle" ];
          "oid" = [ "const-oid" ];
          "rand_core" = [ "crypto-common/rand_core" ];
          "std" = [ "alloc" "crypto-common/std" ];
          "subtle" = [ "dep:subtle" ];
        };
        resolvedDefaultFeatures = [ "alloc" "block-buffer" "core-api" "default" "std" ];
      };
      "dispatch" = rec {
        crateName = "dispatch";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0fwjr9b7582ic5689zxj8lf7zl94iklhlns3yivrnv8c9fxr635x";
        authors = [
          "Steven Sheldon"
        ];

      };
      "dlib" = rec {
        crateName = "dlib";
        version = "0.5.2";
        edition = "2015";
        sha256 = "04m4zzybx804394dnqs1blz241xcy480bdwf3w9p4k6c3l46031k";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "libloading";
            packageId = "libloading 0.8.3";
          }
        ];

      };
      "downcast-rs" = rec {
        crateName = "downcast-rs";
        version = "1.2.1";
        edition = "2015";
        sha256 = "1lmrq383d1yszp7mg5i7i56b17x2lnn3kb91jwsq0zykvg2jbcvm";
        authors = [
          "Ashish Myles <marcianx@gmail.com>"
          "Runji Wang <wangrunji0408@163.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "either" = rec {
        crateName = "either";
        version = "1.11.0";
        edition = "2018";
        sha256 = "18l0cwyw18syl8b52syv6balql8mnwfyhihjqqllx5pms93iqz54";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "use_std" ];
      };
      "embedded-io" = rec {
        crateName = "embedded-io";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1v9wrc5nsgaaady7i3ya394sik5251j0iq5rls7mrx7fv696h6pg";
        features = {
          "defmt" = [ "dep:defmt" ];
          "futures" = [ "std" "async" "dep:futures" ];
          "log" = [ "dep:log" ];
          "std" = [ "alloc" "futures?/std" ];
          "tokio" = [ "std" "async" "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "encase" = rec {
        crateName = "encase";
        version = "0.8.0";
        edition = "2021";
        sha256 = "0dmgddasxd4lwc8lkwlzrdjkm111w402phpc57gisrx5bylrk4js";
        dependencies = [
          {
            name = "const_panic";
            packageId = "const_panic";
            usesDefaultFeatures = false;
          }
          {
            name = "encase_derive";
            packageId = "encase_derive";
          }
          {
            name = "glam";
            packageId = "glam";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "archery" = [ "dep:archery" ];
          "arrayvec" = [ "dep:arrayvec" ];
          "cgmath" = [ "dep:cgmath" ];
          "glam" = [ "dep:glam" ];
          "im" = [ "dep:im" ];
          "im-rc" = [ "dep:im-rc" ];
          "imbl" = [ "dep:imbl" ];
          "mint" = [ "dep:mint" ];
          "nalgebra" = [ "dep:nalgebra" ];
          "ndarray" = [ "dep:ndarray" ];
          "rpds" = [ "dep:rpds" ];
          "smallvec" = [ "dep:smallvec" ];
          "static-rc" = [ "dep:static-rc" ];
          "tinyvec" = [ "dep:tinyvec" ];
          "ultraviolet" = [ "dep:ultraviolet" ];
          "vek" = [ "dep:vek" ];
        };
        resolvedDefaultFeatures = [ "glam" ];
      };
      "encase_derive" = rec {
        crateName = "encase_derive";
        version = "0.8.0";
        edition = "2021";
        sha256 = "046wrnlv4v7z73a09a06cbgzgqdjay4mj3wlnqnzxcdyngn9vq07";
        procMacro = true;
        dependencies = [
          {
            name = "encase_derive_impl";
            packageId = "encase_derive_impl";
          }
        ];

      };
      "encase_derive_impl" = rec {
        crateName = "encase_derive_impl";
        version = "0.8.0";
        edition = "2021";
        sha256 = "0iwvxsck2dpyh50ygs5rflfvbdrc47z8fylhkwrlss23jyyxncgx";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
          }
        ];

      };
      "encoding_rs" = rec {
        crateName = "encoding_rs";
        version = "0.8.34";
        edition = "2018";
        sha256 = "0nagpi1rjqdpvakymwmnlxzq908ncg868lml5b70n08bm82fjpdl";
        authors = [
          "Henri Sivonen <hsivonen@hsivonen.fi>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "any_all_workaround" = [ "dep:any_all_workaround" ];
          "default" = [ "alloc" ];
          "fast-legacy-encode" = [ "fast-hangul-encode" "fast-hanja-encode" "fast-kanji-encode" "fast-gb-hanzi-encode" "fast-big5-hanzi-encode" ];
          "serde" = [ "dep:serde" ];
          "simd-accel" = [ "any_all_workaround" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" ];
      };
      "enum-primitive-derive" = rec {
        crateName = "enum-primitive-derive";
        version = "0.2.2";
        edition = "2018";
        sha256 = "03ibjjx8dc4akpq8ck24qda5ix4jybz9jagfxykd0s6vxb2vjxf3";
        procMacro = true;
        authors = [
          "Doug Goldstein <cardoe@cardoe.com>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];

      };
      "enumflags2" = rec {
        crateName = "enumflags2";
        version = "0.7.9";
        edition = "2018";
        sha256 = "13cfkn555q8v6rrbld8m2xjb14pnap9w1x5wv98hlpk7zgawjy1j";
        authors = [
          "maik klein <maikklein@googlemail.com>"
          "Maja Kądziołka <maya@compilercrim.es>"
        ];
        dependencies = [
          {
            name = "enumflags2_derive";
            packageId = "enumflags2_derive";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "enumflags2_derive" = rec {
        crateName = "enumflags2_derive";
        version = "0.7.9";
        edition = "2018";
        sha256 = "1i1vjp2si8jq7cib97c26d3cysm0xip30fs5f84l46qv0xs54y2w";
        procMacro = true;
        authors = [
          "maik klein <maikklein@googlemail.com>"
          "Maja Kądziołka <maya@compilercrim.es>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
            features = [ "full" ];
          }
        ];

      };
      "equivalent" = rec {
        crateName = "equivalent";
        version = "1.0.1";
        edition = "2015";
        sha256 = "1malmx5f4lkfvqasz319lq6gb3ddg19yzf9s8cykfsgzdmyq0hsl";

      };
      "erased-serde" = rec {
        crateName = "erased-serde";
        version = "0.4.4";
        edition = "2021";
        sha256 = "1lx0si6iljzmfpblhn4b0ip3kw2yv4vjyca0riqz3ix311q80wrb";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "std" = [ "alloc" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "errno" = rec {
        crateName = "errno";
        version = "0.3.8";
        edition = "2018";
        sha256 = "0ia28ylfsp36i27g1qih875cyyy4by2grf80ki8vhgh6vinf8n52";
        authors = [
          "Chris Wong <lambda.fairy@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Diagnostics_Debug" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "libc/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "errors" = rec {
        crateName = "errors";
        version = "0.0.0";
        edition = "2021";
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./errors; }
          else ./errors;
        dependencies = [
          {
            name = "bevy";
            packageId = "bevy";
          }
        ];

      };
      "euclid" = rec {
        crateName = "euclid";
        version = "0.22.9";
        edition = "2021";
        sha256 = "11q747cps7fsgs7x84j549mk7055ngs0yyl3j9bs0g41bjy57wl7";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "std" ];
          "libm" = [ "num-traits/libm" ];
          "mint" = [ "dep:mint" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "event-listener 2.5.3" = rec {
        crateName = "event-listener";
        version = "2.5.3";
        edition = "2018";
        sha256 = "1q4w3pndc518crld6zsqvvpy9lkzwahp2zgza9kbzmmqh9gif1h2";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];

      };
      "event-listener 3.1.0" = rec {
        crateName = "event-listener";
        version = "3.1.0";
        edition = "2021";
        sha256 = "1hihkg6ihvb6p9yi7nq11di8mhd5y0iqv81ij6h0rf0fvsy7ff6r";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            usesDefaultFeatures = false;
          }
          {
            name = "parking";
            packageId = "parking";
            optional = true;
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "parking" = [ "dep:parking" ];
          "portable-atomic" = [ "portable-atomic-util" "portable_atomic_crate" ];
          "portable-atomic-util" = [ "dep:portable-atomic-util" ];
          "portable_atomic_crate" = [ "dep:portable_atomic_crate" ];
          "std" = [ "concurrent-queue/std" "parking" ];
        };
        resolvedDefaultFeatures = [ "default" "parking" "std" ];
      };
      "event-listener 4.0.3" = rec {
        crateName = "event-listener";
        version = "4.0.3";
        edition = "2021";
        sha256 = "0vk4smw1vf871vi76af1zn7w69jg3zmpjddpby2qq91bkg21bck7";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            usesDefaultFeatures = false;
          }
          {
            name = "parking";
            packageId = "parking";
            optional = true;
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "parking" = [ "dep:parking" ];
          "portable-atomic" = [ "portable-atomic-util" "portable_atomic_crate" ];
          "portable-atomic-util" = [ "dep:portable-atomic-util" ];
          "portable_atomic_crate" = [ "dep:portable_atomic_crate" ];
          "std" = [ "concurrent-queue/std" "parking" ];
        };
        resolvedDefaultFeatures = [ "parking" "std" ];
      };
      "event-listener 5.3.0" = rec {
        crateName = "event-listener";
        version = "5.3.0";
        edition = "2021";
        sha256 = "091a6bgxzjnycqa10l2sqwzzy0j9vpw7a1w0nbglqlqkraw496bd";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            usesDefaultFeatures = false;
          }
          {
            name = "parking";
            packageId = "parking";
            optional = true;
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "concurrent-queue/loom" "parking?/loom" "dep:loom" ];
          "parking" = [ "dep:parking" ];
          "portable-atomic" = [ "portable-atomic-util" "portable_atomic_crate" ];
          "portable-atomic-util" = [ "dep:portable-atomic-util" ];
          "portable_atomic_crate" = [ "dep:portable_atomic_crate" ];
          "std" = [ "concurrent-queue/std" "parking" ];
        };
        resolvedDefaultFeatures = [ "parking" "std" ];
      };
      "event-listener-strategy 0.4.0" = rec {
        crateName = "event-listener-strategy";
        version = "0.4.0";
        edition = "2018";
        sha256 = "1lwprdjqp2ibbxhgm9khw7s7y7k4xiqj5i5yprqiks6mnrq4v3lm";
        authors = [
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "event-listener";
            packageId = "event-listener 4.0.3";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "event-listener/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "event-listener-strategy 0.5.2" = rec {
        crateName = "event-listener-strategy";
        version = "0.5.2";
        edition = "2021";
        sha256 = "18f5ri227khkayhv3ndv7yl4rnasgwksl2jhwgafcxzr7324s88g";
        authors = [
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "event-listener";
            packageId = "event-listener 5.3.0";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "event-listener/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "example-showcase" = rec {
        crateName = "example-showcase";
        version = "0.0.0";
        edition = "2021";
        crateBin = [
          {
            name = "example-showcase";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        # We can't filter paths with references in Nix 2.4
        # See https://github.com/NixOS/nix/issues/5410
        src = if ((lib.versionOlder builtins.nixVersion "2.4pre20211007") || (lib.versionOlder "2.5" builtins.nixVersion ))
          then lib.cleanSourceWith { filter = sourceFilter;  src = ./tools/example-showcase; }
          else ./tools/example-showcase;
        dependencies = [
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "pbr";
            packageId = "pbr";
          }
          {
            name = "ron";
            packageId = "ron";
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.22.12";
            usesDefaultFeatures = false;
            features = [ "parse" ];
          }
          {
            name = "xshell";
            packageId = "xshell";
          }
        ];

      };
      "exr" = rec {
        crateName = "exr";
        version = "1.72.0";
        edition = "2018";
        sha256 = "195iviimjnp1mdkqrq8hjrfkr0qavpp1p8pq5qvaksa30pv96zc8";
        authors = [
          "johannesvollmer <johannes596@t-online.de>"
        ];
        dependencies = [
          {
            name = "bit_field";
            packageId = "bit_field";
          }
          {
            name = "flume";
            packageId = "flume";
            usesDefaultFeatures = false;
          }
          {
            name = "half";
            packageId = "half";
          }
          {
            name = "lebe";
            packageId = "lebe";
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
          }
          {
            name = "rayon-core";
            packageId = "rayon-core";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "zune-inflate";
            packageId = "zune-inflate";
            usesDefaultFeatures = false;
            features = [ "zlib" ];
          }
        ];

      };
      "extended" = rec {
        crateName = "extended";
        version = "0.1.0";
        edition = "2021";
        sha256 = "0r830ak1a9775i9yl5lljm29zbnlncw7xlfz35mhgjrz43c775mg";
        authors = [
          "Dietrich Epp <depp@zdome.net>"
        ];

      };
      "fastrand 1.9.0" = rec {
        crateName = "fastrand";
        version = "1.9.0";
        edition = "2018";
        sha256 = "1gh12m56265ihdbzh46bhh0jf74i197wm51jg1cw75q7ggi96475";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "instant";
            packageId = "instant";
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("wasi" == target."os" or null)));
          }
        ];
        devDependencies = [
          {
            name = "instant";
            packageId = "instant";
            target = {target, features}: (("wasm32" == target."arch" or null) && (!("wasi" == target."os" or null)));
            features = [ "wasm-bindgen" ];
          }
        ];

      };
      "fastrand 2.1.0" = rec {
        crateName = "fastrand";
        version = "2.1.0";
        edition = "2018";
        sha256 = "06p5d0rxq7by260m4ym9ial0bwgi0v42lrvhl6nm2g7h0h2m3h4z";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "getrandom" = [ "dep:getrandom" ];
          "js" = [ "std" "getrandom" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "fdeflate" = rec {
        crateName = "fdeflate";
        version = "0.3.4";
        edition = "2021";
        sha256 = "0ig65nz4wcqaa3y109sh7yv155ldfyph6bs2ifmz1vad1vizx6sg";
        authors = [
          "The image-rs Developers"
        ];
        dependencies = [
          {
            name = "simd-adler32";
            packageId = "simd-adler32";
          }
        ];

      };
      "file-id" = rec {
        crateName = "file-id";
        version = "0.2.1";
        edition = "2021";
        crateBin = [];
        sha256 = "1jdg9xq830hghzrqkbnx8nda58a7z6mh8b6vlg5mj87v4l2ji135";
        authors = [
          "Daniel Faust <hessijames@gmail.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Storage_FileSystem" "Win32_Foundation" ];
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "filetime" = rec {
        crateName = "filetime";
        version = "0.2.23";
        edition = "2018";
        sha256 = "1za0sbq7fqidk8aaq9v7m9ms0sv8mmi49g6p5cphpan819q4gr0y";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.4.1";
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Storage_FileSystem" ];
          }
        ];

      };
      "fixedbitset 0.4.2" = rec {
        crateName = "fixedbitset";
        version = "0.4.2";
        edition = "2015";
        sha256 = "101v41amgv5n9h4hcghvrbfk5vrncx1jwm35rn5szv4rk55i7rqc";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "fixedbitset 0.5.7" = rec {
        crateName = "fixedbitset";
        version = "0.5.7";
        edition = "2021";
        sha256 = "16fd3v9d2cms2vddf9xhlm56sz4j0zgrk3d2h6v1l7hx760lwrqx";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "flate2" = rec {
        crateName = "flate2";
        version = "1.0.30";
        edition = "2018";
        sha256 = "1bjx56n0wq5w7vsjn7b5rbmqiw0vc3mfzz1rl7i2jy0wzmy44m2z";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "with-alloc" ];
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null)));
            features = [ "with-alloc" ];
          }
        ];
        features = {
          "any_zlib" = [ "any_impl" ];
          "cloudflare-zlib-sys" = [ "dep:cloudflare-zlib-sys" ];
          "cloudflare_zlib" = [ "any_zlib" "cloudflare-zlib-sys" ];
          "default" = [ "rust_backend" ];
          "libz-ng-sys" = [ "dep:libz-ng-sys" ];
          "libz-rs-sys" = [ "dep:libz-rs-sys" ];
          "libz-sys" = [ "dep:libz-sys" ];
          "miniz-sys" = [ "rust_backend" ];
          "miniz_oxide" = [ "dep:miniz_oxide" ];
          "rust_backend" = [ "miniz_oxide" "any_impl" ];
          "zlib" = [ "any_zlib" "libz-sys" ];
          "zlib-default" = [ "any_zlib" "libz-sys/default" ];
          "zlib-ng" = [ "any_zlib" "libz-ng-sys" ];
          "zlib-ng-compat" = [ "zlib" "libz-sys/zlib-ng" ];
          "zlib-rs" = [ "any_zlib" "libz-rs-sys" ];
        };
        resolvedDefaultFeatures = [ "any_impl" "default" "miniz_oxide" "rust_backend" ];
      };
      "float-cmp" = rec {
        crateName = "float-cmp";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1i799ksbq7fj9rm9m82g1yqgm6xi3jnrmylddmqknmksajylpplq";
        libName = "float_cmp";
        authors = [
          "Mike Dilger <mike@mikedilger.com>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "ratio" ];
          "num-traits" = [ "dep:num-traits" ];
          "ratio" = [ "num-traits" ];
        };
        resolvedDefaultFeatures = [ "default" "num-traits" "ratio" ];
      };
      "flume" = rec {
        crateName = "flume";
        version = "0.11.0";
        edition = "2018";
        sha256 = "10girdbqn77wi802pdh55lwbmymy437k7kklnvj12aaiwaflbb2m";
        authors = [
          "Joshua Barretto <joshua.s.barretto@gmail.com>"
        ];
        dependencies = [
          {
            name = "spin";
            packageId = "spin";
            rename = "spin1";
            features = [ "mutex" ];
          }
        ];
        features = {
          "async" = [ "futures-sink" "futures-core" ];
          "default" = [ "async" "select" "eventual-fairness" ];
          "eventual-fairness" = [ "select" "nanorand" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "nanorand" = [ "dep:nanorand" ];
        };
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.7";
        edition = "2015";
        sha256 = "1hc2mcqha06aibcaza94vbi81j6pr9a1bbxrxjfhc91zin8yr7iz";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "foreign-types" = rec {
        crateName = "foreign-types";
        version = "0.5.0";
        edition = "2018";
        sha256 = "0rfr2zfxnx9rz3292z5nyk8qs2iirznn5ff3rd4vgdwza6mdjdyp";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "foreign-types-macros";
            packageId = "foreign-types-macros";
          }
          {
            name = "foreign-types-shared";
            packageId = "foreign-types-shared";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "foreign-types-macros/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "foreign-types-macros" = rec {
        crateName = "foreign-types-macros";
        version = "0.2.3";
        edition = "2018";
        sha256 = "0hjpii8ny6l7h7jpns2cp9589016l8mlrpaigcnayjn9bdc6qp0s";
        procMacro = true;
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
            features = [ "full" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "foreign-types-shared" = rec {
        crateName = "foreign-types-shared";
        version = "0.3.1";
        edition = "2018";
        sha256 = "0nykdvv41a3d4py61bylmlwjhhvdm0b3bcj9vxhqgxaxnp5ik6ma";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];

      };
      "fsevent-sys" = rec {
        crateName = "fsevent-sys";
        version = "4.1.0";
        edition = "2018";
        sha256 = "1liz67v8b0gcs8r31vxkvm2jzgl9p14i78yfqx81c8sdv817mvkn";
        authors = [
          "Pierre Baillet <pierre@baillet.name>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "futures-core" = rec {
        crateName = "futures-core";
        version = "0.3.30";
        edition = "2018";
        sha256 = "07aslayrn3lbggj54kci0ishmd1pr367fp7iks7adia1p05miinz";
        features = {
          "default" = [ "std" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-io" = rec {
        crateName = "futures-io";
        version = "0.3.30";
        edition = "2018";
        sha256 = "1hgh25isvsr4ybibywhr4dpys8mjnscw4wfxxwca70cn1gi26im4";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "futures-lite 1.13.0" = rec {
        crateName = "futures-lite";
        version = "1.13.0";
        edition = "2018";
        sha256 = "1kkbqhaib68nzmys2dc8j9fl2bwzf2s91jfk13lb2q3nwhfdbaa9";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Contributors to futures-rs"
        ];
        dependencies = [
          {
            name = "fastrand";
            packageId = "fastrand 1.9.0";
            optional = true;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "parking";
            packageId = "parking";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "waker-fn";
            packageId = "waker-fn";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "fastrand" = [ "dep:fastrand" ];
          "futures-io" = [ "dep:futures-io" ];
          "memchr" = [ "dep:memchr" ];
          "parking" = [ "dep:parking" ];
          "std" = [ "alloc" "fastrand" "futures-io" "parking" "memchr" "waker-fn" ];
          "waker-fn" = [ "dep:waker-fn" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "fastrand" "futures-io" "memchr" "parking" "std" "waker-fn" ];
      };
      "futures-lite 2.3.0" = rec {
        crateName = "futures-lite";
        version = "2.3.0";
        edition = "2021";
        sha256 = "19gk4my8zhfym6gwnpdjiyv2hw8cc098skkbkhryjdaf0yspwljj";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Contributors to futures-rs"
        ];
        dependencies = [
          {
            name = "fastrand";
            packageId = "fastrand 2.1.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "parking";
            packageId = "parking";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "race" "std" ];
          "fastrand" = [ "dep:fastrand" ];
          "futures-io" = [ "dep:futures-io" ];
          "memchr" = [ "dep:memchr" ];
          "parking" = [ "dep:parking" ];
          "race" = [ "fastrand" ];
          "std" = [ "alloc" "fastrand/std" "futures-io" "parking" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "fastrand" "futures-io" "parking" "race" "std" ];
      };
      "futures-sink" = rec {
        crateName = "futures-sink";
        version = "0.3.30";
        edition = "2018";
        sha256 = "1dag8xyyaya8n8mh8smx7x6w2dpmafg2din145v973a3hw7f1f4z";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-task" = rec {
        crateName = "futures-task";
        version = "0.3.30";
        edition = "2018";
        sha256 = "013h1724454hj8qczp8vvs10qfiqrxr937qsrv6rhii68ahlzn1q";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "futures-util" = rec {
        crateName = "futures-util";
        version = "0.3.30";
        edition = "2018";
        sha256 = "0j0xqhcir1zf2dcbpd421kgw6wvsk0rpxflylcysn1rlp3g02r1x";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" ];
          "async-await-macro" = [ "async-await" "futures-macro" ];
          "channel" = [ "std" "futures-channel" ];
          "compat" = [ "std" "futures_01" ];
          "default" = [ "std" "async-await" "async-await-macro" ];
          "futures-channel" = [ "dep:futures-channel" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-macro" = [ "dep:futures-macro" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "futures_01" = [ "dep:futures_01" ];
          "io" = [ "std" "futures-io" "memchr" ];
          "io-compat" = [ "io" "compat" "tokio-io" ];
          "memchr" = [ "dep:memchr" ];
          "portable-atomic" = [ "futures-core/portable-atomic" ];
          "sink" = [ "futures-sink" ];
          "slab" = [ "dep:slab" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "slab" ];
          "tokio-io" = [ "dep:tokio-io" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" ];
          "write-all-vectored" = [ "io" ];
        };
        resolvedDefaultFeatures = [ "alloc" "futures-io" "futures-sink" "io" "memchr" "sink" "slab" "std" ];
      };
      "generator" = rec {
        crateName = "generator";
        version = "0.8.1";
        edition = "2021";
        sha256 = "1yw3rxbfq5a3yzrg88pdln2lvi9014zg1mpq1q4x0cf27gai8q0q";
        authors = [
          "Xudong Huang <huangxu008@hotmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "windows";
            packageId = "windows 0.54.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Memory" "Win32_System_Kernel" "Win32_Foundation" "Win32_System_SystemInformation" "Win32_System_Diagnostics_Debug" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];

      };
      "generic-array" = rec {
        crateName = "generic-array";
        version = "0.14.7";
        edition = "2015";
        sha256 = "16lyyrzrljfq424c3n8kfwkqihlimmsg5nhshbbp48np3yjrqr45";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "more_lengths" ];
      };
      "gethostname" = rec {
        crateName = "gethostname";
        version = "0.4.3";
        edition = "2021";
        sha256 = "063qqhznyckwx9n4z4xrmdv10s0fi6kbr17r6bi1yjifki2y0xh1";
        authors = [
          "Sebastian Wiesner <sebastian@swsnr.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(target."windows" or false));
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.48.5";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "getrandom" = rec {
        crateName = "getrandom";
        version = "0.2.15";
        edition = "2018";
        sha256 = "1mzlnrb3dgyd1fb84gvw10pyr8wdqdl4ry4sr64i1s8an66pqmn4";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = { target, features }: ((("wasm32" == target."arch" or null) || ("wasm64" == target."arch" or null)) && ("unknown" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((("wasm32" == target."arch" or null) || ("wasm64" == target."arch" or null)) && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "js" = [ "wasm-bindgen" "js-sys" ];
          "js-sys" = [ "dep:js-sys" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "libc/rustc-dep-of-std" "wasi/rustc-dep-of-std" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "js" "js-sys" "std" "wasm-bindgen" ];
      };
      "gilrs" = rec {
        crateName = "gilrs";
        version = "0.10.7";
        edition = "2021";
        sha256 = "0k6209iz5qx4imhrb2w16r7b6v1sjb1gvgdvygdcvdaahhwmwkmm";
        authors = [
          "Arvamer <arvamer@gmail.com>"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "gilrs-core";
            packageId = "gilrs-core";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "uuid";
            packageId = "uuid";
          }
          {
            name = "vec_map";
            packageId = "vec_map";
          }
        ];
        features = {
          "default" = [ "wgi" ];
          "serde" = [ "dep:serde" ];
          "serde-serialize" = [ "serde" "gilrs-core/serde-serialize" ];
          "wgi" = [ "gilrs-core/wgi" ];
          "xinput" = [ "gilrs-core/xinput" ];
        };
        resolvedDefaultFeatures = [ "default" "wgi" ];
      };
      "gilrs-core" = rec {
        crateName = "gilrs-core";
        version = "0.5.11";
        edition = "2021";
        sha256 = "03kj5j48zpzka9bmbz4a14wnqcsw0wqyfrkxwr42apqm18kk5hc5";
        authors = [
          "Mateusz Sieczko <arvamer@gmail.com>"
        ];
        dependencies = [
          {
            name = "core-foundation";
            packageId = "core-foundation";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "inotify";
            packageId = "inotify 0.10.2";
            usesDefaultFeatures = false;
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null));
          }
          {
            name = "io-kit-sys";
            packageId = "io-kit-sys";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null));
          }
          {
            name = "libudev-sys";
            packageId = "libudev-sys";
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null));
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "nix";
            packageId = "nix 0.28.0";
            usesDefaultFeatures = false;
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null));
            features = [ "ioctl" "event" ];
          }
          {
            name = "uuid";
            packageId = "uuid";
          }
          {
            name = "vec_map";
            packageId = "vec_map";
            target = { target, features }: (("linux" == target."os" or null) || ("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null));
          }
          {
            name = "vec_map";
            packageId = "vec_map";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "Gamepad" "GamepadButton" "GamepadMappingType" "Window" "Navigator" "DomException" ];
          }
          {
            name = "windows";
            packageId = "windows 0.54.0";
            optional = true;
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "Gaming_Input" "Foundation_Collections" "Devices_Power" "System_Power" "Gaming_Input_ForceFeedback" ];
          }
        ];
        features = {
          "default" = [ "wgi" ];
          "rusty-xinput" = [ "dep:rusty-xinput" ];
          "serde" = [ "dep:serde" ];
          "serde-serialize" = [ "serde" ];
          "wgi" = [ "windows" ];
          "winapi" = [ "dep:winapi" ];
          "windows" = [ "dep:windows" ];
          "xinput" = [ "rusty-xinput" "winapi" ];
        };
        resolvedDefaultFeatures = [ "wgi" "windows" ];
      };
      "gl_generator" = rec {
        crateName = "gl_generator";
        version = "0.14.0";
        edition = "2015";
        sha256 = "0k8j1hmfnff312gy7x1aqjzcm8zxid7ij7dlb8prljib7b1dz58s";
        libPath = "lib.rs";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
          "Corey Richardson"
          "Arseny Kapoulkine"
        ];
        dependencies = [
          {
            name = "khronos_api";
            packageId = "khronos_api";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "xml-rs";
            packageId = "xml-rs";
          }
        ];
        features = {
        };
      };
      "glam" = rec {
        crateName = "glam";
        version = "0.27.0";
        edition = "2021";
        sha256 = "1fawkrkbivdds5lzczk1rx37b7s3apl2cywch7s5ad1yfbkff1cy";
        authors = [
          "Cameron Hart <cameron.hart@gmail.com>"
        ];
        dependencies = [
          {
            name = "approx";
            packageId = "approx";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "libm";
            packageId = "libm";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "mint";
            packageId = "mint";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "approx" = [ "dep:approx" ];
          "bytecheck" = [ "dep:bytecheck" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
          "mint" = [ "dep:mint" ];
          "rand" = [ "dep:rand" ];
          "rkyv" = [ "dep:rkyv" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "approx" "bytemuck" "debug-glam-assert" "default" "glam-assert" "libm" "mint" "rand" "serde" "std" ];
      };
      "glob" = rec {
        crateName = "glob";
        version = "0.3.1";
        edition = "2015";
        sha256 = "16zca52nglanv23q5qrwd5jinw3d3as5ylya6y1pbx47vkxvrynj";
        authors = [
          "The Rust Project Developers"
        ];

      };
      "globset" = rec {
        crateName = "globset";
        version = "0.4.14";
        edition = "2021";
        sha256 = "1qab0c1drpybgm4nc92lf8b46x0ap44c9y4k23rndgc5bfdkpnjp";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
          }
          {
            name = "bstr";
            packageId = "bstr";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "regex-automata";
            packageId = "regex-automata 0.4.6";
            usesDefaultFeatures = false;
            features = [ "std" "perf" "syntax" "meta" "nfa" "hybrid" ];
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.3";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "default" = [ "log" ];
          "log" = [ "dep:log" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" "log" ];
      };
      "globwalk" = rec {
        crateName = "globwalk";
        version = "0.8.1";
        edition = "2015";
        sha256 = "1k6xwkydr7igvwjn3xkwjywk4213lcs53f576ilqz1h84jaazqwk";
        authors = [
          "Gilad Naaman <gilad@naaman.io>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "ignore";
            packageId = "ignore";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];

      };
      "glow" = rec {
        crateName = "glow";
        version = "0.13.1";
        edition = "2021";
        sha256 = "1c91n554dp4bdp5d86rpl77ryv6rjyrqn7735m7mfcivqh28wd5x";
        authors = [
          "Joshua Groves <josh@joshgroves.com>"
          "Dzmitry Malyshau <kvarkus@gmail.com>"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "slotmap";
            packageId = "slotmap";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            rename = "web_sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "Document" "Element" "HtmlCanvasElement" "HtmlImageElement" "HtmlVideoElement" "ImageBitmap" "VideoFrame" "WebGlActiveInfo" "WebGlBuffer" "WebGlFramebuffer" "WebGlProgram" "WebGlQuery" "WebGlRenderbuffer" "WebGlRenderingContext" "WebGl2RenderingContext" "WebGlSampler" "WebGlShader" "WebGlSync" "WebGlTexture" "WebGlTransformFeedback" "WebGlUniformLocation" "WebGlVertexArrayObject" "Window" "AngleInstancedArrays" "ExtBlendMinmax" "ExtColorBufferFloat" "ExtColorBufferHalfFloat" "ExtDisjointTimerQuery" "ExtFragDepth" "ExtShaderTextureLod" "ExtSRgb" "ExtTextureFilterAnisotropic" "OesElementIndexUint" "OesStandardDerivatives" "OesTextureFloat" "OesTextureFloatLinear" "OesTextureHalfFloat" "OesTextureHalfFloatLinear" "OesVertexArrayObject" "WebglColorBufferFloat" "WebglCompressedTextureAstc" "WebglCompressedTextureEtc" "WebglCompressedTextureEtc1" "WebglCompressedTexturePvrtc" "WebglCompressedTextureS3tc" "WebglCompressedTextureS3tcSrgb" "WebglDebugRendererInfo" "WebglDebugShaders" "WebglDepthTexture" "WebglDrawBuffers" "WebglLoseContext" "OvrMultiview2" ];
          }
        ];
        features = {
          "log" = [ "dep:log" ];
        };
      };
      "gltf" = rec {
        crateName = "gltf";
        version = "1.4.0";
        edition = "2021";
        sha256 = "0czgq8wdxadfwfn82yrlmrkxs7lybcs3r592b21pa44lrxlz0y1v";
        authors = [
          "David Harvey-Macaulay <alteous@outlook.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "gltf-json";
            packageId = "gltf-json";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "raw_value" ];
          }
        ];
        features = {
          "KHR_lights_punctual" = [ "gltf-json/KHR_lights_punctual" ];
          "KHR_materials_emissive_strength" = [ "gltf-json/KHR_materials_emissive_strength" ];
          "KHR_materials_ior" = [ "gltf-json/KHR_materials_ior" ];
          "KHR_materials_pbrSpecularGlossiness" = [ "gltf-json/KHR_materials_pbrSpecularGlossiness" ];
          "KHR_materials_specular" = [ "gltf-json/KHR_materials_specular" ];
          "KHR_materials_transmission" = [ "gltf-json/KHR_materials_transmission" ];
          "KHR_materials_unlit" = [ "gltf-json/KHR_materials_unlit" ];
          "KHR_materials_variants" = [ "gltf-json/KHR_materials_variants" ];
          "KHR_materials_volume" = [ "gltf-json/KHR_materials_volume" ];
          "KHR_texture_transform" = [ "gltf-json/KHR_texture_transform" ];
          "base64" = [ "dep:base64" ];
          "default" = [ "import" "utils" "names" ];
          "extensions" = [ "gltf-json/extensions" ];
          "extras" = [ "gltf-json/extras" ];
          "image" = [ "dep:image" ];
          "image_jpeg_rayon" = [ "image/jpeg_rayon" ];
          "import" = [ "base64" "image" "urlencoding" ];
          "names" = [ "gltf-json/names" ];
          "urlencoding" = [ "dep:urlencoding" ];
        };
        resolvedDefaultFeatures = [ "KHR_lights_punctual" "KHR_materials_emissive_strength" "KHR_materials_ior" "KHR_materials_transmission" "KHR_materials_unlit" "KHR_materials_volume" "KHR_texture_transform" "extensions" "extras" "names" "utils" ];
      };
      "gltf-derive" = rec {
        crateName = "gltf-derive";
        version = "1.4.0";
        edition = "2021";
        sha256 = "0mrawdn8icr28xkk2cghys9nx0af2rmn68xgzq1m9ms0aldgx3s3";
        procMacro = true;
        authors = [
          "David Harvey-Macaulay <alteous@outlook.com>"
        ];
        dependencies = [
          {
            name = "inflections";
            packageId = "inflections";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
          }
        ];

      };
      "gltf-json" = rec {
        crateName = "gltf-json";
        version = "1.4.0";
        edition = "2021";
        sha256 = "1qfq0sd3wb6xifb1jqxfxxwgm0g2p9398ydhljgccavzanx52nb5";
        authors = [
          "David Harvey-Macaulay <alteous@outlook.com>"
        ];
        dependencies = [
          {
            name = "gltf-derive";
            packageId = "gltf-derive";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "raw_value" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "KHR_lights_punctual" "KHR_materials_emissive_strength" "KHR_materials_ior" "KHR_materials_transmission" "KHR_materials_unlit" "KHR_materials_volume" "KHR_texture_transform" "default" "extensions" "extras" "names" ];
      };
      "glutin_wgl_sys" = rec {
        crateName = "glutin_wgl_sys";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1b9f6qjc8gwhfxac4fpxkvv524l493f6b6q764nslpwmmjnri03c";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
        ];
        buildDependencies = [
          {
            name = "gl_generator";
            packageId = "gl_generator";
          }
        ];

      };
      "glyph_brush_layout" = rec {
        crateName = "glyph_brush_layout";
        version = "0.2.3";
        edition = "2018";
        sha256 = "0f3scdx5kqjndnwvamfjca6dl8fs6np0jl2wd71mmjh09wrw4cnc";
        authors = [
          "Alex Butler <alexheretic@gmail.com>"
        ];
        dependencies = [
          {
            name = "ab_glyph";
            packageId = "ab_glyph";
          }
          {
            name = "approx";
            packageId = "approx";
          }
          {
            name = "xi-unicode";
            packageId = "xi-unicode";
          }
        ];

      };
      "gpu-alloc" = rec {
        crateName = "gpu-alloc";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0wd1wq7qs8ja0cp37ajm9p1r526sp6w0kvjp3xx24jsrjfx2vkgv";
        authors = [
          "Zakarum <zakarumych@ya.ru>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "gpu-alloc-types";
            packageId = "gpu-alloc-types";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" "bitflags/serde" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "gpu-alloc-types" = rec {
        crateName = "gpu-alloc-types";
        version = "0.3.0";
        edition = "2018";
        sha256 = "190wxsp9q8c59xybkfrlzqqyrxj6z39zamadk1q7v0xad2s07zwq";
        authors = [
          "Zakarum <zakarumych@ya.ru>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
            usesDefaultFeatures = false;
          }
        ];

      };
      "gpu-allocator" = rec {
        crateName = "gpu-allocator";
        version = "0.25.0";
        edition = "2021";
        sha256 = "11484bhn0p8555gprr58kmz1aqccz1zqbx5ww4c3rl38i4qzcmkg";
        authors = [
          "Traverse Research <opensource@traverseresearch.nl>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "presser";
            packageId = "presser";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "winapi";
            packageId = "winapi";
            optional = true;
            target = { target, features }: (target."windows" or false);
            features = [ "d3d12" "winerror" "impl-default" "impl-debug" ];
          }
          {
            name = "windows";
            packageId = "windows 0.52.0";
            optional = true;
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Graphics" "Win32_Graphics_Direct3D" "Win32_Graphics_Direct3D12" "Win32_Graphics_Dxgi" "Win32_Graphics_Dxgi_Common" ];
          }
        ];
        devDependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = {target, features}: (target."windows" or false);
            features = [ "d3d12" "d3d12sdklayers" "dxgi1_6" "winerror" "impl-default" "impl-debug" "winuser" "windowsx" "libloaderapi" ];
          }
          {
            name = "windows";
            packageId = "windows 0.52.0";
            target = {target, features}: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Graphics" "Win32_Graphics_Direct3D" "Win32_Graphics_Direct3D12" "Win32_Graphics_Dxgi" "Win32_Graphics_Dxgi_Common" ];
          }
        ];
        features = {
          "ash" = [ "dep:ash" ];
          "d3d12" = [ "windows" ];
          "default" = [ "d3d12" "vulkan" ];
          "egui" = [ "dep:egui" ];
          "egui_extras" = [ "dep:egui_extras" ];
          "public-winapi" = [ "dep:winapi" ];
          "visualizer" = [ "egui" "egui_extras" ];
          "vulkan" = [ "ash" ];
          "windows" = [ "dep:windows" ];
        };
        resolvedDefaultFeatures = [ "d3d12" "public-winapi" "windows" ];
      };
      "gpu-descriptor" = rec {
        crateName = "gpu-descriptor";
        version = "0.2.4";
        edition = "2018";
        sha256 = "0b38pi460ajx8ksb61zxardwkpa27qgz8fpm252mczlfrqddy4fc";
        authors = [
          "Zakarum <zakarumych@ya.ru>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "gpu-descriptor-types";
            packageId = "gpu-descriptor-types";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "gpu-descriptor-types" = rec {
        crateName = "gpu-descriptor-types";
        version = "0.1.2";
        edition = "2018";
        sha256 = "135pp1b3bzyr7bfnb30rf9pkgy61h75w0jabi8fpw2q9dxpb7w3b";
        authors = [
          "Zakarum <zakarumych@ya.ru>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
            usesDefaultFeatures = false;
          }
        ];

      };
      "grid" = rec {
        crateName = "grid";
        version = "0.13.0";
        edition = "2018";
        sha256 = "135mp5gji3r7xgmkr7vj9gc7hqa1z0mrn92r2d9qmcbxcb0zz5ni";
        authors = [
          "Armin Becher <armin.becher@gmai.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "std" "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "guillotiere" = rec {
        crateName = "guillotiere";
        version = "0.6.2";
        edition = "2018";
        sha256 = "10m7fhp5kzf09kz08k6apkbzblriyqynjl1wwa9i7jrnq1jmhbdn";
        authors = [
          "Nicolas Silva <nical@fastmail.com>"
        ];
        dependencies = [
          {
            name = "euclid";
            packageId = "euclid";
          }
          {
            name = "svg_fmt";
            packageId = "svg_fmt";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serialization" = [ "serde" "euclid/serde" ];
        };
      };
      "half" = rec {
        crateName = "half";
        version = "2.4.1";
        edition = "2021";
        sha256 = "123q4zzw1x4309961i69igzd1wb7pj04aaii3kwasrz3599qrl3d";
        authors = [
          "Kathryn Long <squeeself@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "crunchy";
            packageId = "crunchy";
            target = { target, features }: ("spirv" == target."arch" or null);
          }
        ];
        devDependencies = [
          {
            name = "crunchy";
            packageId = "crunchy";
          }
        ];
        features = {
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "std" ];
          "num-traits" = [ "dep:num-traits" ];
          "rand_distr" = [ "dep:rand" "dep:rand_distr" ];
          "rkyv" = [ "dep:rkyv" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "zerocopy" = [ "dep:zerocopy" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "hash32" = rec {
        crateName = "hash32";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0rrbv5pc5b1vax6j6hk7zvlrpw0h6aybshxy9vbpgsrgfrc5zhxh";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
        ];

      };
      "hashbrown" = rec {
        crateName = "hashbrown";
        version = "0.14.5";
        edition = "2021";
        sha256 = "1wa1vy1xs3mp11bn3z9dv0jricgr6a2j0zkf1g19yz3vw4il89z5";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "allocator-api2";
            packageId = "allocator-api2";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "alloc" = [ "dep:alloc" ];
          "allocator-api2" = [ "dep:allocator-api2" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" "allocator-api2" ];
          "equivalent" = [ "dep:equivalent" ];
          "nightly" = [ "allocator-api2?/nightly" "bumpalo/allocator_api" ];
          "rayon" = [ "dep:rayon" ];
          "rkyv" = [ "dep:rkyv" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "ahash" "allocator-api2" "default" "inline-more" "raw" "serde" ];
      };
      "hassle-rs" = rec {
        crateName = "hassle-rs";
        version = "0.11.0";
        edition = "2018";
        sha256 = "147886vviw14zm2a3yh8gs1r81r5gy88lrpv67d4hk7kw5rpwamg";
        authors = [
          "Traverse-Research <support@traverseresearch.nl>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "com";
            packageId = "com";
            features = [ "production" ];
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(target."windows" or false));
          }
          {
            name = "libloading";
            packageId = "libloading 0.8.3";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "widestring";
            packageId = "widestring";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "wtypes" "oleauto" "combaseapi" ];
          }
        ];

      };
      "heapless" = rec {
        crateName = "heapless";
        version = "0.7.17";
        edition = "2018";
        sha256 = "0kwn2wzk9fnsqnwp6rqjqhvh6hfq4rh225xwqjm72b5n1ry4bind";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
          "Per Lindgren <per.lindgren@ltu.se>"
          "Emil Fresk <emil.fresk@gmail.com>"
        ];
        dependencies = [
          {
            name = "atomic-polyfill";
            packageId = "atomic-polyfill";
            optional = true;
            target = { target, features }: ("avr" == target."arch" or null);
          }
          {
            name = "atomic-polyfill";
            packageId = "atomic-polyfill";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "riscv32i-unknown-none-elf");
          }
          {
            name = "atomic-polyfill";
            packageId = "atomic-polyfill";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "riscv32imc-unknown-none-elf");
          }
          {
            name = "atomic-polyfill";
            packageId = "atomic-polyfill";
            optional = true;
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "thumbv6m-none-eabi");
          }
          {
            name = "atomic-polyfill";
            packageId = "atomic-polyfill";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "xtensa-esp32s2-none-elf");
          }
          {
            name = "hash32";
            packageId = "hash32";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "spin";
            packageId = "spin";
            target = { target, features }: ("x86_64" == target."arch" or null);
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "atomic-polyfill" = [ "dep:atomic-polyfill" ];
          "cas" = [ "atomic-polyfill" ];
          "default" = [ "cas" ];
          "defmt" = [ "dep:defmt" ];
          "defmt-impl" = [ "defmt" ];
          "serde" = [ "dep:serde" ];
          "ufmt-impl" = [ "ufmt-write" ];
          "ufmt-write" = [ "dep:ufmt-write" ];
        };
        resolvedDefaultFeatures = [ "atomic-polyfill" "cas" "serde" ];
      };
      "heck" = rec {
        crateName = "heck";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1sjmpsdl8czyh9ywl3qcsfsq9a307dg4ni2vnlwgnzzqhc4y0113";

      };
      "hermit-abi" = rec {
        crateName = "hermit-abi";
        version = "0.3.9";
        edition = "2021";
        sha256 = "092hxjbjnq5fmz66grd9plxd0sh6ssg5fhgwwwqbrzgzkjwdycfj";
        authors = [
          "Stefan Lankes"
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hex" = rec {
        crateName = "hex";
        version = "0.4.3";
        edition = "2018";
        sha256 = "0w1a4davm1lgzpamwnba907aysmlrnygbqmfis2mqjx5m552a93z";
        authors = [
          "KokaKiwi <kokakiwi@kokakiwi.net>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "hexasphere" = rec {
        crateName = "hexasphere";
        version = "12.0.0";
        edition = "2018";
        sha256 = "1v286wvxi8x54yvf5jwkhwr2zqls2qsaxvcnfh56n20g2qwb1mpd";
        authors = [
          "OptimisticPeach <patrikbuhring@gmail.com>"
        ];
        dependencies = [
          {
            name = "constgebra";
            packageId = "constgebra";
          }
          {
            name = "glam";
            packageId = "glam";
          }
        ];
        features = {
          "adjacency" = [ "tinyvec" ];
          "tinyvec" = [ "dep:tinyvec" ];
        };
      };
      "hexf-parse" = rec {
        crateName = "hexf-parse";
        version = "0.2.1";
        edition = "2018";
        sha256 = "1pr3a3sk66ddxdyxdxac7q6qaqjcn28v0njy22ghdpfn78l8d9nz";
        authors = [
          "Kang Seonghoon <public+rust@mearie.org>"
        ];

      };
      "hound" = rec {
        crateName = "hound";
        version = "3.5.1";
        edition = "2015";
        sha256 = "0kw5yybfc7hdwxwm6d3m3h4ms52fkw0n0zch35drb52ci2xsmbb2";
        authors = [
          "Ruud van Asseldonk <dev@veniogames.com>"
        ];

      };
      "humansize" = rec {
        crateName = "humansize";
        version = "2.1.3";
        edition = "2021";
        sha256 = "1msxd1akb3dydsa8qs461sds9krwnn31szvqgaq93p4x0ad1rdbc";
        authors = [
          "Leopold Arkham <leopold.arkham@gmail.com>"
        ];
        dependencies = [
          {
            name = "libm";
            packageId = "libm";
          }
        ];
        features = {
        };
      };
      "iana-time-zone" = rec {
        crateName = "iana-time-zone";
        version = "0.1.60";
        edition = "2018";
        sha256 = "0hdid5xz3jznm04lysjm3vi93h3c523w0hcc3xba47jl3ddbpzz7";
        authors = [
          "Andrew Straw <strawman@astraw.com>"
          "René Kijewski <rene.kijewski@fu-berlin.de>"
          "Ryan Lopopolo <rjl@hyperbo.la>"
        ];
        dependencies = [
          {
            name = "android_system_properties";
            packageId = "android_system_properties";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "iana-time-zone-haiku";
            packageId = "iana-time-zone-haiku";
            target = { target, features }: ("haiku" == target."os" or null);
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "windows-core";
            packageId = "windows-core 0.52.0";
            target = { target, features }: ("windows" == target."os" or null);
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "fallback" ];
      };
      "iana-time-zone-haiku" = rec {
        crateName = "iana-time-zone-haiku";
        version = "0.1.2";
        edition = "2018";
        sha256 = "17r6jmj31chn7xs9698r122mapq85mfnv98bb4pg6spm0si2f67k";
        authors = [
          "René Kijewski <crates.io@k6i.de>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "icrate" = rec {
        crateName = "icrate";
        version = "0.0.4";
        edition = "2021";
        sha256 = "06d3g8n6xw3f0ai84mya0dlknp2n33zqdxpxp8272mslibzsmlwr";
        authors = [
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "block2";
            packageId = "block2 0.3.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "dispatch";
            packageId = "dispatch";
            optional = true;
          }
          {
            name = "objc2";
            packageId = "objc2 0.4.1";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "Accessibility" = [ "Foundation" ];
          "Accessibility_all" = [ "Accessibility" "Accessibility_AXBrailleMap" "Accessibility_AXCategoricalDataAxisDescriptor" "Accessibility_AXChartDescriptor" "Accessibility_AXCustomContent" "Accessibility_AXDataPoint" "Accessibility_AXDataPointValue" "Accessibility_AXDataSeriesDescriptor" "Accessibility_AXLiveAudioGraph" "Accessibility_AXNumericDataAxisDescriptor" ];
          "AdServices" = [ "Foundation" ];
          "AdServices_all" = [ "AdServices" "AdServices_AAAttribution" ];
          "AdSupport" = [ "Foundation" ];
          "AdSupport_all" = [ "AdSupport" "AdSupport_ASIdentifierManager" ];
          "AppKit" = [ "CoreData" "Foundation" "AppKit_NSApplication" "AppKit_NSCollectionLayoutSection" "AppKit_NSCollectionLayoutGroupCustomItem" "AppKit_NSCollectionView" "AppKit_NSView" "AppKit_NSTableView" "AppKit_NSTableColumn" "AppKit_NSTableRowView" "Foundation_NSIndexPath" "Foundation_NSArray" "Foundation_NSCoder" ];
          "AppKit_NSATSTypesetter" = [ "AppKit_NSTypesetter" ];
          "AppKit_NSActionCell" = [ "AppKit_NSCell" ];
          "AppKit_NSApplication" = [ "AppKit_NSResponder" ];
          "AppKit_NSArrayController" = [ "AppKit_NSObjectController" ];
          "AppKit_NSBitmapImageRep" = [ "AppKit_NSImageRep" ];
          "AppKit_NSBox" = [ "AppKit_NSView" ];
          "AppKit_NSBrowser" = [ "AppKit_NSControl" ];
          "AppKit_NSBrowserCell" = [ "AppKit_NSCell" ];
          "AppKit_NSButton" = [ "AppKit_NSControl" ];
          "AppKit_NSButtonCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSButtonTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSCachedImageRep" = [ "AppKit_NSImageRep" ];
          "AppKit_NSCandidateListTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSClickGestureRecognizer" = [ "AppKit_NSGestureRecognizer" ];
          "AppKit_NSClipView" = [ "AppKit_NSView" ];
          "AppKit_NSCollectionLayoutBoundarySupplementaryItem" = [ "AppKit_NSCollectionLayoutSupplementaryItem" ];
          "AppKit_NSCollectionLayoutDecorationItem" = [ "AppKit_NSCollectionLayoutItem" ];
          "AppKit_NSCollectionLayoutGroup" = [ "AppKit_NSCollectionLayoutItem" ];
          "AppKit_NSCollectionLayoutSupplementaryItem" = [ "AppKit_NSCollectionLayoutItem" ];
          "AppKit_NSCollectionView" = [ "AppKit_NSView" ];
          "AppKit_NSCollectionViewCompositionalLayout" = [ "AppKit_NSCollectionViewLayout" ];
          "AppKit_NSCollectionViewFlowLayout" = [ "AppKit_NSCollectionViewLayout" ];
          "AppKit_NSCollectionViewFlowLayoutInvalidationContext" = [ "AppKit_NSCollectionViewLayoutInvalidationContext" ];
          "AppKit_NSCollectionViewGridLayout" = [ "AppKit_NSCollectionViewLayout" ];
          "AppKit_NSCollectionViewItem" = [ "AppKit_NSViewController" ];
          "AppKit_NSCollectionViewTransitionLayout" = [ "AppKit_NSCollectionViewLayout" ];
          "AppKit_NSColorPanel" = [ "AppKit_NSPanel" ];
          "AppKit_NSColorPickerTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSColorWell" = [ "AppKit_NSControl" ];
          "AppKit_NSComboBox" = [ "AppKit_NSTextField" ];
          "AppKit_NSComboBoxCell" = [ "AppKit_NSTextFieldCell" ];
          "AppKit_NSComboButton" = [ "AppKit_NSControl" ];
          "AppKit_NSControl" = [ "AppKit_NSView" ];
          "AppKit_NSCustomImageRep" = [ "AppKit_NSImageRep" ];
          "AppKit_NSCustomTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSDatePicker" = [ "AppKit_NSControl" ];
          "AppKit_NSDatePickerCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSDictionaryController" = [ "AppKit_NSArrayController" ];
          "AppKit_NSDrawer" = [ "AppKit_NSResponder" ];
          "AppKit_NSEPSImageRep" = [ "AppKit_NSImageRep" ];
          "AppKit_NSFontPanel" = [ "AppKit_NSPanel" ];
          "AppKit_NSForm" = [ "AppKit_NSMatrix" ];
          "AppKit_NSFormCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSGridView" = [ "AppKit_NSView" ];
          "AppKit_NSGroupTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSImageCell" = [ "AppKit_NSCell" ];
          "AppKit_NSImageView" = [ "AppKit_NSControl" ];
          "AppKit_NSLayoutDimension" = [ "AppKit_NSLayoutAnchor" ];
          "AppKit_NSLayoutXAxisAnchor" = [ "AppKit_NSLayoutAnchor" ];
          "AppKit_NSLayoutYAxisAnchor" = [ "AppKit_NSLayoutAnchor" ];
          "AppKit_NSLevelIndicator" = [ "AppKit_NSControl" ];
          "AppKit_NSLevelIndicatorCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSMagnificationGestureRecognizer" = [ "AppKit_NSGestureRecognizer" ];
          "AppKit_NSMatrix" = [ "AppKit_NSControl" ];
          "AppKit_NSMenuItemCell" = [ "AppKit_NSButtonCell" ];
          "AppKit_NSMenuToolbarItem" = [ "AppKit_NSToolbarItem" ];
          "AppKit_NSMutableFontCollection" = [ "AppKit_NSFontCollection" ];
          "AppKit_NSMutableParagraphStyle" = [ "AppKit_NSParagraphStyle" ];
          "AppKit_NSObjectController" = [ "AppKit_NSController" ];
          "AppKit_NSOpenPanel" = [ "AppKit_NSSavePanel" ];
          "AppKit_NSOutlineView" = [ "AppKit_NSTableView" ];
          "AppKit_NSPDFImageRep" = [ "AppKit_NSImageRep" ];
          "AppKit_NSPICTImageRep" = [ "AppKit_NSImageRep" ];
          "AppKit_NSPageController" = [ "AppKit_NSViewController" ];
          "AppKit_NSPanGestureRecognizer" = [ "AppKit_NSGestureRecognizer" ];
          "AppKit_NSPanel" = [ "AppKit_NSWindow" ];
          "AppKit_NSPathCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSPathComponentCell" = [ "AppKit_NSTextFieldCell" ];
          "AppKit_NSPathControl" = [ "AppKit_NSControl" ];
          "AppKit_NSPersistentDocument" = [ "AppKit_NSDocument" ];
          "AppKit_NSPickerTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSPopUpButton" = [ "AppKit_NSButton" ];
          "AppKit_NSPopUpButtonCell" = [ "AppKit_NSMenuItemCell" ];
          "AppKit_NSPopover" = [ "AppKit_NSResponder" ];
          "AppKit_NSPopoverTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSPredicateEditor" = [ "AppKit_NSRuleEditor" ];
          "AppKit_NSPressGestureRecognizer" = [ "AppKit_NSGestureRecognizer" ];
          "AppKit_NSProgressIndicator" = [ "AppKit_NSView" ];
          "AppKit_NSRotationGestureRecognizer" = [ "AppKit_NSGestureRecognizer" ];
          "AppKit_NSRuleEditor" = [ "AppKit_NSControl" ];
          "AppKit_NSRulerView" = [ "AppKit_NSView" ];
          "AppKit_NSSavePanel" = [ "AppKit_NSPanel" ];
          "AppKit_NSScrollView" = [ "AppKit_NSView" ];
          "AppKit_NSScroller" = [ "AppKit_NSControl" ];
          "AppKit_NSScrubber" = [ "AppKit_NSView" ];
          "AppKit_NSScrubberArrangedView" = [ "AppKit_NSView" ];
          "AppKit_NSScrubberFlowLayout" = [ "AppKit_NSScrubberLayout" ];
          "AppKit_NSScrubberImageItemView" = [ "AppKit_NSScrubberItemView" ];
          "AppKit_NSScrubberItemView" = [ "AppKit_NSScrubberArrangedView" ];
          "AppKit_NSScrubberProportionalLayout" = [ "AppKit_NSScrubberLayout" ];
          "AppKit_NSScrubberSelectionView" = [ "AppKit_NSScrubberArrangedView" ];
          "AppKit_NSScrubberTextItemView" = [ "AppKit_NSScrubberItemView" ];
          "AppKit_NSSearchField" = [ "AppKit_NSTextField" ];
          "AppKit_NSSearchFieldCell" = [ "AppKit_NSTextFieldCell" ];
          "AppKit_NSSearchToolbarItem" = [ "AppKit_NSToolbarItem" ];
          "AppKit_NSSecureTextField" = [ "AppKit_NSTextField" ];
          "AppKit_NSSecureTextFieldCell" = [ "AppKit_NSTextFieldCell" ];
          "AppKit_NSSegmentedCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSSegmentedControl" = [ "AppKit_NSControl" ];
          "AppKit_NSSharingServicePickerToolbarItem" = [ "AppKit_NSToolbarItem" ];
          "AppKit_NSSharingServicePickerTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSSlider" = [ "AppKit_NSControl" ];
          "AppKit_NSSliderCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSSliderTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSSplitView" = [ "AppKit_NSView" ];
          "AppKit_NSSplitViewController" = [ "AppKit_NSViewController" ];
          "AppKit_NSStackView" = [ "AppKit_NSView" ];
          "AppKit_NSStatusBarButton" = [ "AppKit_NSButton" ];
          "AppKit_NSStepper" = [ "AppKit_NSControl" ];
          "AppKit_NSStepperCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSStepperTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSSwitch" = [ "AppKit_NSControl" ];
          "AppKit_NSTabView" = [ "AppKit_NSView" ];
          "AppKit_NSTabViewController" = [ "AppKit_NSViewController" ];
          "AppKit_NSTableCellView" = [ "AppKit_NSView" ];
          "AppKit_NSTableHeaderCell" = [ "AppKit_NSTextFieldCell" ];
          "AppKit_NSTableHeaderView" = [ "AppKit_NSView" ];
          "AppKit_NSTableRowView" = [ "AppKit_NSView" ];
          "AppKit_NSTableView" = [ "AppKit_NSControl" ];
          "AppKit_NSText" = [ "AppKit_NSView" ];
          "AppKit_NSTextAttachmentCell" = [ "AppKit_NSCell" ];
          "AppKit_NSTextContentStorage" = [ "AppKit_NSTextContentManager" ];
          "AppKit_NSTextField" = [ "AppKit_NSControl" ];
          "AppKit_NSTextFieldCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSTextListElement" = [ "AppKit_NSTextParagraph" ];
          "AppKit_NSTextParagraph" = [ "AppKit_NSTextElement" ];
          "AppKit_NSTextStorage" = [ "Foundation_NSMutableAttributedString" ];
          "AppKit_NSTextTable" = [ "AppKit_NSTextBlock" ];
          "AppKit_NSTextTableBlock" = [ "AppKit_NSTextBlock" ];
          "AppKit_NSTextView" = [ "AppKit_NSText" ];
          "AppKit_NSTitlebarAccessoryViewController" = [ "AppKit_NSViewController" ];
          "AppKit_NSTokenField" = [ "AppKit_NSTextField" ];
          "AppKit_NSTokenFieldCell" = [ "AppKit_NSTextFieldCell" ];
          "AppKit_NSToolbarItemGroup" = [ "AppKit_NSToolbarItem" ];
          "AppKit_NSTrackingSeparatorToolbarItem" = [ "AppKit_NSToolbarItem" ];
          "AppKit_NSTreeController" = [ "AppKit_NSObjectController" ];
          "AppKit_NSUserDefaultsController" = [ "AppKit_NSController" ];
          "AppKit_NSView" = [ "AppKit_NSResponder" ];
          "AppKit_NSViewAnimation" = [ "AppKit_NSAnimation" ];
          "AppKit_NSViewController" = [ "AppKit_NSResponder" ];
          "AppKit_NSVisualEffectView" = [ "AppKit_NSView" ];
          "AppKit_NSWindow" = [ "AppKit_NSResponder" ];
          "AppKit_NSWindowController" = [ "AppKit_NSResponder" ];
          "AppKit_all" = [ "AppKit" "AppKit_NSATSTypesetter" "AppKit_NSAccessibilityCustomAction" "AppKit_NSAccessibilityCustomRotor" "AppKit_NSAccessibilityCustomRotorItemResult" "AppKit_NSAccessibilityCustomRotorSearchParameters" "AppKit_NSAccessibilityElement" "AppKit_NSActionCell" "AppKit_NSAlert" "AppKit_NSAlignmentFeedbackFilter" "AppKit_NSAnimation" "AppKit_NSAnimationContext" "AppKit_NSAppearance" "AppKit_NSApplication" "AppKit_NSArrayController" "AppKit_NSBezierPath" "AppKit_NSBindingSelectionMarker" "AppKit_NSBitmapImageRep" "AppKit_NSBox" "AppKit_NSBrowser" "AppKit_NSBrowserCell" "AppKit_NSButton" "AppKit_NSButtonCell" "AppKit_NSButtonTouchBarItem" "AppKit_NSCachedImageRep" "AppKit_NSCandidateListTouchBarItem" "AppKit_NSCell" "AppKit_NSClickGestureRecognizer" "AppKit_NSClipView" "AppKit_NSCollectionLayoutAnchor" "AppKit_NSCollectionLayoutBoundarySupplementaryItem" "AppKit_NSCollectionLayoutDecorationItem" "AppKit_NSCollectionLayoutDimension" "AppKit_NSCollectionLayoutEdgeSpacing" "AppKit_NSCollectionLayoutGroup" "AppKit_NSCollectionLayoutGroupCustomItem" "AppKit_NSCollectionLayoutItem" "AppKit_NSCollectionLayoutSection" "AppKit_NSCollectionLayoutSize" "AppKit_NSCollectionLayoutSpacing" "AppKit_NSCollectionLayoutSupplementaryItem" "AppKit_NSCollectionView" "AppKit_NSCollectionViewCompositionalLayout" "AppKit_NSCollectionViewCompositionalLayoutConfiguration" "AppKit_NSCollectionViewDiffableDataSource" "AppKit_NSCollectionViewFlowLayout" "AppKit_NSCollectionViewFlowLayoutInvalidationContext" "AppKit_NSCollectionViewGridLayout" "AppKit_NSCollectionViewItem" "AppKit_NSCollectionViewLayout" "AppKit_NSCollectionViewLayoutAttributes" "AppKit_NSCollectionViewLayoutInvalidationContext" "AppKit_NSCollectionViewTransitionLayout" "AppKit_NSCollectionViewUpdateItem" "AppKit_NSColor" "AppKit_NSColorList" "AppKit_NSColorPanel" "AppKit_NSColorPicker" "AppKit_NSColorPickerTouchBarItem" "AppKit_NSColorSampler" "AppKit_NSColorSpace" "AppKit_NSColorWell" "AppKit_NSComboBox" "AppKit_NSComboBoxCell" "AppKit_NSComboButton" "AppKit_NSControl" "AppKit_NSController" "AppKit_NSCursor" "AppKit_NSCustomImageRep" "AppKit_NSCustomTouchBarItem" "AppKit_NSDataAsset" "AppKit_NSDatePicker" "AppKit_NSDatePickerCell" "AppKit_NSDictionaryController" "AppKit_NSDictionaryControllerKeyValuePair" "AppKit_NSDiffableDataSourceSnapshot" "AppKit_NSDockTile" "AppKit_NSDocument" "AppKit_NSDocumentController" "AppKit_NSDraggingImageComponent" "AppKit_NSDraggingItem" "AppKit_NSDraggingSession" "AppKit_NSDrawer" "AppKit_NSEPSImageRep" "AppKit_NSEvent" "AppKit_NSFilePromiseProvider" "AppKit_NSFilePromiseReceiver" "AppKit_NSFont" "AppKit_NSFontAssetRequest" "AppKit_NSFontCollection" "AppKit_NSFontDescriptor" "AppKit_NSFontManager" "AppKit_NSFontPanel" "AppKit_NSForm" "AppKit_NSFormCell" "AppKit_NSGestureRecognizer" "AppKit_NSGlyphGenerator" "AppKit_NSGlyphInfo" "AppKit_NSGradient" "AppKit_NSGraphicsContext" "AppKit_NSGridCell" "AppKit_NSGridColumn" "AppKit_NSGridRow" "AppKit_NSGridView" "AppKit_NSGroupTouchBarItem" "AppKit_NSHapticFeedbackManager" "AppKit_NSHelpManager" "AppKit_NSImage" "AppKit_NSImageCell" "AppKit_NSImageRep" "AppKit_NSImageSymbolConfiguration" "AppKit_NSImageView" "AppKit_NSInputManager" "AppKit_NSInputServer" "AppKit_NSLayoutAnchor" "AppKit_NSLayoutConstraint" "AppKit_NSLayoutDimension" "AppKit_NSLayoutGuide" "AppKit_NSLayoutManager" "AppKit_NSLayoutXAxisAnchor" "AppKit_NSLayoutYAxisAnchor" "AppKit_NSLevelIndicator" "AppKit_NSLevelIndicatorCell" "AppKit_NSMagnificationGestureRecognizer" "AppKit_NSMatrix" "AppKit_NSMediaLibraryBrowserController" "AppKit_NSMenu" "AppKit_NSMenuItem" "AppKit_NSMenuItemCell" "AppKit_NSMenuToolbarItem" "AppKit_NSMovie" "AppKit_NSMutableFontCollection" "AppKit_NSMutableParagraphStyle" "AppKit_NSNib" "AppKit_NSObjectController" "AppKit_NSOpenPanel" "AppKit_NSOutlineView" "AppKit_NSPDFImageRep" "AppKit_NSPDFInfo" "AppKit_NSPDFPanel" "AppKit_NSPICTImageRep" "AppKit_NSPageController" "AppKit_NSPageLayout" "AppKit_NSPanGestureRecognizer" "AppKit_NSPanel" "AppKit_NSParagraphStyle" "AppKit_NSPasteboard" "AppKit_NSPasteboardItem" "AppKit_NSPathCell" "AppKit_NSPathComponentCell" "AppKit_NSPathControl" "AppKit_NSPathControlItem" "AppKit_NSPersistentDocument" "AppKit_NSPickerTouchBarItem" "AppKit_NSPopUpButton" "AppKit_NSPopUpButtonCell" "AppKit_NSPopover" "AppKit_NSPopoverTouchBarItem" "AppKit_NSPredicateEditor" "AppKit_NSPredicateEditorRowTemplate" "AppKit_NSPressGestureRecognizer" "AppKit_NSPressureConfiguration" "AppKit_NSPreviewRepresentingActivityItem" "AppKit_NSPrintInfo" "AppKit_NSPrintOperation" "AppKit_NSPrintPanel" "AppKit_NSPrinter" "AppKit_NSProgressIndicator" "AppKit_NSResponder" "AppKit_NSRotationGestureRecognizer" "AppKit_NSRuleEditor" "AppKit_NSRulerMarker" "AppKit_NSRulerView" "AppKit_NSRunningApplication" "AppKit_NSSavePanel" "AppKit_NSScreen" "AppKit_NSScrollView" "AppKit_NSScroller" "AppKit_NSScrubber" "AppKit_NSScrubberArrangedView" "AppKit_NSScrubberFlowLayout" "AppKit_NSScrubberImageItemView" "AppKit_NSScrubberItemView" "AppKit_NSScrubberLayout" "AppKit_NSScrubberLayoutAttributes" "AppKit_NSScrubberProportionalLayout" "AppKit_NSScrubberSelectionStyle" "AppKit_NSScrubberSelectionView" "AppKit_NSScrubberTextItemView" "AppKit_NSSearchField" "AppKit_NSSearchFieldCell" "AppKit_NSSearchToolbarItem" "AppKit_NSSecureTextField" "AppKit_NSSecureTextFieldCell" "AppKit_NSSegmentedCell" "AppKit_NSSegmentedControl" "AppKit_NSShadow" "AppKit_NSSharingService" "AppKit_NSSharingServicePicker" "AppKit_NSSharingServicePickerToolbarItem" "AppKit_NSSharingServicePickerTouchBarItem" "AppKit_NSSlider" "AppKit_NSSliderAccessory" "AppKit_NSSliderAccessoryBehavior" "AppKit_NSSliderCell" "AppKit_NSSliderTouchBarItem" "AppKit_NSSound" "AppKit_NSSpeechRecognizer" "AppKit_NSSpeechSynthesizer" "AppKit_NSSpellChecker" "AppKit_NSSplitView" "AppKit_NSSplitViewController" "AppKit_NSSplitViewItem" "AppKit_NSStackView" "AppKit_NSStatusBar" "AppKit_NSStatusBarButton" "AppKit_NSStatusItem" "AppKit_NSStepper" "AppKit_NSStepperCell" "AppKit_NSStepperTouchBarItem" "AppKit_NSStoryboard" "AppKit_NSStoryboardSegue" "AppKit_NSStringDrawingContext" "AppKit_NSSwitch" "AppKit_NSTabView" "AppKit_NSTabViewController" "AppKit_NSTabViewItem" "AppKit_NSTableCellView" "AppKit_NSTableColumn" "AppKit_NSTableHeaderCell" "AppKit_NSTableHeaderView" "AppKit_NSTableRowView" "AppKit_NSTableView" "AppKit_NSTableViewDiffableDataSource" "AppKit_NSTableViewRowAction" "AppKit_NSText" "AppKit_NSTextAlternatives" "AppKit_NSTextAttachment" "AppKit_NSTextAttachmentCell" "AppKit_NSTextAttachmentViewProvider" "AppKit_NSTextBlock" "AppKit_NSTextCheckingController" "AppKit_NSTextContainer" "AppKit_NSTextContentManager" "AppKit_NSTextContentStorage" "AppKit_NSTextElement" "AppKit_NSTextField" "AppKit_NSTextFieldCell" "AppKit_NSTextFinder" "AppKit_NSTextInputContext" "AppKit_NSTextLayoutFragment" "AppKit_NSTextLayoutManager" "AppKit_NSTextLineFragment" "AppKit_NSTextList" "AppKit_NSTextListElement" "AppKit_NSTextParagraph" "AppKit_NSTextRange" "AppKit_NSTextSelection" "AppKit_NSTextSelectionNavigation" "AppKit_NSTextStorage" "AppKit_NSTextTab" "AppKit_NSTextTable" "AppKit_NSTextTableBlock" "AppKit_NSTextView" "AppKit_NSTextViewportLayoutController" "AppKit_NSTintConfiguration" "AppKit_NSTitlebarAccessoryViewController" "AppKit_NSTokenField" "AppKit_NSTokenFieldCell" "AppKit_NSToolbar" "AppKit_NSToolbarItem" "AppKit_NSToolbarItemGroup" "AppKit_NSTouch" "AppKit_NSTouchBar" "AppKit_NSTouchBarItem" "AppKit_NSTrackingArea" "AppKit_NSTrackingSeparatorToolbarItem" "AppKit_NSTreeController" "AppKit_NSTreeNode" "AppKit_NSTypesetter" "AppKit_NSUserDefaultsController" "AppKit_NSUserInterfaceCompressionOptions" "AppKit_NSView" "AppKit_NSViewAnimation" "AppKit_NSViewController" "AppKit_NSVisualEffectView" "AppKit_NSWindow" "AppKit_NSWindowController" "AppKit_NSWindowTab" "AppKit_NSWindowTabGroup" "AppKit_NSWorkspace" "AppKit_NSWorkspaceAuthorization" "AppKit_NSWorkspaceOpenConfiguration" ];
          "AuthenticationServices" = [ "AppKit" "Foundation" "Foundation_NSURL" ];
          "AuthenticationServices_ASAccountAuthenticationModificationExtensionContext" = [ "Foundation_NSExtensionContext" ];
          "AuthenticationServices_ASAccountAuthenticationModificationReplacePasswordWithSignInWithAppleRequest" = [ "AuthenticationServices_ASAccountAuthenticationModificationRequest" ];
          "AuthenticationServices_ASAccountAuthenticationModificationUpgradePasswordToStrongPasswordRequest" = [ "AuthenticationServices_ASAccountAuthenticationModificationRequest" ];
          "AuthenticationServices_ASAccountAuthenticationModificationViewController" = [ "AppKit_NSViewController" ];
          "AuthenticationServices_ASAuthorizationAppleIDButton" = [ "AppKit_NSControl" ];
          "AuthenticationServices_ASAuthorizationAppleIDRequest" = [ "AuthenticationServices_ASAuthorizationOpenIDRequest" ];
          "AuthenticationServices_ASAuthorizationOpenIDRequest" = [ "AuthenticationServices_ASAuthorizationRequest" ];
          "AuthenticationServices_ASAuthorizationPasswordRequest" = [ "AuthenticationServices_ASAuthorizationRequest" ];
          "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialAssertionRequest" = [ "AuthenticationServices_ASAuthorizationRequest" ];
          "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest" = [ "AuthenticationServices_ASAuthorizationRequest" ];
          "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialAssertionRequest" = [ "AuthenticationServices_ASAuthorizationRequest" ];
          "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest" = [ "AuthenticationServices_ASAuthorizationRequest" ];
          "AuthenticationServices_ASAuthorizationSingleSignOnRequest" = [ "AuthenticationServices_ASAuthorizationOpenIDRequest" ];
          "AuthenticationServices_ASCredentialProviderExtensionContext" = [ "Foundation_NSExtensionContext" ];
          "AuthenticationServices_ASCredentialProviderViewController" = [ "AppKit_NSViewController" ];
          "AuthenticationServices_all" = [ "AuthenticationServices" "AuthenticationServices_ASAccountAuthenticationModificationController" "AuthenticationServices_ASAccountAuthenticationModificationExtensionContext" "AuthenticationServices_ASAccountAuthenticationModificationReplacePasswordWithSignInWithAppleRequest" "AuthenticationServices_ASAccountAuthenticationModificationRequest" "AuthenticationServices_ASAccountAuthenticationModificationUpgradePasswordToStrongPasswordRequest" "AuthenticationServices_ASAccountAuthenticationModificationViewController" "AuthenticationServices_ASAuthorization" "AuthenticationServices_ASAuthorizationAppleIDButton" "AuthenticationServices_ASAuthorizationAppleIDCredential" "AuthenticationServices_ASAuthorizationAppleIDProvider" "AuthenticationServices_ASAuthorizationAppleIDRequest" "AuthenticationServices_ASAuthorizationController" "AuthenticationServices_ASAuthorizationOpenIDRequest" "AuthenticationServices_ASAuthorizationPasswordProvider" "AuthenticationServices_ASAuthorizationPasswordRequest" "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialAssertion" "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialAssertionRequest" "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialDescriptor" "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialProvider" "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialRegistration" "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest" "AuthenticationServices_ASAuthorizationProviderExtensionAuthorizationRequest" "AuthenticationServices_ASAuthorizationProviderExtensionAuthorizationResult" "AuthenticationServices_ASAuthorizationProviderExtensionKerberosMapping" "AuthenticationServices_ASAuthorizationProviderExtensionLoginConfiguration" "AuthenticationServices_ASAuthorizationProviderExtensionLoginManager" "AuthenticationServices_ASAuthorizationPublicKeyCredentialParameters" "AuthenticationServices_ASAuthorizationRequest" "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialAssertion" "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialAssertionRequest" "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialDescriptor" "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialProvider" "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialRegistration" "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest" "AuthenticationServices_ASAuthorizationSingleSignOnCredential" "AuthenticationServices_ASAuthorizationSingleSignOnProvider" "AuthenticationServices_ASAuthorizationSingleSignOnRequest" "AuthenticationServices_ASCredentialIdentityStore" "AuthenticationServices_ASCredentialIdentityStoreState" "AuthenticationServices_ASCredentialProviderExtensionContext" "AuthenticationServices_ASCredentialProviderViewController" "AuthenticationServices_ASCredentialServiceIdentifier" "AuthenticationServices_ASPasswordCredential" "AuthenticationServices_ASPasswordCredentialIdentity" "AuthenticationServices_ASWebAuthenticationSession" "AuthenticationServices_ASWebAuthenticationSessionRequest" "AuthenticationServices_ASWebAuthenticationSessionWebBrowserSessionManager" ];
          "AutomaticAssessmentConfiguration" = [ "Foundation" ];
          "AutomaticAssessmentConfiguration_all" = [ "AutomaticAssessmentConfiguration" "AutomaticAssessmentConfiguration_AEAssessmentApplication" "AutomaticAssessmentConfiguration_AEAssessmentConfiguration" "AutomaticAssessmentConfiguration_AEAssessmentParticipantConfiguration" "AutomaticAssessmentConfiguration_AEAssessmentSession" ];
          "Automator" = [ "AppKit" "Foundation" "OSAKit" ];
          "Automator_AMAppleScriptAction" = [ "Automator_AMBundleAction" ];
          "Automator_AMBundleAction" = [ "Automator_AMAction" ];
          "Automator_AMShellScriptAction" = [ "Automator_AMBundleAction" ];
          "Automator_AMWorkflowController" = [ "AppKit_NSController" ];
          "Automator_AMWorkflowView" = [ "AppKit_NSView" ];
          "Automator_all" = [ "Automator" "Automator_AMAction" "Automator_AMAppleScriptAction" "Automator_AMBundleAction" "Automator_AMShellScriptAction" "Automator_AMWorkflow" "Automator_AMWorkflowController" "Automator_AMWorkflowView" "Automator_AMWorkspace" ];
          "BackgroundAssets" = [ "Foundation" ];
          "BackgroundAssets_BAURLDownload" = [ "BackgroundAssets_BADownload" ];
          "BackgroundAssets_all" = [ "BackgroundAssets" "BackgroundAssets_BAAppExtensionInfo" "BackgroundAssets_BADownload" "BackgroundAssets_BADownloadManager" "BackgroundAssets_BAURLDownload" ];
          "BackgroundTasks" = [ "Foundation" ];
          "BackgroundTasks_BGAppRefreshTask" = [ "BackgroundTasks_BGTask" ];
          "BackgroundTasks_BGAppRefreshTaskRequest" = [ "BackgroundTasks_BGTaskRequest" ];
          "BackgroundTasks_BGProcessingTask" = [ "BackgroundTasks_BGTask" ];
          "BackgroundTasks_BGProcessingTaskRequest" = [ "BackgroundTasks_BGTaskRequest" ];
          "BackgroundTasks_all" = [ "BackgroundTasks" "BackgroundTasks_BGAppRefreshTask" "BackgroundTasks_BGAppRefreshTaskRequest" "BackgroundTasks_BGProcessingTask" "BackgroundTasks_BGProcessingTaskRequest" "BackgroundTasks_BGTask" "BackgroundTasks_BGTaskRequest" "BackgroundTasks_BGTaskScheduler" ];
          "BusinessChat" = [ "AppKit" "Foundation" ];
          "BusinessChat_BCChatButton" = [ "AppKit_NSControl" ];
          "BusinessChat_all" = [ "BusinessChat" "BusinessChat_BCChatAction" "BusinessChat_BCChatButton" ];
          "CallKit" = [ "Foundation" ];
          "CallKit_CXAnswerCallAction" = [ "CallKit_CXCallAction" ];
          "CallKit_CXCallAction" = [ "CallKit_CXAction" ];
          "CallKit_CXCallDirectoryExtensionContext" = [ "Foundation_NSExtensionContext" ];
          "CallKit_CXEndCallAction" = [ "CallKit_CXCallAction" ];
          "CallKit_CXPlayDTMFCallAction" = [ "CallKit_CXCallAction" ];
          "CallKit_CXSetGroupCallAction" = [ "CallKit_CXCallAction" ];
          "CallKit_CXSetHeldCallAction" = [ "CallKit_CXCallAction" ];
          "CallKit_CXSetMutedCallAction" = [ "CallKit_CXCallAction" ];
          "CallKit_CXStartCallAction" = [ "CallKit_CXCallAction" ];
          "CallKit_all" = [ "CallKit" "CallKit_CXAction" "CallKit_CXAnswerCallAction" "CallKit_CXCall" "CallKit_CXCallAction" "CallKit_CXCallController" "CallKit_CXCallDirectoryExtensionContext" "CallKit_CXCallDirectoryManager" "CallKit_CXCallDirectoryProvider" "CallKit_CXCallObserver" "CallKit_CXCallUpdate" "CallKit_CXEndCallAction" "CallKit_CXHandle" "CallKit_CXPlayDTMFCallAction" "CallKit_CXProvider" "CallKit_CXProviderConfiguration" "CallKit_CXSetGroupCallAction" "CallKit_CXSetHeldCallAction" "CallKit_CXSetMutedCallAction" "CallKit_CXStartCallAction" "CallKit_CXTransaction" ];
          "ClassKit" = [ "Foundation" ];
          "ClassKit_CLSActivity" = [ "ClassKit_CLSObject" ];
          "ClassKit_CLSActivityItem" = [ "ClassKit_CLSObject" ];
          "ClassKit_CLSBinaryItem" = [ "ClassKit_CLSActivityItem" ];
          "ClassKit_CLSContext" = [ "ClassKit_CLSObject" ];
          "ClassKit_CLSProgressReportingCapability" = [ "ClassKit_CLSObject" ];
          "ClassKit_CLSQuantityItem" = [ "ClassKit_CLSActivityItem" ];
          "ClassKit_CLSScoreItem" = [ "ClassKit_CLSActivityItem" ];
          "ClassKit_all" = [ "ClassKit" "ClassKit_CLSActivity" "ClassKit_CLSActivityItem" "ClassKit_CLSBinaryItem" "ClassKit_CLSContext" "ClassKit_CLSDataStore" "ClassKit_CLSObject" "ClassKit_CLSProgressReportingCapability" "ClassKit_CLSQuantityItem" "ClassKit_CLSScoreItem" ];
          "CloudKit" = [ "CoreLocation" "Foundation" "CloudKit_CKShare" ];
          "CloudKit_CKAcceptSharesOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKDatabaseNotification" = [ "CloudKit_CKNotification" ];
          "CloudKit_CKDatabaseOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKDatabaseSubscription" = [ "CloudKit_CKSubscription" ];
          "CloudKit_CKDiscoverAllUserIdentitiesOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKDiscoverUserIdentitiesOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKFetchDatabaseChangesOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKFetchNotificationChangesOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKFetchRecordChangesOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKFetchRecordZoneChangesOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKFetchRecordZonesOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKFetchRecordsOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKFetchShareMetadataOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKFetchShareParticipantsOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKFetchSubscriptionsOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKFetchWebAuthTokenOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKLocationSortDescriptor" = [ "Foundation_NSSortDescriptor" ];
          "CloudKit_CKMarkNotificationsReadOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKModifyBadgeOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKModifyRecordZonesOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKModifyRecordsOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKModifySubscriptionsOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKOperation" = [ "Foundation_NSOperation" ];
          "CloudKit_CKQueryNotification" = [ "CloudKit_CKNotification" ];
          "CloudKit_CKQueryOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKQuerySubscription" = [ "CloudKit_CKSubscription" ];
          "CloudKit_CKRecordZoneNotification" = [ "CloudKit_CKNotification" ];
          "CloudKit_CKRecordZoneSubscription" = [ "CloudKit_CKSubscription" ];
          "CloudKit_CKShare" = [ "CloudKit_CKRecord" ];
          "CloudKit_all" = [ "CloudKit" "CloudKit_CKAcceptSharesOperation" "CloudKit_CKAllowedSharingOptions" "CloudKit_CKAsset" "CloudKit_CKContainer" "CloudKit_CKDatabase" "CloudKit_CKDatabaseNotification" "CloudKit_CKDatabaseOperation" "CloudKit_CKDatabaseSubscription" "CloudKit_CKDiscoverAllUserIdentitiesOperation" "CloudKit_CKDiscoverUserIdentitiesOperation" "CloudKit_CKFetchDatabaseChangesOperation" "CloudKit_CKFetchNotificationChangesOperation" "CloudKit_CKFetchRecordChangesOperation" "CloudKit_CKFetchRecordZoneChangesConfiguration" "CloudKit_CKFetchRecordZoneChangesOperation" "CloudKit_CKFetchRecordZoneChangesOptions" "CloudKit_CKFetchRecordZonesOperation" "CloudKit_CKFetchRecordsOperation" "CloudKit_CKFetchShareMetadataOperation" "CloudKit_CKFetchShareParticipantsOperation" "CloudKit_CKFetchSubscriptionsOperation" "CloudKit_CKFetchWebAuthTokenOperation" "CloudKit_CKLocationSortDescriptor" "CloudKit_CKMarkNotificationsReadOperation" "CloudKit_CKModifyBadgeOperation" "CloudKit_CKModifyRecordZonesOperation" "CloudKit_CKModifyRecordsOperation" "CloudKit_CKModifySubscriptionsOperation" "CloudKit_CKNotification" "CloudKit_CKNotificationID" "CloudKit_CKNotificationInfo" "CloudKit_CKOperation" "CloudKit_CKOperationConfiguration" "CloudKit_CKOperationGroup" "CloudKit_CKQuery" "CloudKit_CKQueryCursor" "CloudKit_CKQueryNotification" "CloudKit_CKQueryOperation" "CloudKit_CKQuerySubscription" "CloudKit_CKRecord" "CloudKit_CKRecordID" "CloudKit_CKRecordZone" "CloudKit_CKRecordZoneID" "CloudKit_CKRecordZoneNotification" "CloudKit_CKRecordZoneSubscription" "CloudKit_CKReference" "CloudKit_CKServerChangeToken" "CloudKit_CKShare" "CloudKit_CKShareMetadata" "CloudKit_CKShareParticipant" "CloudKit_CKSubscription" "CloudKit_CKSystemSharingUIObserver" "CloudKit_CKUserIdentity" "CloudKit_CKUserIdentityLookupInfo" ];
          "Contacts" = [ "Foundation" ];
          "Contacts_CNChangeHistoryAddContactEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryAddGroupEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryAddMemberToGroupEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryAddSubgroupToGroupEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryDeleteContactEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryDeleteGroupEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryDropEverythingEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryFetchRequest" = [ "Contacts_CNFetchRequest" ];
          "Contacts_CNChangeHistoryRemoveMemberFromGroupEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryRemoveSubgroupFromGroupEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryUpdateContactEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryUpdateGroupEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNContactFetchRequest" = [ "Contacts_CNFetchRequest" ];
          "Contacts_CNContactFormatter" = [ "Foundation_NSFormatter" ];
          "Contacts_CNMutableContact" = [ "Contacts_CNContact" ];
          "Contacts_CNMutableGroup" = [ "Contacts_CNGroup" ];
          "Contacts_CNMutablePostalAddress" = [ "Contacts_CNPostalAddress" ];
          "Contacts_CNPostalAddressFormatter" = [ "Foundation_NSFormatter" ];
          "Contacts_all" = [ "Contacts" "Contacts_CNChangeHistoryAddContactEvent" "Contacts_CNChangeHistoryAddGroupEvent" "Contacts_CNChangeHistoryAddMemberToGroupEvent" "Contacts_CNChangeHistoryAddSubgroupToGroupEvent" "Contacts_CNChangeHistoryDeleteContactEvent" "Contacts_CNChangeHistoryDeleteGroupEvent" "Contacts_CNChangeHistoryDropEverythingEvent" "Contacts_CNChangeHistoryEvent" "Contacts_CNChangeHistoryFetchRequest" "Contacts_CNChangeHistoryRemoveMemberFromGroupEvent" "Contacts_CNChangeHistoryRemoveSubgroupFromGroupEvent" "Contacts_CNChangeHistoryUpdateContactEvent" "Contacts_CNChangeHistoryUpdateGroupEvent" "Contacts_CNContact" "Contacts_CNContactFetchRequest" "Contacts_CNContactFormatter" "Contacts_CNContactProperty" "Contacts_CNContactRelation" "Contacts_CNContactStore" "Contacts_CNContactVCardSerialization" "Contacts_CNContactsUserDefaults" "Contacts_CNContainer" "Contacts_CNFetchRequest" "Contacts_CNFetchResult" "Contacts_CNGroup" "Contacts_CNInstantMessageAddress" "Contacts_CNLabeledValue" "Contacts_CNMutableContact" "Contacts_CNMutableGroup" "Contacts_CNMutablePostalAddress" "Contacts_CNPhoneNumber" "Contacts_CNPostalAddress" "Contacts_CNPostalAddressFormatter" "Contacts_CNSaveRequest" "Contacts_CNSocialProfile" ];
          "CoreAnimation" = [ "Foundation" ];
          "CoreAnimation_CAAnimationGroup" = [ "CoreAnimation_CAAnimation" ];
          "CoreAnimation_CABasicAnimation" = [ "CoreAnimation_CAPropertyAnimation" ];
          "CoreAnimation_CAEmitterLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CAGradientLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CAKeyframeAnimation" = [ "CoreAnimation_CAPropertyAnimation" ];
          "CoreAnimation_CAPropertyAnimation" = [ "CoreAnimation_CAAnimation" ];
          "CoreAnimation_CAReplicatorLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CAScrollLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CAShapeLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CASpringAnimation" = [ "CoreAnimation_CABasicAnimation" ];
          "CoreAnimation_CATextLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CATiledLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CATransformLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CATransition" = [ "CoreAnimation_CAAnimation" ];
          "CoreAnimation_all" = [ "CoreAnimation" "CoreAnimation_CAAnimation" "CoreAnimation_CAAnimationGroup" "CoreAnimation_CABasicAnimation" "CoreAnimation_CAConstraint" "CoreAnimation_CAConstraintLayoutManager" "CoreAnimation_CADisplayLink" "CoreAnimation_CAEDRMetadata" "CoreAnimation_CAEmitterCell" "CoreAnimation_CAEmitterLayer" "CoreAnimation_CAGradientLayer" "CoreAnimation_CAKeyframeAnimation" "CoreAnimation_CALayer" "CoreAnimation_CAMediaTimingFunction" "CoreAnimation_CAPropertyAnimation" "CoreAnimation_CARemoteLayerClient" "CoreAnimation_CARemoteLayerServer" "CoreAnimation_CARenderer" "CoreAnimation_CAReplicatorLayer" "CoreAnimation_CAScrollLayer" "CoreAnimation_CAShapeLayer" "CoreAnimation_CASpringAnimation" "CoreAnimation_CATextLayer" "CoreAnimation_CATiledLayer" "CoreAnimation_CATransaction" "CoreAnimation_CATransformLayer" "CoreAnimation_CATransition" "CoreAnimation_CAValueFunction" ];
          "CoreData" = [ "Foundation" "CoreData_NSAsynchronousFetchResult" ];
          "CoreData_NSAsynchronousFetchRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_NSAsynchronousFetchResult" = [ "CoreData_NSPersistentStoreAsynchronousResult" ];
          "CoreData_NSAtomicStore" = [ "CoreData_NSPersistentStore" ];
          "CoreData_NSAttributeDescription" = [ "CoreData_NSPropertyDescription" ];
          "CoreData_NSBatchDeleteRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_NSBatchDeleteResult" = [ "CoreData_NSPersistentStoreResult" ];
          "CoreData_NSBatchInsertRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_NSBatchInsertResult" = [ "CoreData_NSPersistentStoreResult" ];
          "CoreData_NSBatchUpdateRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_NSBatchUpdateResult" = [ "CoreData_NSPersistentStoreResult" ];
          "CoreData_NSDerivedAttributeDescription" = [ "CoreData_NSAttributeDescription" ];
          "CoreData_NSExpressionDescription" = [ "CoreData_NSPropertyDescription" ];
          "CoreData_NSFetchRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_NSFetchRequestExpression" = [ "Foundation_NSExpression" ];
          "CoreData_NSFetchedPropertyDescription" = [ "CoreData_NSPropertyDescription" ];
          "CoreData_NSIncrementalStore" = [ "CoreData_NSPersistentStore" ];
          "CoreData_NSPersistentCloudKitContainer" = [ "CoreData_NSPersistentContainer" ];
          "CoreData_NSPersistentCloudKitContainerEventRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_NSPersistentCloudKitContainerEventResult" = [ "CoreData_NSPersistentStoreResult" ];
          "CoreData_NSPersistentHistoryChangeRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_NSPersistentHistoryResult" = [ "CoreData_NSPersistentStoreResult" ];
          "CoreData_NSPersistentStoreAsynchronousResult" = [ "CoreData_NSPersistentStoreResult" ];
          "CoreData_NSRelationshipDescription" = [ "CoreData_NSPropertyDescription" ];
          "CoreData_NSSaveChangesRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_all" = [ "CoreData" "CoreData_NSAsynchronousFetchRequest" "CoreData_NSAsynchronousFetchResult" "CoreData_NSAtomicStore" "CoreData_NSAtomicStoreCacheNode" "CoreData_NSAttributeDescription" "CoreData_NSBatchDeleteRequest" "CoreData_NSBatchDeleteResult" "CoreData_NSBatchInsertRequest" "CoreData_NSBatchInsertResult" "CoreData_NSBatchUpdateRequest" "CoreData_NSBatchUpdateResult" "CoreData_NSConstraintConflict" "CoreData_NSCoreDataCoreSpotlightDelegate" "CoreData_NSDerivedAttributeDescription" "CoreData_NSEntityDescription" "CoreData_NSEntityMapping" "CoreData_NSEntityMigrationPolicy" "CoreData_NSExpressionDescription" "CoreData_NSFetchIndexDescription" "CoreData_NSFetchIndexElementDescription" "CoreData_NSFetchRequest" "CoreData_NSFetchRequestExpression" "CoreData_NSFetchedPropertyDescription" "CoreData_NSFetchedResultsController" "CoreData_NSIncrementalStore" "CoreData_NSIncrementalStoreNode" "CoreData_NSManagedObject" "CoreData_NSManagedObjectContext" "CoreData_NSManagedObjectID" "CoreData_NSManagedObjectModel" "CoreData_NSMappingModel" "CoreData_NSMergeConflict" "CoreData_NSMergePolicy" "CoreData_NSMigrationManager" "CoreData_NSPersistentCloudKitContainer" "CoreData_NSPersistentCloudKitContainerEvent" "CoreData_NSPersistentCloudKitContainerEventRequest" "CoreData_NSPersistentCloudKitContainerEventResult" "CoreData_NSPersistentCloudKitContainerOptions" "CoreData_NSPersistentContainer" "CoreData_NSPersistentHistoryChange" "CoreData_NSPersistentHistoryChangeRequest" "CoreData_NSPersistentHistoryResult" "CoreData_NSPersistentHistoryToken" "CoreData_NSPersistentHistoryTransaction" "CoreData_NSPersistentStore" "CoreData_NSPersistentStoreAsynchronousResult" "CoreData_NSPersistentStoreCoordinator" "CoreData_NSPersistentStoreDescription" "CoreData_NSPersistentStoreRequest" "CoreData_NSPersistentStoreResult" "CoreData_NSPropertyDescription" "CoreData_NSPropertyMapping" "CoreData_NSQueryGenerationToken" "CoreData_NSRelationshipDescription" "CoreData_NSSaveChangesRequest" ];
          "CoreLocation" = [ "Contacts" "Foundation" "CoreLocation_CLPlacemark" ];
          "CoreLocation_CLBeaconRegion" = [ "CoreLocation_CLRegion" ];
          "CoreLocation_CLCircularRegion" = [ "CoreLocation_CLRegion" ];
          "CoreLocation_all" = [ "CoreLocation" "CoreLocation_CLBeacon" "CoreLocation_CLBeaconIdentityConstraint" "CoreLocation_CLBeaconRegion" "CoreLocation_CLCircularRegion" "CoreLocation_CLFloor" "CoreLocation_CLGeocoder" "CoreLocation_CLHeading" "CoreLocation_CLLocation" "CoreLocation_CLLocationManager" "CoreLocation_CLLocationSourceInformation" "CoreLocation_CLPlacemark" "CoreLocation_CLRegion" "CoreLocation_CLVisit" ];
          "DataDetection" = [ "Foundation" ];
          "DataDetection_DDMatchCalendarEvent" = [ "DataDetection_DDMatch" ];
          "DataDetection_DDMatchEmailAddress" = [ "DataDetection_DDMatch" ];
          "DataDetection_DDMatchFlightNumber" = [ "DataDetection_DDMatch" ];
          "DataDetection_DDMatchLink" = [ "DataDetection_DDMatch" ];
          "DataDetection_DDMatchMoneyAmount" = [ "DataDetection_DDMatch" ];
          "DataDetection_DDMatchPhoneNumber" = [ "DataDetection_DDMatch" ];
          "DataDetection_DDMatchPostalAddress" = [ "DataDetection_DDMatch" ];
          "DataDetection_DDMatchShipmentTrackingNumber" = [ "DataDetection_DDMatch" ];
          "DataDetection_all" = [ "DataDetection" "DataDetection_DDMatch" "DataDetection_DDMatchCalendarEvent" "DataDetection_DDMatchEmailAddress" "DataDetection_DDMatchFlightNumber" "DataDetection_DDMatchLink" "DataDetection_DDMatchMoneyAmount" "DataDetection_DDMatchPhoneNumber" "DataDetection_DDMatchPostalAddress" "DataDetection_DDMatchShipmentTrackingNumber" ];
          "DeviceCheck" = [ "Foundation" ];
          "DeviceCheck_all" = [ "DeviceCheck" "DeviceCheck_DCAppAttestService" "DeviceCheck_DCDevice" ];
          "EventKit" = [ "AppKit" "CoreLocation" "Foundation" "MapKit" "EventKit_EKEvent" ];
          "EventKit_EKAlarm" = [ "EventKit_EKObject" ];
          "EventKit_EKCalendar" = [ "EventKit_EKObject" ];
          "EventKit_EKCalendarItem" = [ "EventKit_EKObject" ];
          "EventKit_EKEvent" = [ "EventKit_EKCalendarItem" ];
          "EventKit_EKParticipant" = [ "EventKit_EKObject" ];
          "EventKit_EKRecurrenceRule" = [ "EventKit_EKObject" ];
          "EventKit_EKReminder" = [ "EventKit_EKCalendarItem" ];
          "EventKit_EKSource" = [ "EventKit_EKObject" ];
          "EventKit_EKStructuredLocation" = [ "EventKit_EKObject" ];
          "EventKit_all" = [ "EventKit" "EventKit_EKAlarm" "EventKit_EKCalendar" "EventKit_EKCalendarItem" "EventKit_EKEvent" "EventKit_EKEventStore" "EventKit_EKObject" "EventKit_EKParticipant" "EventKit_EKRecurrenceDayOfWeek" "EventKit_EKRecurrenceEnd" "EventKit_EKRecurrenceRule" "EventKit_EKReminder" "EventKit_EKSource" "EventKit_EKStructuredLocation" "EventKit_EKVirtualConferenceDescriptor" "EventKit_EKVirtualConferenceProvider" "EventKit_EKVirtualConferenceRoomTypeDescriptor" "EventKit_EKVirtualConferenceURLDescriptor" ];
          "ExceptionHandling" = [ "Foundation" ];
          "ExceptionHandling_all" = [ "ExceptionHandling" "ExceptionHandling_NSExceptionHandler" ];
          "ExtensionKit" = [ "AppKit" "Foundation" ];
          "ExtensionKit_EXAppExtensionBrowserViewController" = [ "AppKit_NSViewController" ];
          "ExtensionKit_EXHostViewController" = [ "AppKit_NSViewController" ];
          "ExtensionKit_all" = [ "ExtensionKit" "ExtensionKit_EXAppExtensionBrowserViewController" "ExtensionKit_EXHostViewController" ];
          "ExternalAccessory" = [ "Foundation" ];
          "ExternalAccessory_all" = [ "ExternalAccessory" "ExternalAccessory_EAAccessory" "ExternalAccessory_EAAccessoryManager" "ExternalAccessory_EASession" "ExternalAccessory_EAWiFiUnconfiguredAccessory" "ExternalAccessory_EAWiFiUnconfiguredAccessoryBrowser" ];
          "FileProvider" = [ "AppKit" "Foundation" "UniformTypeIdentifiers" ];
          "FileProviderUI" = [ "AppKit" "FileProvider" "Foundation" ];
          "FileProviderUI_FPUIActionExtensionContext" = [ "Foundation_NSExtensionContext" ];
          "FileProviderUI_FPUIActionExtensionViewController" = [ "AppKit_NSViewController" ];
          "FileProviderUI_all" = [ "FileProviderUI" "FileProviderUI_FPUIActionExtensionContext" "FileProviderUI_FPUIActionExtensionViewController" ];
          "FileProvider_all" = [ "FileProvider" "FileProvider_NSFileProviderDomain" "FileProvider_NSFileProviderDomainVersion" "FileProvider_NSFileProviderExtension" "FileProvider_NSFileProviderItemVersion" "FileProvider_NSFileProviderManager" "FileProvider_NSFileProviderRequest" ];
          "Foundation" = [ "objective-c" "block" "Foundation_NSError" "Foundation_NSAppleEventDescriptor" "Foundation_NSHashTable" "Foundation_NSMapTable" "Foundation_NSProgress" "Foundation_NSString" "Foundation_NSDictionary" "Foundation_NSEnumerator" ];
          "Foundation_NSArchiver" = [ "Foundation_NSCoder" ];
          "Foundation_NSBlockOperation" = [ "Foundation_NSOperation" ];
          "Foundation_NSByteCountFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSCalendarDate" = [ "Foundation_NSDate" ];
          "Foundation_NSCloneCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSCloseCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSComparisonPredicate" = [ "Foundation_NSPredicate" ];
          "Foundation_NSCompoundPredicate" = [ "Foundation_NSPredicate" ];
          "Foundation_NSConstantString" = [ "Foundation_NSSimpleCString" ];
          "Foundation_NSCountCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSCountedSet" = [ "Foundation_NSMutableSet" ];
          "Foundation_NSCreateCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSDataDetector" = [ "Foundation_NSRegularExpression" ];
          "Foundation_NSDateComponentsFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSDateFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSDateIntervalFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSDecimalNumber" = [ "Foundation_NSNumber" ];
          "Foundation_NSDeleteCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSDimension" = [ "Foundation_NSUnit" ];
          "Foundation_NSDirectoryEnumerator" = [ "Foundation_NSEnumerator" ];
          "Foundation_NSDistantObject" = [ "Foundation_NSProxy" ];
          "Foundation_NSDistributedNotificationCenter" = [ "Foundation_NSNotificationCenter" ];
          "Foundation_NSEnergyFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSExistsCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSGetCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSHTTPURLResponse" = [ "Foundation_NSURLResponse" ];
          "Foundation_NSISO8601DateFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSIndexSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSInflectionRuleExplicit" = [ "Foundation_NSInflectionRule" ];
          "Foundation_NSInputStream" = [ "Foundation_NSStream" ];
          "Foundation_NSInvocationOperation" = [ "Foundation_NSOperation" ];
          "Foundation_NSKeyedArchiver" = [ "Foundation_NSCoder" ];
          "Foundation_NSKeyedUnarchiver" = [ "Foundation_NSCoder" ];
          "Foundation_NSLengthFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSListFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSLogicalTest" = [ "Foundation_NSScriptWhoseTest" ];
          "Foundation_NSMachBootstrapServer" = [ "Foundation_NSPortNameServer" ];
          "Foundation_NSMachPort" = [ "Foundation_NSPort" ];
          "Foundation_NSMassFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSMeasurementFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSMessagePort" = [ "Foundation_NSPort" ];
          "Foundation_NSMessagePortNameServer" = [ "Foundation_NSPortNameServer" ];
          "Foundation_NSMiddleSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSMoveCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSMutableArray" = [ "Foundation_NSArray" ];
          "Foundation_NSMutableAttributedString" = [ "Foundation_NSAttributedString" ];
          "Foundation_NSMutableCharacterSet" = [ "Foundation_NSCharacterSet" ];
          "Foundation_NSMutableData" = [ "Foundation_NSData" ];
          "Foundation_NSMutableDictionary" = [ "Foundation_NSDictionary" ];
          "Foundation_NSMutableIndexSet" = [ "Foundation_NSIndexSet" ];
          "Foundation_NSMutableOrderedSet" = [ "Foundation_NSOrderedSet" ];
          "Foundation_NSMutableSet" = [ "Foundation_NSSet" ];
          "Foundation_NSMutableString" = [ "Foundation_NSString" ];
          "Foundation_NSMutableURLRequest" = [ "Foundation_NSURLRequest" ];
          "Foundation_NSNameSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSNumber" = [ "Foundation_NSValue" ];
          "Foundation_NSNumberFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSOutputStream" = [ "Foundation_NSStream" ];
          "Foundation_NSPersonNameComponentsFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSPortCoder" = [ "Foundation_NSCoder" ];
          "Foundation_NSPropertySpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSProtocolChecker" = [ "Foundation_NSProxy" ];
          "Foundation_NSPurgeableData" = [ "Foundation_NSMutableData" ];
          "Foundation_NSQuitCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSRandomSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSRangeSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSRelativeDateTimeFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSRelativeSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSScriptClassDescription" = [ "Foundation_NSClassDescription" ];
          "Foundation_NSSecureUnarchiveFromDataTransformer" = [ "Foundation_NSValueTransformer" ];
          "Foundation_NSSetCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSSimpleCString" = [ "Foundation_NSString" ];
          "Foundation_NSSocketPort" = [ "Foundation_NSPort" ];
          "Foundation_NSSocketPortNameServer" = [ "Foundation_NSPortNameServer" ];
          "Foundation_NSSpecifierTest" = [ "Foundation_NSScriptWhoseTest" ];
          "Foundation_NSURLSessionDataTask" = [ "Foundation_NSURLSessionTask" ];
          "Foundation_NSURLSessionDownloadTask" = [ "Foundation_NSURLSessionTask" ];
          "Foundation_NSURLSessionStreamTask" = [ "Foundation_NSURLSessionTask" ];
          "Foundation_NSURLSessionUploadTask" = [ "Foundation_NSURLSessionDataTask" ];
          "Foundation_NSURLSessionWebSocketTask" = [ "Foundation_NSURLSessionTask" ];
          "Foundation_NSUnarchiver" = [ "Foundation_NSCoder" ];
          "Foundation_NSUniqueIDSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSUnitAcceleration" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitAngle" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitArea" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitConcentrationMass" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitConverterLinear" = [ "Foundation_NSUnitConverter" ];
          "Foundation_NSUnitDispersion" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitDuration" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitElectricCharge" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitElectricCurrent" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitElectricPotentialDifference" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitElectricResistance" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitEnergy" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitFrequency" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitFuelEfficiency" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitIlluminance" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitInformationStorage" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitLength" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitMass" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitPower" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitPressure" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitSpeed" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitTemperature" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitVolume" = [ "Foundation_NSDimension" ];
          "Foundation_NSUserAppleScriptTask" = [ "Foundation_NSUserScriptTask" ];
          "Foundation_NSUserAutomatorTask" = [ "Foundation_NSUserScriptTask" ];
          "Foundation_NSUserUnixTask" = [ "Foundation_NSUserScriptTask" ];
          "Foundation_NSWhoseSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSXMLDTD" = [ "Foundation_NSXMLNode" ];
          "Foundation_NSXMLDTDNode" = [ "Foundation_NSXMLNode" ];
          "Foundation_NSXMLDocument" = [ "Foundation_NSXMLNode" ];
          "Foundation_NSXMLElement" = [ "Foundation_NSXMLNode" ];
          "Foundation_NSXPCCoder" = [ "Foundation_NSCoder" ];
          "Foundation_all" = [ "Foundation" "Foundation_NSAffineTransform" "Foundation_NSAppleEventDescriptor" "Foundation_NSAppleEventManager" "Foundation_NSAppleScript" "Foundation_NSArchiver" "Foundation_NSArray" "Foundation_NSAssertionHandler" "Foundation_NSAttributedString" "Foundation_NSAttributedStringMarkdownParsingOptions" "Foundation_NSAttributedStringMarkdownSourcePosition" "Foundation_NSAutoreleasePool" "Foundation_NSBackgroundActivityScheduler" "Foundation_NSBlockOperation" "Foundation_NSBundle" "Foundation_NSBundleResourceRequest" "Foundation_NSByteCountFormatter" "Foundation_NSCache" "Foundation_NSCachedURLResponse" "Foundation_NSCalendar" "Foundation_NSCalendarDate" "Foundation_NSCharacterSet" "Foundation_NSClassDescription" "Foundation_NSCloneCommand" "Foundation_NSCloseCommand" "Foundation_NSCoder" "Foundation_NSComparisonPredicate" "Foundation_NSCompoundPredicate" "Foundation_NSCondition" "Foundation_NSConditionLock" "Foundation_NSConnection" "Foundation_NSConstantString" "Foundation_NSCountCommand" "Foundation_NSCountedSet" "Foundation_NSCreateCommand" "Foundation_NSData" "Foundation_NSDataDetector" "Foundation_NSDate" "Foundation_NSDateComponents" "Foundation_NSDateComponentsFormatter" "Foundation_NSDateFormatter" "Foundation_NSDateInterval" "Foundation_NSDateIntervalFormatter" "Foundation_NSDecimalNumber" "Foundation_NSDecimalNumberHandler" "Foundation_NSDeleteCommand" "Foundation_NSDictionary" "Foundation_NSDimension" "Foundation_NSDirectoryEnumerator" "Foundation_NSDistantObject" "Foundation_NSDistantObjectRequest" "Foundation_NSDistributedLock" "Foundation_NSDistributedNotificationCenter" "Foundation_NSEnergyFormatter" "Foundation_NSEnumerator" "Foundation_NSError" "Foundation_NSException" "Foundation_NSExistsCommand" "Foundation_NSExpression" "Foundation_NSExtensionContext" "Foundation_NSExtensionItem" "Foundation_NSFileAccessIntent" "Foundation_NSFileCoordinator" "Foundation_NSFileHandle" "Foundation_NSFileManager" "Foundation_NSFileProviderService" "Foundation_NSFileSecurity" "Foundation_NSFileVersion" "Foundation_NSFileWrapper" "Foundation_NSFormatter" "Foundation_NSGarbageCollector" "Foundation_NSGetCommand" "Foundation_NSHTTPCookie" "Foundation_NSHTTPCookieStorage" "Foundation_NSHTTPURLResponse" "Foundation_NSHashTable" "Foundation_NSHost" "Foundation_NSISO8601DateFormatter" "Foundation_NSIndexPath" "Foundation_NSIndexSet" "Foundation_NSIndexSpecifier" "Foundation_NSInflectionRule" "Foundation_NSInflectionRuleExplicit" "Foundation_NSInputStream" "Foundation_NSInvocation" "Foundation_NSInvocationOperation" "Foundation_NSItemProvider" "Foundation_NSJSONSerialization" "Foundation_NSKeyedArchiver" "Foundation_NSKeyedUnarchiver" "Foundation_NSLengthFormatter" "Foundation_NSLinguisticTagger" "Foundation_NSListFormatter" "Foundation_NSLocale" "Foundation_NSLock" "Foundation_NSLogicalTest" "Foundation_NSMachBootstrapServer" "Foundation_NSMachPort" "Foundation_NSMapTable" "Foundation_NSMassFormatter" "Foundation_NSMeasurement" "Foundation_NSMeasurementFormatter" "Foundation_NSMessagePort" "Foundation_NSMessagePortNameServer" "Foundation_NSMetadataItem" "Foundation_NSMetadataQuery" "Foundation_NSMetadataQueryAttributeValueTuple" "Foundation_NSMetadataQueryResultGroup" "Foundation_NSMethodSignature" "Foundation_NSMiddleSpecifier" "Foundation_NSMorphology" "Foundation_NSMorphologyCustomPronoun" "Foundation_NSMoveCommand" "Foundation_NSMutableArray" "Foundation_NSMutableAttributedString" "Foundation_NSMutableCharacterSet" "Foundation_NSMutableData" "Foundation_NSMutableDictionary" "Foundation_NSMutableIndexSet" "Foundation_NSMutableOrderedSet" "Foundation_NSMutableSet" "Foundation_NSMutableString" "Foundation_NSMutableURLRequest" "Foundation_NSNameSpecifier" "Foundation_NSNetService" "Foundation_NSNetServiceBrowser" "Foundation_NSNotification" "Foundation_NSNotificationCenter" "Foundation_NSNotificationQueue" "Foundation_NSNull" "Foundation_NSNumber" "Foundation_NSNumberFormatter" "Foundation_NSOperation" "Foundation_NSOperationQueue" "Foundation_NSOrderedCollectionChange" "Foundation_NSOrderedCollectionDifference" "Foundation_NSOrderedSet" "Foundation_NSOrthography" "Foundation_NSOutputStream" "Foundation_NSPersonNameComponents" "Foundation_NSPersonNameComponentsFormatter" "Foundation_NSPipe" "Foundation_NSPointerArray" "Foundation_NSPointerFunctions" "Foundation_NSPort" "Foundation_NSPortCoder" "Foundation_NSPortMessage" "Foundation_NSPortNameServer" "Foundation_NSPositionalSpecifier" "Foundation_NSPredicate" "Foundation_NSPresentationIntent" "Foundation_NSProcessInfo" "Foundation_NSProgress" "Foundation_NSPropertyListSerialization" "Foundation_NSPropertySpecifier" "Foundation_NSProtocolChecker" "Foundation_NSPurgeableData" "Foundation_NSQuitCommand" "Foundation_NSRandomSpecifier" "Foundation_NSRangeSpecifier" "Foundation_NSRecursiveLock" "Foundation_NSRegularExpression" "Foundation_NSRelativeDateTimeFormatter" "Foundation_NSRelativeSpecifier" "Foundation_NSRunLoop" "Foundation_NSScanner" "Foundation_NSScriptClassDescription" "Foundation_NSScriptCoercionHandler" "Foundation_NSScriptCommand" "Foundation_NSScriptCommandDescription" "Foundation_NSScriptExecutionContext" "Foundation_NSScriptObjectSpecifier" "Foundation_NSScriptSuiteRegistry" "Foundation_NSScriptWhoseTest" "Foundation_NSSecureUnarchiveFromDataTransformer" "Foundation_NSSet" "Foundation_NSSetCommand" "Foundation_NSSimpleCString" "Foundation_NSSocketPort" "Foundation_NSSocketPortNameServer" "Foundation_NSSortDescriptor" "Foundation_NSSpecifierTest" "Foundation_NSSpellServer" "Foundation_NSStream" "Foundation_NSString" "Foundation_NSTask" "Foundation_NSTextCheckingResult" "Foundation_NSThread" "Foundation_NSTimeZone" "Foundation_NSTimer" "Foundation_NSURL" "Foundation_NSURLAuthenticationChallenge" "Foundation_NSURLCache" "Foundation_NSURLComponents" "Foundation_NSURLConnection" "Foundation_NSURLCredential" "Foundation_NSURLCredentialStorage" "Foundation_NSURLDownload" "Foundation_NSURLHandle" "Foundation_NSURLProtectionSpace" "Foundation_NSURLProtocol" "Foundation_NSURLQueryItem" "Foundation_NSURLRequest" "Foundation_NSURLResponse" "Foundation_NSURLSession" "Foundation_NSURLSessionConfiguration" "Foundation_NSURLSessionDataTask" "Foundation_NSURLSessionDownloadTask" "Foundation_NSURLSessionStreamTask" "Foundation_NSURLSessionTask" "Foundation_NSURLSessionTaskMetrics" "Foundation_NSURLSessionTaskTransactionMetrics" "Foundation_NSURLSessionUploadTask" "Foundation_NSURLSessionWebSocketMessage" "Foundation_NSURLSessionWebSocketTask" "Foundation_NSUUID" "Foundation_NSUbiquitousKeyValueStore" "Foundation_NSUnarchiver" "Foundation_NSUndoManager" "Foundation_NSUniqueIDSpecifier" "Foundation_NSUnit" "Foundation_NSUnitAcceleration" "Foundation_NSUnitAngle" "Foundation_NSUnitArea" "Foundation_NSUnitConcentrationMass" "Foundation_NSUnitConverter" "Foundation_NSUnitConverterLinear" "Foundation_NSUnitDispersion" "Foundation_NSUnitDuration" "Foundation_NSUnitElectricCharge" "Foundation_NSUnitElectricCurrent" "Foundation_NSUnitElectricPotentialDifference" "Foundation_NSUnitElectricResistance" "Foundation_NSUnitEnergy" "Foundation_NSUnitFrequency" "Foundation_NSUnitFuelEfficiency" "Foundation_NSUnitIlluminance" "Foundation_NSUnitInformationStorage" "Foundation_NSUnitLength" "Foundation_NSUnitMass" "Foundation_NSUnitPower" "Foundation_NSUnitPressure" "Foundation_NSUnitSpeed" "Foundation_NSUnitTemperature" "Foundation_NSUnitVolume" "Foundation_NSUserActivity" "Foundation_NSUserAppleScriptTask" "Foundation_NSUserAutomatorTask" "Foundation_NSUserDefaults" "Foundation_NSUserNotification" "Foundation_NSUserNotificationAction" "Foundation_NSUserNotificationCenter" "Foundation_NSUserScriptTask" "Foundation_NSUserUnixTask" "Foundation_NSValue" "Foundation_NSValueTransformer" "Foundation_NSWhoseSpecifier" "Foundation_NSXMLDTD" "Foundation_NSXMLDTDNode" "Foundation_NSXMLDocument" "Foundation_NSXMLElement" "Foundation_NSXMLNode" "Foundation_NSXMLParser" "Foundation_NSXPCCoder" "Foundation_NSXPCConnection" "Foundation_NSXPCInterface" "Foundation_NSXPCListener" "Foundation_NSXPCListenerEndpoint" ];
          "GameController" = [ "AppKit" "Foundation" "GameController_GCControllerAxisInput" "GameController_GCControllerButtonInput" "GameController_GCControllerDirectionPad" "GameController_GCControllerTouchpad" "GameController_GCExtendedGamepad" "GameController_GCControllerElement" "GameController_GCGamepad" "GameController_GCKeyboardInput" "GameController_GCMicroGamepad" "GameController_GCMotion" "GameController_GCMouseInput" ];
          "GameController_GCControllerAxisInput" = [ "GameController_GCControllerElement" ];
          "GameController_GCControllerButtonInput" = [ "GameController_GCControllerElement" ];
          "GameController_GCControllerDirectionPad" = [ "GameController_GCControllerElement" ];
          "GameController_GCControllerTouchpad" = [ "GameController_GCControllerElement" ];
          "GameController_GCDeviceCursor" = [ "GameController_GCControllerDirectionPad" ];
          "GameController_GCDirectionalGamepad" = [ "GameController_GCMicroGamepad" ];
          "GameController_GCDualSenseAdaptiveTrigger" = [ "GameController_GCControllerButtonInput" ];
          "GameController_GCDualSenseGamepad" = [ "GameController_GCExtendedGamepad" ];
          "GameController_GCDualShockGamepad" = [ "GameController_GCExtendedGamepad" ];
          "GameController_GCEventViewController" = [ "AppKit_NSViewController" ];
          "GameController_GCExtendedGamepad" = [ "GameController_GCPhysicalInputProfile" ];
          "GameController_GCExtendedGamepadSnapshot" = [ "GameController_GCExtendedGamepad" ];
          "GameController_GCGamepad" = [ "GameController_GCPhysicalInputProfile" ];
          "GameController_GCGamepadSnapshot" = [ "GameController_GCGamepad" ];
          "GameController_GCKeyboardInput" = [ "GameController_GCPhysicalInputProfile" ];
          "GameController_GCMicroGamepad" = [ "GameController_GCPhysicalInputProfile" ];
          "GameController_GCMicroGamepadSnapshot" = [ "GameController_GCMicroGamepad" ];
          "GameController_GCMouseInput" = [ "GameController_GCPhysicalInputProfile" ];
          "GameController_GCRacingWheelInput" = [ "GameController_GCRacingWheelInputState" ];
          "GameController_GCXboxGamepad" = [ "GameController_GCExtendedGamepad" ];
          "GameController_all" = [ "GameController" "GameController_GCColor" "GameController_GCController" "GameController_GCControllerAxisInput" "GameController_GCControllerButtonInput" "GameController_GCControllerDirectionPad" "GameController_GCControllerElement" "GameController_GCControllerTouchpad" "GameController_GCDeviceBattery" "GameController_GCDeviceCursor" "GameController_GCDeviceHaptics" "GameController_GCDeviceLight" "GameController_GCDirectionalGamepad" "GameController_GCDualSenseAdaptiveTrigger" "GameController_GCDualSenseGamepad" "GameController_GCDualShockGamepad" "GameController_GCEventViewController" "GameController_GCExtendedGamepad" "GameController_GCExtendedGamepadSnapshot" "GameController_GCGamepad" "GameController_GCGamepadSnapshot" "GameController_GCGearShifterElement" "GameController_GCKeyboard" "GameController_GCKeyboardInput" "GameController_GCMicroGamepad" "GameController_GCMicroGamepadSnapshot" "GameController_GCMotion" "GameController_GCMouse" "GameController_GCMouseInput" "GameController_GCPhysicalInputElementCollection" "GameController_GCPhysicalInputProfile" "GameController_GCRacingWheel" "GameController_GCRacingWheelInput" "GameController_GCRacingWheelInputState" "GameController_GCSteeringWheelElement" "GameController_GCXboxGamepad" ];
          "GameKit" = [ "AppKit" "Foundation" "AppKit_NSViewController" ];
          "GameKit_GKAchievementChallenge" = [ "GameKit_GKChallenge" ];
          "GameKit_GKAchievementViewController" = [ "GameKit_GKGameCenterViewController" ];
          "GameKit_GKChallengesViewController" = [ "AppKit_NSViewController" ];
          "GameKit_GKCloudPlayer" = [ "GameKit_GKBasePlayer" ];
          "GameKit_GKDialogController" = [ "AppKit_NSResponder" ];
          "GameKit_GKFriendRequestComposeViewController" = [ "AppKit_NSViewController" ];
          "GameKit_GKGameCenterViewController" = [ "AppKit_NSViewController" ];
          "GameKit_GKLeaderboardViewController" = [ "GameKit_GKGameCenterViewController" ];
          "GameKit_GKLocalPlayer" = [ "GameKit_GKPlayer" ];
          "GameKit_GKMatchmakerViewController" = [ "AppKit_NSViewController" ];
          "GameKit_GKPlayer" = [ "GameKit_GKBasePlayer" ];
          "GameKit_GKScoreChallenge" = [ "GameKit_GKChallenge" ];
          "GameKit_GKTurnBasedMatchmakerViewController" = [ "AppKit_NSViewController" ];
          "GameKit_all" = [ "GameKit" "GameKit_GKAccessPoint" "GameKit_GKAchievement" "GameKit_GKAchievementChallenge" "GameKit_GKAchievementDescription" "GameKit_GKAchievementViewController" "GameKit_GKBasePlayer" "GameKit_GKChallenge" "GameKit_GKChallengeEventHandler" "GameKit_GKChallengesViewController" "GameKit_GKCloudPlayer" "GameKit_GKDialogController" "GameKit_GKFriendRequestComposeViewController" "GameKit_GKGameCenterViewController" "GameKit_GKGameSession" "GameKit_GKInvite" "GameKit_GKLeaderboard" "GameKit_GKLeaderboardEntry" "GameKit_GKLeaderboardScore" "GameKit_GKLeaderboardSet" "GameKit_GKLeaderboardViewController" "GameKit_GKLocalPlayer" "GameKit_GKMatch" "GameKit_GKMatchRequest" "GameKit_GKMatchmaker" "GameKit_GKMatchmakerViewController" "GameKit_GKNotificationBanner" "GameKit_GKPlayer" "GameKit_GKSavedGame" "GameKit_GKScore" "GameKit_GKScoreChallenge" "GameKit_GKSession" "GameKit_GKTurnBasedEventHandler" "GameKit_GKTurnBasedExchange" "GameKit_GKTurnBasedExchangeReply" "GameKit_GKTurnBasedMatch" "GameKit_GKTurnBasedMatchmakerViewController" "GameKit_GKTurnBasedParticipant" "GameKit_GKVoiceChat" "GameKit_GKVoiceChatService" ];
          "HealthKit" = [ "CoreLocation" "Foundation" "UniformTypeIdentifiers" ];
          "HealthKit_HKActivitySummaryQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKActivitySummaryType" = [ "HealthKit_HKObjectType" ];
          "HealthKit_HKAnchoredObjectQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKAudiogramSample" = [ "HealthKit_HKSample" ];
          "HealthKit_HKAudiogramSampleType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKCDADocumentSample" = [ "HealthKit_HKDocumentSample" ];
          "HealthKit_HKCategorySample" = [ "HealthKit_HKSample" ];
          "HealthKit_HKCategoryType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKCharacteristicType" = [ "HealthKit_HKObjectType" ];
          "HealthKit_HKClinicalRecord" = [ "HealthKit_HKSample" ];
          "HealthKit_HKClinicalType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKContactsLensSpecification" = [ "HealthKit_HKLensSpecification" ];
          "HealthKit_HKContactsPrescription" = [ "HealthKit_HKVisionPrescription" ];
          "HealthKit_HKCorrelation" = [ "HealthKit_HKSample" ];
          "HealthKit_HKCorrelationQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKCorrelationType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKCumulativeQuantitySample" = [ "HealthKit_HKQuantitySample" ];
          "HealthKit_HKCumulativeQuantitySeriesSample" = [ "HealthKit_HKCumulativeQuantitySample" ];
          "HealthKit_HKDiscreteQuantitySample" = [ "HealthKit_HKQuantitySample" ];
          "HealthKit_HKDocumentQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKDocumentSample" = [ "HealthKit_HKSample" ];
          "HealthKit_HKDocumentType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKElectrocardiogram" = [ "HealthKit_HKSample" ];
          "HealthKit_HKElectrocardiogramQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKElectrocardiogramType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKGlassesLensSpecification" = [ "HealthKit_HKLensSpecification" ];
          "HealthKit_HKGlassesPrescription" = [ "HealthKit_HKVisionPrescription" ];
          "HealthKit_HKHeartbeatSeriesBuilder" = [ "HealthKit_HKSeriesBuilder" ];
          "HealthKit_HKHeartbeatSeriesQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKHeartbeatSeriesSample" = [ "HealthKit_HKSeriesSample" ];
          "HealthKit_HKLiveWorkoutBuilder" = [ "HealthKit_HKWorkoutBuilder" ];
          "HealthKit_HKObserverQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKPrescriptionType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKQuantitySample" = [ "HealthKit_HKSample" ];
          "HealthKit_HKQuantitySeriesSampleQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKQuantityType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKSample" = [ "HealthKit_HKObject" ];
          "HealthKit_HKSampleQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKSampleType" = [ "HealthKit_HKObjectType" ];
          "HealthKit_HKSeriesSample" = [ "HealthKit_HKSample" ];
          "HealthKit_HKSeriesType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKSourceQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKStatisticsCollectionQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKStatisticsQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKVerifiableClinicalRecord" = [ "HealthKit_HKSample" ];
          "HealthKit_HKVerifiableClinicalRecordQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKVisionPrescription" = [ "HealthKit_HKSample" ];
          "HealthKit_HKWorkout" = [ "HealthKit_HKSample" ];
          "HealthKit_HKWorkoutRoute" = [ "HealthKit_HKSeriesSample" ];
          "HealthKit_HKWorkoutRouteBuilder" = [ "HealthKit_HKSeriesBuilder" ];
          "HealthKit_HKWorkoutRouteQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKWorkoutType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_all" = [ "HealthKit" "HealthKit_HKActivityMoveModeObject" "HealthKit_HKActivitySummary" "HealthKit_HKActivitySummaryQuery" "HealthKit_HKActivitySummaryType" "HealthKit_HKAnchoredObjectQuery" "HealthKit_HKAttachment" "HealthKit_HKAttachmentStore" "HealthKit_HKAudiogramSample" "HealthKit_HKAudiogramSampleType" "HealthKit_HKAudiogramSensitivityPoint" "HealthKit_HKBiologicalSexObject" "HealthKit_HKBloodTypeObject" "HealthKit_HKCDADocument" "HealthKit_HKCDADocumentSample" "HealthKit_HKCategorySample" "HealthKit_HKCategoryType" "HealthKit_HKCharacteristicType" "HealthKit_HKClinicalRecord" "HealthKit_HKClinicalType" "HealthKit_HKContactsLensSpecification" "HealthKit_HKContactsPrescription" "HealthKit_HKCorrelation" "HealthKit_HKCorrelationQuery" "HealthKit_HKCorrelationType" "HealthKit_HKCumulativeQuantitySample" "HealthKit_HKCumulativeQuantitySeriesSample" "HealthKit_HKDeletedObject" "HealthKit_HKDevice" "HealthKit_HKDiscreteQuantitySample" "HealthKit_HKDocumentQuery" "HealthKit_HKDocumentSample" "HealthKit_HKDocumentType" "HealthKit_HKElectrocardiogram" "HealthKit_HKElectrocardiogramQuery" "HealthKit_HKElectrocardiogramType" "HealthKit_HKElectrocardiogramVoltageMeasurement" "HealthKit_HKFHIRResource" "HealthKit_HKFHIRVersion" "HealthKit_HKFitzpatrickSkinTypeObject" "HealthKit_HKGlassesLensSpecification" "HealthKit_HKGlassesPrescription" "HealthKit_HKHealthStore" "HealthKit_HKHeartbeatSeriesBuilder" "HealthKit_HKHeartbeatSeriesQuery" "HealthKit_HKHeartbeatSeriesSample" "HealthKit_HKLensSpecification" "HealthKit_HKLiveWorkoutBuilder" "HealthKit_HKLiveWorkoutDataSource" "HealthKit_HKObject" "HealthKit_HKObjectType" "HealthKit_HKObserverQuery" "HealthKit_HKPrescriptionType" "HealthKit_HKQuantity" "HealthKit_HKQuantitySample" "HealthKit_HKQuantitySeriesSampleBuilder" "HealthKit_HKQuantitySeriesSampleQuery" "HealthKit_HKQuantityType" "HealthKit_HKQuery" "HealthKit_HKQueryAnchor" "HealthKit_HKQueryDescriptor" "HealthKit_HKSample" "HealthKit_HKSampleQuery" "HealthKit_HKSampleType" "HealthKit_HKSeriesBuilder" "HealthKit_HKSeriesSample" "HealthKit_HKSeriesType" "HealthKit_HKSource" "HealthKit_HKSourceQuery" "HealthKit_HKSourceRevision" "HealthKit_HKStatistics" "HealthKit_HKStatisticsCollection" "HealthKit_HKStatisticsCollectionQuery" "HealthKit_HKStatisticsQuery" "HealthKit_HKUnit" "HealthKit_HKVerifiableClinicalRecord" "HealthKit_HKVerifiableClinicalRecordQuery" "HealthKit_HKVerifiableClinicalRecordSubject" "HealthKit_HKVisionPrescription" "HealthKit_HKVisionPrism" "HealthKit_HKWheelchairUseObject" "HealthKit_HKWorkout" "HealthKit_HKWorkoutActivity" "HealthKit_HKWorkoutBuilder" "HealthKit_HKWorkoutConfiguration" "HealthKit_HKWorkoutEvent" "HealthKit_HKWorkoutRoute" "HealthKit_HKWorkoutRouteBuilder" "HealthKit_HKWorkoutRouteQuery" "HealthKit_HKWorkoutSession" "HealthKit_HKWorkoutType" ];
          "IdentityLookup" = [ "Foundation" ];
          "IdentityLookup_ILCallClassificationRequest" = [ "IdentityLookup_ILClassificationRequest" ];
          "IdentityLookup_ILCallCommunication" = [ "IdentityLookup_ILCommunication" ];
          "IdentityLookup_ILMessageClassificationRequest" = [ "IdentityLookup_ILClassificationRequest" ];
          "IdentityLookup_ILMessageCommunication" = [ "IdentityLookup_ILCommunication" ];
          "IdentityLookup_ILMessageFilterExtensionContext" = [ "Foundation_NSExtensionContext" ];
          "IdentityLookup_all" = [ "IdentityLookup" "IdentityLookup_ILCallClassificationRequest" "IdentityLookup_ILCallCommunication" "IdentityLookup_ILClassificationRequest" "IdentityLookup_ILClassificationResponse" "IdentityLookup_ILCommunication" "IdentityLookup_ILMessageClassificationRequest" "IdentityLookup_ILMessageCommunication" "IdentityLookup_ILMessageFilterCapabilitiesQueryRequest" "IdentityLookup_ILMessageFilterCapabilitiesQueryResponse" "IdentityLookup_ILMessageFilterExtension" "IdentityLookup_ILMessageFilterExtensionContext" "IdentityLookup_ILMessageFilterQueryRequest" "IdentityLookup_ILMessageFilterQueryResponse" "IdentityLookup_ILNetworkResponse" ];
          "InputMethodKit" = [ "AppKit" "Foundation" ];
          "InputMethodKit_IMKCandidates" = [ "AppKit_NSResponder" ];
          "InputMethodKit_all" = [ "InputMethodKit" "InputMethodKit_IMKCandidates" "InputMethodKit_IMKInputController" "InputMethodKit_IMKServer" ];
          "LinkPresentation" = [ "AppKit" "Foundation" ];
          "LinkPresentation_LPLinkView" = [ "AppKit_NSView" ];
          "LinkPresentation_all" = [ "LinkPresentation" "LinkPresentation_LPLinkMetadata" "LinkPresentation_LPLinkView" "LinkPresentation_LPMetadataProvider" ];
          "LocalAuthentication" = [ "Foundation" ];
          "LocalAuthenticationEmbeddedUI" = [ "AppKit" "Foundation" "LocalAuthentication" "AppKit_NSWindow" ];
          "LocalAuthenticationEmbeddedUI_LAAuthenticationView" = [ "AppKit_NSView" ];
          "LocalAuthenticationEmbeddedUI_all" = [ "LocalAuthenticationEmbeddedUI" "LocalAuthenticationEmbeddedUI_LAAuthenticationView" ];
          "LocalAuthentication_LAPersistedRight" = [ "LocalAuthentication_LARight" ];
          "LocalAuthentication_all" = [ "LocalAuthentication" "LocalAuthentication_LAAuthenticationRequirement" "LocalAuthentication_LABiometryFallbackRequirement" "LocalAuthentication_LAContext" "LocalAuthentication_LAPersistedRight" "LocalAuthentication_LAPrivateKey" "LocalAuthentication_LAPublicKey" "LocalAuthentication_LARight" "LocalAuthentication_LARightStore" "LocalAuthentication_LASecret" ];
          "MailKit" = [ "AppKit" "Foundation" ];
          "MailKit_MEExtensionViewController" = [ "AppKit_NSViewController" ];
          "MailKit_all" = [ "MailKit" "MailKit_MEAddressAnnotation" "MailKit_MEComposeContext" "MailKit_MEComposeSession" "MailKit_MEDecodedMessage" "MailKit_MEDecodedMessageBanner" "MailKit_MEEmailAddress" "MailKit_MEEncodedOutgoingMessage" "MailKit_MEExtensionManager" "MailKit_MEExtensionViewController" "MailKit_MEMessage" "MailKit_MEMessageAction" "MailKit_MEMessageActionDecision" "MailKit_MEMessageEncodingResult" "MailKit_MEMessageSecurityInformation" "MailKit_MEMessageSigner" "MailKit_MEOutgoingMessageEncodingStatus" ];
          "MapKit" = [ "AppKit" "Contacts" "CoreLocation" "Foundation" "MapKit_MKDirectionsResponse" "MapKit_MKETAResponse" "MapKit_MKLocalSearchResponse" "MapKit_MKMapSnapshot" ];
          "MapKit_MKAnnotationView" = [ "AppKit_NSView" ];
          "MapKit_MKCircle" = [ "MapKit_MKShape" ];
          "MapKit_MKCircleRenderer" = [ "MapKit_MKOverlayPathRenderer" ];
          "MapKit_MKCompassButton" = [ "AppKit_NSView" ];
          "MapKit_MKDistanceFormatter" = [ "Foundation_NSFormatter" ];
          "MapKit_MKGeodesicPolyline" = [ "MapKit_MKPolyline" ];
          "MapKit_MKGradientPolylineRenderer" = [ "MapKit_MKPolylineRenderer" ];
          "MapKit_MKHybridMapConfiguration" = [ "MapKit_MKMapConfiguration" ];
          "MapKit_MKImageryMapConfiguration" = [ "MapKit_MKMapConfiguration" ];
          "MapKit_MKLookAroundViewController" = [ "AppKit_NSViewController" ];
          "MapKit_MKMapView" = [ "AppKit_NSView" ];
          "MapKit_MKMarkerAnnotationView" = [ "MapKit_MKAnnotationView" ];
          "MapKit_MKMultiPoint" = [ "MapKit_MKShape" ];
          "MapKit_MKMultiPolygon" = [ "MapKit_MKShape" ];
          "MapKit_MKMultiPolygonRenderer" = [ "MapKit_MKOverlayPathRenderer" ];
          "MapKit_MKMultiPolyline" = [ "MapKit_MKShape" ];
          "MapKit_MKMultiPolylineRenderer" = [ "MapKit_MKOverlayPathRenderer" ];
          "MapKit_MKOverlayPathRenderer" = [ "MapKit_MKOverlayRenderer" ];
          "MapKit_MKPinAnnotationView" = [ "MapKit_MKAnnotationView" ];
          "MapKit_MKPitchControl" = [ "AppKit_NSView" ];
          "MapKit_MKPlacemark" = [ "CoreLocation_CLPlacemark" ];
          "MapKit_MKPointAnnotation" = [ "MapKit_MKShape" ];
          "MapKit_MKPolygon" = [ "MapKit_MKMultiPoint" ];
          "MapKit_MKPolygonRenderer" = [ "MapKit_MKOverlayPathRenderer" ];
          "MapKit_MKPolyline" = [ "MapKit_MKMultiPoint" ];
          "MapKit_MKPolylineRenderer" = [ "MapKit_MKOverlayPathRenderer" ];
          "MapKit_MKStandardMapConfiguration" = [ "MapKit_MKMapConfiguration" ];
          "MapKit_MKTileOverlayRenderer" = [ "MapKit_MKOverlayRenderer" ];
          "MapKit_MKUserLocationView" = [ "MapKit_MKAnnotationView" ];
          "MapKit_MKZoomControl" = [ "AppKit_NSView" ];
          "MapKit_all" = [ "MapKit" "MapKit_MKAnnotationView" "MapKit_MKCircle" "MapKit_MKCircleRenderer" "MapKit_MKClusterAnnotation" "MapKit_MKCompassButton" "MapKit_MKDirections" "MapKit_MKDirectionsRequest" "MapKit_MKDirectionsResponse" "MapKit_MKDistanceFormatter" "MapKit_MKETAResponse" "MapKit_MKGeoJSONDecoder" "MapKit_MKGeoJSONFeature" "MapKit_MKGeodesicPolyline" "MapKit_MKGradientPolylineRenderer" "MapKit_MKHybridMapConfiguration" "MapKit_MKImageryMapConfiguration" "MapKit_MKLocalPointsOfInterestRequest" "MapKit_MKLocalSearch" "MapKit_MKLocalSearchCompleter" "MapKit_MKLocalSearchCompletion" "MapKit_MKLocalSearchRequest" "MapKit_MKLocalSearchResponse" "MapKit_MKLookAroundScene" "MapKit_MKLookAroundSceneRequest" "MapKit_MKLookAroundSnapshot" "MapKit_MKLookAroundSnapshotOptions" "MapKit_MKLookAroundSnapshotter" "MapKit_MKLookAroundViewController" "MapKit_MKMapCamera" "MapKit_MKMapCameraBoundary" "MapKit_MKMapCameraZoomRange" "MapKit_MKMapConfiguration" "MapKit_MKMapItem" "MapKit_MKMapSnapshot" "MapKit_MKMapSnapshotOptions" "MapKit_MKMapSnapshotter" "MapKit_MKMapView" "MapKit_MKMarkerAnnotationView" "MapKit_MKMultiPoint" "MapKit_MKMultiPolygon" "MapKit_MKMultiPolygonRenderer" "MapKit_MKMultiPolyline" "MapKit_MKMultiPolylineRenderer" "MapKit_MKOverlayPathRenderer" "MapKit_MKOverlayRenderer" "MapKit_MKPinAnnotationView" "MapKit_MKPitchControl" "MapKit_MKPlacemark" "MapKit_MKPointAnnotation" "MapKit_MKPointOfInterestFilter" "MapKit_MKPolygon" "MapKit_MKPolygonRenderer" "MapKit_MKPolyline" "MapKit_MKPolylineRenderer" "MapKit_MKRoute" "MapKit_MKRouteStep" "MapKit_MKShape" "MapKit_MKStandardMapConfiguration" "MapKit_MKTileOverlay" "MapKit_MKTileOverlayRenderer" "MapKit_MKUserLocation" "MapKit_MKUserLocationView" "MapKit_MKZoomControl" ];
          "MediaPlayer" = [ "AppKit" "Foundation" ];
          "MediaPlayer_MPChangeLanguageOptionCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPChangePlaybackPositionCommand" = [ "MediaPlayer_MPRemoteCommand" ];
          "MediaPlayer_MPChangePlaybackPositionCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPChangePlaybackRateCommand" = [ "MediaPlayer_MPRemoteCommand" ];
          "MediaPlayer_MPChangePlaybackRateCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPChangeRepeatModeCommand" = [ "MediaPlayer_MPRemoteCommand" ];
          "MediaPlayer_MPChangeRepeatModeCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPChangeShuffleModeCommand" = [ "MediaPlayer_MPRemoteCommand" ];
          "MediaPlayer_MPChangeShuffleModeCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPFeedbackCommand" = [ "MediaPlayer_MPRemoteCommand" ];
          "MediaPlayer_MPFeedbackCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPMediaItem" = [ "MediaPlayer_MPMediaEntity" ];
          "MediaPlayer_MPMediaItemCollection" = [ "MediaPlayer_MPMediaEntity" ];
          "MediaPlayer_MPMediaPlaylist" = [ "MediaPlayer_MPMediaItemCollection" ];
          "MediaPlayer_MPMediaPropertyPredicate" = [ "MediaPlayer_MPMediaPredicate" ];
          "MediaPlayer_MPMusicPlayerApplicationController" = [ "MediaPlayer_MPMusicPlayerController" ];
          "MediaPlayer_MPMusicPlayerControllerMutableQueue" = [ "MediaPlayer_MPMusicPlayerControllerQueue" ];
          "MediaPlayer_MPMusicPlayerMediaItemQueueDescriptor" = [ "MediaPlayer_MPMusicPlayerQueueDescriptor" ];
          "MediaPlayer_MPMusicPlayerPlayParametersQueueDescriptor" = [ "MediaPlayer_MPMusicPlayerQueueDescriptor" ];
          "MediaPlayer_MPMusicPlayerStoreQueueDescriptor" = [ "MediaPlayer_MPMusicPlayerQueueDescriptor" ];
          "MediaPlayer_MPRatingCommand" = [ "MediaPlayer_MPRemoteCommand" ];
          "MediaPlayer_MPRatingCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPSeekCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPSkipIntervalCommand" = [ "MediaPlayer_MPRemoteCommand" ];
          "MediaPlayer_MPSkipIntervalCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_all" = [ "MediaPlayer" "MediaPlayer_MPAdTimeRange" "MediaPlayer_MPChangeLanguageOptionCommandEvent" "MediaPlayer_MPChangePlaybackPositionCommand" "MediaPlayer_MPChangePlaybackPositionCommandEvent" "MediaPlayer_MPChangePlaybackRateCommand" "MediaPlayer_MPChangePlaybackRateCommandEvent" "MediaPlayer_MPChangeRepeatModeCommand" "MediaPlayer_MPChangeRepeatModeCommandEvent" "MediaPlayer_MPChangeShuffleModeCommand" "MediaPlayer_MPChangeShuffleModeCommandEvent" "MediaPlayer_MPContentItem" "MediaPlayer_MPFeedbackCommand" "MediaPlayer_MPFeedbackCommandEvent" "MediaPlayer_MPMediaEntity" "MediaPlayer_MPMediaItem" "MediaPlayer_MPMediaItemArtwork" "MediaPlayer_MPMediaItemCollection" "MediaPlayer_MPMediaLibrary" "MediaPlayer_MPMediaPlaylist" "MediaPlayer_MPMediaPlaylistCreationMetadata" "MediaPlayer_MPMediaPredicate" "MediaPlayer_MPMediaPropertyPredicate" "MediaPlayer_MPMediaQuery" "MediaPlayer_MPMediaQuerySection" "MediaPlayer_MPMusicPlayerApplicationController" "MediaPlayer_MPMusicPlayerController" "MediaPlayer_MPMusicPlayerControllerMutableQueue" "MediaPlayer_MPMusicPlayerControllerQueue" "MediaPlayer_MPMusicPlayerMediaItemQueueDescriptor" "MediaPlayer_MPMusicPlayerPlayParameters" "MediaPlayer_MPMusicPlayerPlayParametersQueueDescriptor" "MediaPlayer_MPMusicPlayerQueueDescriptor" "MediaPlayer_MPMusicPlayerStoreQueueDescriptor" "MediaPlayer_MPNowPlayingInfoCenter" "MediaPlayer_MPNowPlayingInfoLanguageOption" "MediaPlayer_MPNowPlayingInfoLanguageOptionGroup" "MediaPlayer_MPNowPlayingSession" "MediaPlayer_MPPlayableContentManager" "MediaPlayer_MPPlayableContentManagerContext" "MediaPlayer_MPRatingCommand" "MediaPlayer_MPRatingCommandEvent" "MediaPlayer_MPRemoteCommand" "MediaPlayer_MPRemoteCommandCenter" "MediaPlayer_MPRemoteCommandEvent" "MediaPlayer_MPSeekCommandEvent" "MediaPlayer_MPSkipIntervalCommand" "MediaPlayer_MPSkipIntervalCommandEvent" ];
          "Metal" = [ "Foundation" ];
          "MetalFX" = [ "Metal" ];
          "MetalFX_all" = [ "MetalFX" "MetalFX_MTLFXSpatialScalerDescriptor" "MetalFX_MTLFXTemporalScalerDescriptor" ];
          "MetalKit" = [ "AppKit" "Foundation" "Metal" "Metal_MTLRenderPipelineReflection" "Metal_MTLComputePipelineReflection" ];
          "MetalKit_MTKView" = [ "AppKit_NSView" ];
          "MetalKit_all" = [ "MetalKit" "MetalKit_MTKMesh" "MetalKit_MTKMeshBuffer" "MetalKit_MTKMeshBufferAllocator" "MetalKit_MTKSubmesh" "MetalKit_MTKTextureLoader" "MetalKit_MTKView" ];
          "Metal_MTLAccelerationStructureBoundingBoxGeometryDescriptor" = [ "Metal_MTLAccelerationStructureGeometryDescriptor" ];
          "Metal_MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor" = [ "Metal_MTLAccelerationStructureGeometryDescriptor" ];
          "Metal_MTLAccelerationStructureMotionTriangleGeometryDescriptor" = [ "Metal_MTLAccelerationStructureGeometryDescriptor" ];
          "Metal_MTLAccelerationStructureTriangleGeometryDescriptor" = [ "Metal_MTLAccelerationStructureGeometryDescriptor" ];
          "Metal_MTLArrayType" = [ "Metal_MTLType" ];
          "Metal_MTLInstanceAccelerationStructureDescriptor" = [ "Metal_MTLAccelerationStructureDescriptor" ];
          "Metal_MTLIntersectionFunctionDescriptor" = [ "Metal_MTLFunctionDescriptor" ];
          "Metal_MTLPointerType" = [ "Metal_MTLType" ];
          "Metal_MTLPrimitiveAccelerationStructureDescriptor" = [ "Metal_MTLAccelerationStructureDescriptor" ];
          "Metal_MTLRenderPassColorAttachmentDescriptor" = [ "Metal_MTLRenderPassAttachmentDescriptor" ];
          "Metal_MTLRenderPassDepthAttachmentDescriptor" = [ "Metal_MTLRenderPassAttachmentDescriptor" ];
          "Metal_MTLRenderPassStencilAttachmentDescriptor" = [ "Metal_MTLRenderPassAttachmentDescriptor" ];
          "Metal_MTLStructType" = [ "Metal_MTLType" ];
          "Metal_MTLTextureReferenceType" = [ "Metal_MTLType" ];
          "Metal_all" = [ "Metal" "Metal_MTLAccelerationStructureBoundingBoxGeometryDescriptor" "Metal_MTLAccelerationStructureDescriptor" "Metal_MTLAccelerationStructureGeometryDescriptor" "Metal_MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor" "Metal_MTLAccelerationStructureMotionTriangleGeometryDescriptor" "Metal_MTLAccelerationStructurePassDescriptor" "Metal_MTLAccelerationStructurePassSampleBufferAttachmentDescriptor" "Metal_MTLAccelerationStructurePassSampleBufferAttachmentDescriptorArray" "Metal_MTLAccelerationStructureTriangleGeometryDescriptor" "Metal_MTLArgument" "Metal_MTLArgumentDescriptor" "Metal_MTLArrayType" "Metal_MTLAttribute" "Metal_MTLAttributeDescriptor" "Metal_MTLAttributeDescriptorArray" "Metal_MTLBinaryArchiveDescriptor" "Metal_MTLBlitPassDescriptor" "Metal_MTLBlitPassSampleBufferAttachmentDescriptor" "Metal_MTLBlitPassSampleBufferAttachmentDescriptorArray" "Metal_MTLBufferLayoutDescriptor" "Metal_MTLBufferLayoutDescriptorArray" "Metal_MTLCaptureDescriptor" "Metal_MTLCaptureManager" "Metal_MTLCommandBufferDescriptor" "Metal_MTLCompileOptions" "Metal_MTLComputePassDescriptor" "Metal_MTLComputePassSampleBufferAttachmentDescriptor" "Metal_MTLComputePassSampleBufferAttachmentDescriptorArray" "Metal_MTLComputePipelineDescriptor" "Metal_MTLComputePipelineReflection" "Metal_MTLCounterSampleBufferDescriptor" "Metal_MTLDepthStencilDescriptor" "Metal_MTLFunctionConstant" "Metal_MTLFunctionConstantValues" "Metal_MTLFunctionDescriptor" "Metal_MTLFunctionStitchingAttributeAlwaysInline" "Metal_MTLFunctionStitchingFunctionNode" "Metal_MTLFunctionStitchingGraph" "Metal_MTLFunctionStitchingInputNode" "Metal_MTLHeapDescriptor" "Metal_MTLIOCommandQueueDescriptor" "Metal_MTLIndirectCommandBufferDescriptor" "Metal_MTLInstanceAccelerationStructureDescriptor" "Metal_MTLIntersectionFunctionDescriptor" "Metal_MTLIntersectionFunctionTableDescriptor" "Metal_MTLLinkedFunctions" "Metal_MTLMeshRenderPipelineDescriptor" "Metal_MTLMotionKeyframeData" "Metal_MTLPipelineBufferDescriptor" "Metal_MTLPipelineBufferDescriptorArray" "Metal_MTLPointerType" "Metal_MTLPrimitiveAccelerationStructureDescriptor" "Metal_MTLRasterizationRateLayerArray" "Metal_MTLRasterizationRateLayerDescriptor" "Metal_MTLRasterizationRateMapDescriptor" "Metal_MTLRasterizationRateSampleArray" "Metal_MTLRenderPassAttachmentDescriptor" "Metal_MTLRenderPassColorAttachmentDescriptor" "Metal_MTLRenderPassColorAttachmentDescriptorArray" "Metal_MTLRenderPassDepthAttachmentDescriptor" "Metal_MTLRenderPassDescriptor" "Metal_MTLRenderPassSampleBufferAttachmentDescriptor" "Metal_MTLRenderPassSampleBufferAttachmentDescriptorArray" "Metal_MTLRenderPassStencilAttachmentDescriptor" "Metal_MTLRenderPipelineColorAttachmentDescriptor" "Metal_MTLRenderPipelineColorAttachmentDescriptorArray" "Metal_MTLRenderPipelineDescriptor" "Metal_MTLRenderPipelineFunctionsDescriptor" "Metal_MTLRenderPipelineReflection" "Metal_MTLResourceStatePassDescriptor" "Metal_MTLResourceStatePassSampleBufferAttachmentDescriptor" "Metal_MTLResourceStatePassSampleBufferAttachmentDescriptorArray" "Metal_MTLSamplerDescriptor" "Metal_MTLSharedEventHandle" "Metal_MTLSharedEventListener" "Metal_MTLSharedTextureHandle" "Metal_MTLStageInputOutputDescriptor" "Metal_MTLStencilDescriptor" "Metal_MTLStitchedLibraryDescriptor" "Metal_MTLStructMember" "Metal_MTLStructType" "Metal_MTLTextureDescriptor" "Metal_MTLTextureReferenceType" "Metal_MTLTileRenderPipelineColorAttachmentDescriptor" "Metal_MTLTileRenderPipelineColorAttachmentDescriptorArray" "Metal_MTLTileRenderPipelineDescriptor" "Metal_MTLType" "Metal_MTLVertexAttribute" "Metal_MTLVertexAttributeDescriptor" "Metal_MTLVertexAttributeDescriptorArray" "Metal_MTLVertexBufferLayoutDescriptor" "Metal_MTLVertexBufferLayoutDescriptorArray" "Metal_MTLVertexDescriptor" "Metal_MTLVisibleFunctionTableDescriptor" ];
          "MetricKit" = [ "Foundation" ];
          "MetricKit_MXAnimationMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXAppExitMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXAppLaunchDiagnostic" = [ "MetricKit_MXDiagnostic" ];
          "MetricKit_MXAppLaunchMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXAppResponsivenessMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXAppRunTimeMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXCPUExceptionDiagnostic" = [ "MetricKit_MXDiagnostic" ];
          "MetricKit_MXCPUMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXCellularConditionMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXCrashDiagnostic" = [ "MetricKit_MXDiagnostic" ];
          "MetricKit_MXDiskIOMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXDiskWriteExceptionDiagnostic" = [ "MetricKit_MXDiagnostic" ];
          "MetricKit_MXDisplayMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXGPUMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXHangDiagnostic" = [ "MetricKit_MXDiagnostic" ];
          "MetricKit_MXLocationActivityMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXMemoryMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXNetworkTransferMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXSignpostMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXUnitAveragePixelLuminance" = [ "Foundation_NSDimension" ];
          "MetricKit_MXUnitSignalBars" = [ "Foundation_NSDimension" ];
          "MetricKit_all" = [ "MetricKit" "MetricKit_MXAnimationMetric" "MetricKit_MXAppExitMetric" "MetricKit_MXAppLaunchDiagnostic" "MetricKit_MXAppLaunchMetric" "MetricKit_MXAppResponsivenessMetric" "MetricKit_MXAppRunTimeMetric" "MetricKit_MXAverage" "MetricKit_MXBackgroundExitData" "MetricKit_MXCPUExceptionDiagnostic" "MetricKit_MXCPUMetric" "MetricKit_MXCallStackTree" "MetricKit_MXCellularConditionMetric" "MetricKit_MXCrashDiagnostic" "MetricKit_MXDiagnostic" "MetricKit_MXDiagnosticPayload" "MetricKit_MXDiskIOMetric" "MetricKit_MXDiskWriteExceptionDiagnostic" "MetricKit_MXDisplayMetric" "MetricKit_MXForegroundExitData" "MetricKit_MXGPUMetric" "MetricKit_MXHangDiagnostic" "MetricKit_MXHistogram" "MetricKit_MXHistogramBucket" "MetricKit_MXLocationActivityMetric" "MetricKit_MXMemoryMetric" "MetricKit_MXMetaData" "MetricKit_MXMetric" "MetricKit_MXMetricManager" "MetricKit_MXMetricPayload" "MetricKit_MXNetworkTransferMetric" "MetricKit_MXSignpostIntervalData" "MetricKit_MXSignpostMetric" "MetricKit_MXUnitAveragePixelLuminance" "MetricKit_MXUnitSignalBars" ];
          "OSAKit" = [ "AppKit" "Foundation" ];
          "OSAKit_OSAScriptController" = [ "AppKit_NSController" ];
          "OSAKit_OSAScriptView" = [ "AppKit_NSTextView" ];
          "OSAKit_all" = [ "OSAKit" "OSAKit_OSALanguage" "OSAKit_OSALanguageInstance" "OSAKit_OSAScript" "OSAKit_OSAScriptController" "OSAKit_OSAScriptView" ];
          "PhotoKit" = [ "AppKit" "CoreLocation" "Foundation" ];
          "PhotoKit_PHAsset" = [ "PhotoKit_PHObject" ];
          "PhotoKit_PHAssetChangeRequest" = [ "PhotoKit_PHChangeRequest" ];
          "PhotoKit_PHAssetCollection" = [ "PhotoKit_PHCollection" ];
          "PhotoKit_PHAssetCollectionChangeRequest" = [ "PhotoKit_PHChangeRequest" ];
          "PhotoKit_PHAssetCreationRequest" = [ "PhotoKit_PHAssetChangeRequest" ];
          "PhotoKit_PHCachingImageManager" = [ "PhotoKit_PHImageManager" ];
          "PhotoKit_PHCollection" = [ "PhotoKit_PHObject" ];
          "PhotoKit_PHCollectionList" = [ "PhotoKit_PHCollection" ];
          "PhotoKit_PHCollectionListChangeRequest" = [ "PhotoKit_PHChangeRequest" ];
          "PhotoKit_PHObjectPlaceholder" = [ "PhotoKit_PHObject" ];
          "PhotoKit_PHProject" = [ "PhotoKit_PHAssetCollection" ];
          "PhotoKit_PHProjectChangeRequest" = [ "PhotoKit_PHChangeRequest" ];
          "PhotoKit_all" = [ "PhotoKit" "PhotoKit_PHAdjustmentData" "PhotoKit_PHAsset" "PhotoKit_PHAssetChangeRequest" "PhotoKit_PHAssetCollection" "PhotoKit_PHAssetCollectionChangeRequest" "PhotoKit_PHAssetCreationRequest" "PhotoKit_PHAssetResource" "PhotoKit_PHAssetResourceCreationOptions" "PhotoKit_PHAssetResourceManager" "PhotoKit_PHAssetResourceRequestOptions" "PhotoKit_PHCachingImageManager" "PhotoKit_PHChange" "PhotoKit_PHChangeRequest" "PhotoKit_PHCloudIdentifier" "PhotoKit_PHCloudIdentifierMapping" "PhotoKit_PHCollection" "PhotoKit_PHCollectionList" "PhotoKit_PHCollectionListChangeRequest" "PhotoKit_PHContentEditingInput" "PhotoKit_PHContentEditingInputRequestOptions" "PhotoKit_PHContentEditingOutput" "PhotoKit_PHFetchOptions" "PhotoKit_PHFetchResult" "PhotoKit_PHFetchResultChangeDetails" "PhotoKit_PHImageManager" "PhotoKit_PHImageRequestOptions" "PhotoKit_PHLivePhoto" "PhotoKit_PHLivePhotoEditingContext" "PhotoKit_PHLivePhotoRequestOptions" "PhotoKit_PHLocalIdentifierMapping" "PhotoKit_PHObject" "PhotoKit_PHObjectChangeDetails" "PhotoKit_PHObjectPlaceholder" "PhotoKit_PHPersistentChange" "PhotoKit_PHPersistentChangeFetchResult" "PhotoKit_PHPersistentChangeToken" "PhotoKit_PHPersistentObjectChangeDetails" "PhotoKit_PHPhotoLibrary" "PhotoKit_PHProject" "PhotoKit_PHProjectChangeRequest" "PhotoKit_PHVideoRequestOptions" ];
          "SoundAnalysis" = [ "Foundation" ];
          "SoundAnalysis_all" = [ "SoundAnalysis" "SoundAnalysis_SNAudioFileAnalyzer" "SoundAnalysis_SNAudioStreamAnalyzer" "SoundAnalysis_SNClassification" "SoundAnalysis_SNClassificationResult" "SoundAnalysis_SNClassifySoundRequest" "SoundAnalysis_SNTimeDurationConstraint" ];
          "Speech" = [ "Foundation" ];
          "Speech_SFSpeechAudioBufferRecognitionRequest" = [ "Speech_SFSpeechRecognitionRequest" ];
          "Speech_SFSpeechURLRecognitionRequest" = [ "Speech_SFSpeechRecognitionRequest" ];
          "Speech_all" = [ "Speech" "Speech_SFAcousticFeature" "Speech_SFSpeechAudioBufferRecognitionRequest" "Speech_SFSpeechRecognitionMetadata" "Speech_SFSpeechRecognitionRequest" "Speech_SFSpeechRecognitionResult" "Speech_SFSpeechRecognitionTask" "Speech_SFSpeechRecognizer" "Speech_SFSpeechURLRecognitionRequest" "Speech_SFTranscription" "Speech_SFTranscriptionSegment" "Speech_SFVoiceAnalytics" ];
          "StoreKit" = [ "AppKit" "Foundation" ];
          "StoreKit_SKCloudServiceSetupViewController" = [ "AppKit_NSViewController" ];
          "StoreKit_SKMutablePayment" = [ "StoreKit_SKPayment" ];
          "StoreKit_SKOverlayAppClipConfiguration" = [ "StoreKit_SKOverlayConfiguration" ];
          "StoreKit_SKOverlayAppConfiguration" = [ "StoreKit_SKOverlayConfiguration" ];
          "StoreKit_SKProductsRequest" = [ "StoreKit_SKRequest" ];
          "StoreKit_SKReceiptRefreshRequest" = [ "StoreKit_SKRequest" ];
          "StoreKit_SKStoreProductViewController" = [ "AppKit_NSViewController" ];
          "StoreKit_all" = [ "StoreKit" "StoreKit_SKAdImpression" "StoreKit_SKAdNetwork" "StoreKit_SKArcadeService" "StoreKit_SKCloudServiceController" "StoreKit_SKCloudServiceSetupViewController" "StoreKit_SKDownload" "StoreKit_SKMutablePayment" "StoreKit_SKOverlay" "StoreKit_SKOverlayAppClipConfiguration" "StoreKit_SKOverlayAppConfiguration" "StoreKit_SKOverlayConfiguration" "StoreKit_SKOverlayTransitionContext" "StoreKit_SKPayment" "StoreKit_SKPaymentDiscount" "StoreKit_SKPaymentQueue" "StoreKit_SKPaymentTransaction" "StoreKit_SKProduct" "StoreKit_SKProductDiscount" "StoreKit_SKProductStorePromotionController" "StoreKit_SKProductSubscriptionPeriod" "StoreKit_SKProductsRequest" "StoreKit_SKProductsResponse" "StoreKit_SKReceiptRefreshRequest" "StoreKit_SKRequest" "StoreKit_SKStoreProductViewController" "StoreKit_SKStoreReviewController" "StoreKit_SKStorefront" ];
          "UniformTypeIdentifiers" = [ "Foundation" "UniformTypeIdentifiers_UTType" ];
          "UniformTypeIdentifiers_all" = [ "UniformTypeIdentifiers" "UniformTypeIdentifiers_UTType" ];
          "UserNotifications" = [ "CoreLocation" "Foundation" ];
          "UserNotifications_UNCalendarNotificationTrigger" = [ "UserNotifications_UNNotificationTrigger" ];
          "UserNotifications_UNLocationNotificationTrigger" = [ "UserNotifications_UNNotificationTrigger" ];
          "UserNotifications_UNMutableNotificationContent" = [ "UserNotifications_UNNotificationContent" ];
          "UserNotifications_UNPushNotificationTrigger" = [ "UserNotifications_UNNotificationTrigger" ];
          "UserNotifications_UNTextInputNotificationAction" = [ "UserNotifications_UNNotificationAction" ];
          "UserNotifications_UNTextInputNotificationResponse" = [ "UserNotifications_UNNotificationResponse" ];
          "UserNotifications_UNTimeIntervalNotificationTrigger" = [ "UserNotifications_UNNotificationTrigger" ];
          "UserNotifications_all" = [ "UserNotifications" "UserNotifications_UNCalendarNotificationTrigger" "UserNotifications_UNLocationNotificationTrigger" "UserNotifications_UNMutableNotificationContent" "UserNotifications_UNNotification" "UserNotifications_UNNotificationAction" "UserNotifications_UNNotificationActionIcon" "UserNotifications_UNNotificationAttachment" "UserNotifications_UNNotificationCategory" "UserNotifications_UNNotificationContent" "UserNotifications_UNNotificationRequest" "UserNotifications_UNNotificationResponse" "UserNotifications_UNNotificationServiceExtension" "UserNotifications_UNNotificationSettings" "UserNotifications_UNNotificationSound" "UserNotifications_UNNotificationTrigger" "UserNotifications_UNPushNotificationTrigger" "UserNotifications_UNTextInputNotificationAction" "UserNotifications_UNTextInputNotificationResponse" "UserNotifications_UNTimeIntervalNotificationTrigger" "UserNotifications_UNUserNotificationCenter" ];
          "WebKit" = [ "AppKit" "Foundation" "Foundation_NSAttributedString" ];
          "WebKit_DOMAbstractView" = [ "WebKit_DOMObject" ];
          "WebKit_DOMAttr" = [ "WebKit_DOMNode" ];
          "WebKit_DOMBlob" = [ "WebKit_DOMObject" ];
          "WebKit_DOMCDATASection" = [ "WebKit_DOMText" ];
          "WebKit_DOMCSSCharsetRule" = [ "WebKit_DOMCSSRule" ];
          "WebKit_DOMCSSFontFaceRule" = [ "WebKit_DOMCSSRule" ];
          "WebKit_DOMCSSImportRule" = [ "WebKit_DOMCSSRule" ];
          "WebKit_DOMCSSMediaRule" = [ "WebKit_DOMCSSRule" ];
          "WebKit_DOMCSSPageRule" = [ "WebKit_DOMCSSRule" ];
          "WebKit_DOMCSSPrimitiveValue" = [ "WebKit_DOMCSSValue" ];
          "WebKit_DOMCSSRule" = [ "WebKit_DOMObject" ];
          "WebKit_DOMCSSRuleList" = [ "WebKit_DOMObject" ];
          "WebKit_DOMCSSStyleDeclaration" = [ "WebKit_DOMObject" ];
          "WebKit_DOMCSSStyleRule" = [ "WebKit_DOMCSSRule" ];
          "WebKit_DOMCSSStyleSheet" = [ "WebKit_DOMStyleSheet" ];
          "WebKit_DOMCSSUnknownRule" = [ "WebKit_DOMCSSRule" ];
          "WebKit_DOMCSSValue" = [ "WebKit_DOMObject" ];
          "WebKit_DOMCSSValueList" = [ "WebKit_DOMCSSValue" ];
          "WebKit_DOMCharacterData" = [ "WebKit_DOMNode" ];
          "WebKit_DOMComment" = [ "WebKit_DOMCharacterData" ];
          "WebKit_DOMCounter" = [ "WebKit_DOMObject" ];
          "WebKit_DOMDocument" = [ "WebKit_DOMNode" ];
          "WebKit_DOMDocumentFragment" = [ "WebKit_DOMNode" ];
          "WebKit_DOMDocumentType" = [ "WebKit_DOMNode" ];
          "WebKit_DOMElement" = [ "WebKit_DOMNode" ];
          "WebKit_DOMEntity" = [ "WebKit_DOMNode" ];
          "WebKit_DOMEntityReference" = [ "WebKit_DOMNode" ];
          "WebKit_DOMEvent" = [ "WebKit_DOMObject" ];
          "WebKit_DOMFile" = [ "WebKit_DOMBlob" ];
          "WebKit_DOMFileList" = [ "WebKit_DOMObject" ];
          "WebKit_DOMHTMLAnchorElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLAppletElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLAreaElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLBRElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLBaseElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLBaseFontElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLBodyElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLButtonElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLCollection" = [ "WebKit_DOMObject" ];
          "WebKit_DOMHTMLDListElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLDirectoryElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLDivElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLDocument" = [ "WebKit_DOMDocument" ];
          "WebKit_DOMHTMLElement" = [ "WebKit_DOMElement" ];
          "WebKit_DOMHTMLEmbedElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLFieldSetElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLFontElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLFormElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLFrameElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLFrameSetElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLHRElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLHeadElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLHeadingElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLHtmlElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLIFrameElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLImageElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLInputElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLLIElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLLabelElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLLegendElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLLinkElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLMapElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLMarqueeElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLMenuElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLMetaElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLModElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLOListElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLObjectElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLOptGroupElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLOptionElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLOptionsCollection" = [ "WebKit_DOMObject" ];
          "WebKit_DOMHTMLParagraphElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLParamElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLPreElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLQuoteElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLScriptElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLSelectElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLStyleElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTableCaptionElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTableCellElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTableColElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTableElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTableRowElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTableSectionElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTextAreaElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTitleElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLUListElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMImplementation" = [ "WebKit_DOMObject" ];
          "WebKit_DOMKeyboardEvent" = [ "WebKit_DOMUIEvent" ];
          "WebKit_DOMMediaList" = [ "WebKit_DOMObject" ];
          "WebKit_DOMMouseEvent" = [ "WebKit_DOMUIEvent" ];
          "WebKit_DOMMutationEvent" = [ "WebKit_DOMEvent" ];
          "WebKit_DOMNamedNodeMap" = [ "WebKit_DOMObject" ];
          "WebKit_DOMNode" = [ "WebKit_DOMObject" ];
          "WebKit_DOMNodeIterator" = [ "WebKit_DOMObject" ];
          "WebKit_DOMNodeList" = [ "WebKit_DOMObject" ];
          "WebKit_DOMObject" = [ "WebKit_WebScriptObject" ];
          "WebKit_DOMOverflowEvent" = [ "WebKit_DOMEvent" ];
          "WebKit_DOMProcessingInstruction" = [ "WebKit_DOMCharacterData" ];
          "WebKit_DOMProgressEvent" = [ "WebKit_DOMEvent" ];
          "WebKit_DOMRGBColor" = [ "WebKit_DOMObject" ];
          "WebKit_DOMRange" = [ "WebKit_DOMObject" ];
          "WebKit_DOMRect" = [ "WebKit_DOMObject" ];
          "WebKit_DOMStyleSheet" = [ "WebKit_DOMObject" ];
          "WebKit_DOMStyleSheetList" = [ "WebKit_DOMObject" ];
          "WebKit_DOMText" = [ "WebKit_DOMCharacterData" ];
          "WebKit_DOMTreeWalker" = [ "WebKit_DOMObject" ];
          "WebKit_DOMUIEvent" = [ "WebKit_DOMEvent" ];
          "WebKit_DOMWheelEvent" = [ "WebKit_DOMMouseEvent" ];
          "WebKit_DOMXPathExpression" = [ "WebKit_DOMObject" ];
          "WebKit_DOMXPathResult" = [ "WebKit_DOMObject" ];
          "WebKit_WKWebView" = [ "AppKit_NSView" ];
          "WebKit_WebDownload" = [ "Foundation_NSURLDownload" ];
          "WebKit_WebFrameView" = [ "AppKit_NSView" ];
          "WebKit_WebView" = [ "AppKit_NSView" ];
          "WebKit_all" = [ "WebKit" "WebKit_DOMAbstractView" "WebKit_DOMAttr" "WebKit_DOMBlob" "WebKit_DOMCDATASection" "WebKit_DOMCSSCharsetRule" "WebKit_DOMCSSFontFaceRule" "WebKit_DOMCSSImportRule" "WebKit_DOMCSSMediaRule" "WebKit_DOMCSSPageRule" "WebKit_DOMCSSPrimitiveValue" "WebKit_DOMCSSRule" "WebKit_DOMCSSRuleList" "WebKit_DOMCSSStyleDeclaration" "WebKit_DOMCSSStyleRule" "WebKit_DOMCSSStyleSheet" "WebKit_DOMCSSUnknownRule" "WebKit_DOMCSSValue" "WebKit_DOMCSSValueList" "WebKit_DOMCharacterData" "WebKit_DOMComment" "WebKit_DOMCounter" "WebKit_DOMDocument" "WebKit_DOMDocumentFragment" "WebKit_DOMDocumentType" "WebKit_DOMElement" "WebKit_DOMEntity" "WebKit_DOMEntityReference" "WebKit_DOMEvent" "WebKit_DOMFile" "WebKit_DOMFileList" "WebKit_DOMHTMLAnchorElement" "WebKit_DOMHTMLAppletElement" "WebKit_DOMHTMLAreaElement" "WebKit_DOMHTMLBRElement" "WebKit_DOMHTMLBaseElement" "WebKit_DOMHTMLBaseFontElement" "WebKit_DOMHTMLBodyElement" "WebKit_DOMHTMLButtonElement" "WebKit_DOMHTMLCollection" "WebKit_DOMHTMLDListElement" "WebKit_DOMHTMLDirectoryElement" "WebKit_DOMHTMLDivElement" "WebKit_DOMHTMLDocument" "WebKit_DOMHTMLElement" "WebKit_DOMHTMLEmbedElement" "WebKit_DOMHTMLFieldSetElement" "WebKit_DOMHTMLFontElement" "WebKit_DOMHTMLFormElement" "WebKit_DOMHTMLFrameElement" "WebKit_DOMHTMLFrameSetElement" "WebKit_DOMHTMLHRElement" "WebKit_DOMHTMLHeadElement" "WebKit_DOMHTMLHeadingElement" "WebKit_DOMHTMLHtmlElement" "WebKit_DOMHTMLIFrameElement" "WebKit_DOMHTMLImageElement" "WebKit_DOMHTMLInputElement" "WebKit_DOMHTMLLIElement" "WebKit_DOMHTMLLabelElement" "WebKit_DOMHTMLLegendElement" "WebKit_DOMHTMLLinkElement" "WebKit_DOMHTMLMapElement" "WebKit_DOMHTMLMarqueeElement" "WebKit_DOMHTMLMenuElement" "WebKit_DOMHTMLMetaElement" "WebKit_DOMHTMLModElement" "WebKit_DOMHTMLOListElement" "WebKit_DOMHTMLObjectElement" "WebKit_DOMHTMLOptGroupElement" "WebKit_DOMHTMLOptionElement" "WebKit_DOMHTMLOptionsCollection" "WebKit_DOMHTMLParagraphElement" "WebKit_DOMHTMLParamElement" "WebKit_DOMHTMLPreElement" "WebKit_DOMHTMLQuoteElement" "WebKit_DOMHTMLScriptElement" "WebKit_DOMHTMLSelectElement" "WebKit_DOMHTMLStyleElement" "WebKit_DOMHTMLTableCaptionElement" "WebKit_DOMHTMLTableCellElement" "WebKit_DOMHTMLTableColElement" "WebKit_DOMHTMLTableElement" "WebKit_DOMHTMLTableRowElement" "WebKit_DOMHTMLTableSectionElement" "WebKit_DOMHTMLTextAreaElement" "WebKit_DOMHTMLTitleElement" "WebKit_DOMHTMLUListElement" "WebKit_DOMImplementation" "WebKit_DOMKeyboardEvent" "WebKit_DOMMediaList" "WebKit_DOMMouseEvent" "WebKit_DOMMutationEvent" "WebKit_DOMNamedNodeMap" "WebKit_DOMNode" "WebKit_DOMNodeIterator" "WebKit_DOMNodeList" "WebKit_DOMObject" "WebKit_DOMOverflowEvent" "WebKit_DOMProcessingInstruction" "WebKit_DOMProgressEvent" "WebKit_DOMRGBColor" "WebKit_DOMRange" "WebKit_DOMRect" "WebKit_DOMStyleSheet" "WebKit_DOMStyleSheetList" "WebKit_DOMText" "WebKit_DOMTreeWalker" "WebKit_DOMUIEvent" "WebKit_DOMWheelEvent" "WebKit_DOMXPathExpression" "WebKit_DOMXPathResult" "WebKit_WKBackForwardList" "WebKit_WKBackForwardListItem" "WebKit_WKContentRuleList" "WebKit_WKContentRuleListStore" "WebKit_WKContentWorld" "WebKit_WKDownload" "WebKit_WKFindConfiguration" "WebKit_WKFindResult" "WebKit_WKFrameInfo" "WebKit_WKHTTPCookieStore" "WebKit_WKNavigation" "WebKit_WKNavigationAction" "WebKit_WKNavigationResponse" "WebKit_WKOpenPanelParameters" "WebKit_WKPDFConfiguration" "WebKit_WKPreferences" "WebKit_WKProcessPool" "WebKit_WKScriptMessage" "WebKit_WKSecurityOrigin" "WebKit_WKSnapshotConfiguration" "WebKit_WKUserContentController" "WebKit_WKUserScript" "WebKit_WKWebView" "WebKit_WKWebViewConfiguration" "WebKit_WKWebpagePreferences" "WebKit_WKWebsiteDataRecord" "WebKit_WKWebsiteDataStore" "WebKit_WKWindowFeatures" "WebKit_WebArchive" "WebKit_WebBackForwardList" "WebKit_WebDataSource" "WebKit_WebDownload" "WebKit_WebFrame" "WebKit_WebFrameView" "WebKit_WebHistory" "WebKit_WebHistoryItem" "WebKit_WebPreferences" "WebKit_WebResource" "WebKit_WebScriptObject" "WebKit_WebUndefined" "WebKit_WebView" ];
          "alloc" = [ "objc2?/alloc" "block2?/alloc" ];
          "apple" = [ "objc2?/apple" "block2?/apple" ];
          "block" = [ "block2" ];
          "block2" = [ "dep:block2" ];
          "default" = [ "std" "apple" ];
          "dispatch" = [ "dep:dispatch" ];
          "gnustep-1-7" = [ "objc2?/gnustep-1-7" "block2?/gnustep-1-7" ];
          "gnustep-1-8" = [ "gnustep-1-7" "objc2?/gnustep-1-8" "block2?/gnustep-1-8" ];
          "gnustep-1-9" = [ "gnustep-1-8" "objc2?/gnustep-1-9" "block2?/gnustep-1-9" ];
          "gnustep-2-0" = [ "gnustep-1-9" "objc2?/gnustep-2-0" "block2?/gnustep-2-0" ];
          "gnustep-2-1" = [ "gnustep-2-0" "objc2?/gnustep-2-1" "block2?/gnustep-2-1" ];
          "objc2" = [ "dep:objc2" ];
          "objective-c" = [ "objc2" ];
          "std" = [ "alloc" "objc2?/std" "block2?/std" ];
          "unstable-example-basic_usage" = [ "Foundation" "Foundation_NSArray" "Foundation_NSDictionary" "Foundation_NSEnumerator" ];
          "unstable-example-browser" = [ "apple" "AppKit" "AppKit_NSButton" "AppKit_NSColor" "AppKit_NSMenu" "AppKit_NSMenuItem" "AppKit_NSStackView" "AppKit_NSTextAttachmentCell" "AppKit_NSTextField" "AppKit_NSTextView" "AppKit_NSWindow" "Foundation" "Foundation_NSString" "Foundation_NSURL" "Foundation_NSURLRequest" "WebKit" "WebKit_WKNavigation" "WebKit_WKWebView" ];
          "unstable-example-delegate" = [ "apple" "Foundation" "Foundation_NSString" "AppKit" "AppKit_NSResponder" ];
          "unstable-example-nspasteboard" = [ "apple" "Foundation" "Foundation_NSArray" "Foundation_NSDictionary" "Foundation_NSString" "AppKit" "AppKit_NSPasteboard" ];
          "unstable-example-speech_synthesis" = [ "apple" "Foundation" "Foundation_NSString" ];
          "unstable-frameworks-all" = [ "unstable-frameworks-ios" "unstable-frameworks-macos-13" ];
          "unstable-frameworks-gnustep" = [ "AppKit_all" "Foundation_all" ];
          "unstable-frameworks-gnustep-32bit" = [ "Foundation_all" ];
          "unstable-frameworks-ios" = [ "Foundation_all" "unstable-example-basic_usage" "unstable-example-speech_synthesis" ];
          "unstable-frameworks-macos-10-13" = [ "CloudKit_all" "Contacts_all" "CoreLocation_all" "EventKit_all" "ExternalAccessory_all" "GameController_all" "GameKit_all" "LocalAuthentication_all" "MapKit_all" "MediaPlayer_all" "MetalKit_all" "Metal_all" "PhotoKit_all" "unstable-example-delegate" "unstable-example-nspasteboard" "unstable-example-speech_synthesis" "unstable-frameworks-macos-10-7" ];
          "unstable-frameworks-macos-10-7" = [ "AppKit_all" "Automator_all" "CoreAnimation_all" "CoreData_all" "ExceptionHandling_all" "Foundation_all" "InputMethodKit_all" "OSAKit_all" "StoreKit_all" "WebKit_all" "unstable-example-basic_usage" ];
          "unstable-frameworks-macos-11" = [ "Accessibility_all" "ClassKit_all" "UniformTypeIdentifiers_all" "unstable-frameworks-macos-10-13" ];
          "unstable-frameworks-macos-12" = [ "DataDetection_all" "LocalAuthenticationEmbeddedUI_all" "MailKit_all" "MetricKit_all" "unstable-frameworks-macos-11" ];
          "unstable-frameworks-macos-13" = [ "AdServices_all" "AdSupport_all" "AuthenticationServices_all" "AutomaticAssessmentConfiguration_all" "BackgroundAssets_all" "BusinessChat_all" "CallKit_all" "DeviceCheck_all" "ExtensionKit_all" "FileProviderUI_all" "FileProvider_all" "HealthKit_all" "IdentityLookup_all" "LinkPresentation_all" "MetalFX_all" "SoundAnalysis_all" "Speech_all" "UserNotifications_all" "unstable-example-browser" "unstable-frameworks-macos-12" ];
        };
        resolvedDefaultFeatures = [ "Foundation" "Foundation_NSAppleEventDescriptor" "Foundation_NSArray" "Foundation_NSAttributedString" "Foundation_NSData" "Foundation_NSDictionary" "Foundation_NSEnumerator" "Foundation_NSError" "Foundation_NSHashTable" "Foundation_NSMapTable" "Foundation_NSMutableAttributedString" "Foundation_NSNumber" "Foundation_NSProcessInfo" "Foundation_NSProgress" "Foundation_NSSet" "Foundation_NSString" "Foundation_NSThread" "Foundation_NSValue" "alloc" "apple" "block" "block2" "default" "dispatch" "objc2" "objective-c" "std" ];
      };
      "ignore" = rec {
        crateName = "ignore";
        version = "0.4.22";
        edition = "2021";
        sha256 = "1wcaqpi6djqgi1brghrdyw4d5qgnwzhqrqyn4mar4vp677gi0s5l";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
          }
          {
            name = "globset";
            packageId = "globset";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "regex-automata";
            packageId = "regex-automata 0.4.6";
            usesDefaultFeatures = false;
            features = [ "std" "perf" "syntax" "meta" "nfa" "hybrid" "dfa-onepass" ];
          }
          {
            name = "same-file";
            packageId = "same-file";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
        };
      };
      "image" = rec {
        crateName = "image";
        version = "0.25.1";
        edition = "2021";
        sha256 = "049xrrdvxaj23zlhqwzmz6j8b9xcc79smgi4qn97cqkkwxhdcm7x";
        authors = [
          "The image-rs Developers"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "extern_crate_alloc" ];
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "exr";
            packageId = "exr";
            optional = true;
          }
          {
            name = "image-webp";
            packageId = "image-webp";
            optional = true;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "png";
            packageId = "png";
            optional = true;
          }
          {
            name = "zune-core";
            packageId = "zune-core";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zune-jpeg";
            packageId = "zune-jpeg";
            optional = true;
          }
        ];
        features = {
          "avif" = [ "dep:ravif" "dep:rgb" ];
          "avif-native" = [ "dep:mp4parse" "dep:dcv-color-primitives" "dep:dav1d" ];
          "default" = [ "rayon" "default-formats" ];
          "default-formats" = [ "avif" "bmp" "dds" "exr" "ff" "gif" "hdr" "ico" "jpeg" "png" "pnm" "qoi" "tga" "tiff" "webp" ];
          "exr" = [ "dep:exr" ];
          "gif" = [ "dep:gif" "dep:color_quant" ];
          "ico" = [ "bmp" "png" ];
          "jpeg" = [ "dep:zune-core" "dep:zune-jpeg" ];
          "nasm" = [ "ravif?/asm" ];
          "png" = [ "dep:png" ];
          "qoi" = [ "dep:qoi" ];
          "rayon" = [ "dep:rayon" ];
          "tiff" = [ "dep:tiff" ];
          "webp" = [ "dep:image-webp" ];
        };
        resolvedDefaultFeatures = [ "bmp" "exr" "hdr" "jpeg" "png" "pnm" "tga" "webp" ];
      };
      "image-webp" = rec {
        crateName = "image-webp";
        version = "0.1.2";
        edition = "2021";
        sha256 = "0b97mpyy8drb2r07rjchd9k035g5bccczz87znfphk9wb22v0c6p";
        dependencies = [
          {
            name = "byteorder-lite";
            packageId = "byteorder-lite";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];

      };
      "indexmap" = rec {
        crateName = "indexmap";
        version = "2.2.6";
        edition = "2021";
        sha256 = "09hgwi2ig0wyj5rjziia76zmhgfj95k0jb4ic3iiawm4vlavg3qn";
        dependencies = [
          {
            name = "equivalent";
            packageId = "equivalent";
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown";
            usesDefaultFeatures = false;
            features = [ "raw" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "borsh" = [ "dep:borsh" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-rayon" = [ "dep:rustc-rayon" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "inflections" = rec {
        crateName = "inflections";
        version = "1.1.1";
        edition = "2015";
        sha256 = "0yl3gas612q25c72lwf04405i87yxr02vgv3ckcnz2fyvhpmhmx2";
        authors = [
          "Caleb Meredith <calebmeredith8@gmail.com>"
        ];

      };
      "inotify 0.10.2" = rec {
        crateName = "inotify";
        version = "0.10.2";
        edition = "2018";
        sha256 = "1k2m6a95827yspax1icmwiz4szr7c01w3dnn2b2bil4hfvcnilgx";
        authors = [
          "Hanno Braun <mail@hannobraun.de>"
          "Félix Saparelli <me@passcod.name>"
          "Cristian Kubis <cristian.kubis@tsunix.de>"
          "Frank Denis <github@pureftpd.org>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "inotify-sys";
            packageId = "inotify-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = [ "stream" ];
          "futures-core" = [ "dep:futures-core" ];
          "stream" = [ "futures-core" "tokio" ];
          "tokio" = [ "dep:tokio" ];
        };
      };
      "inotify 0.9.6" = rec {
        crateName = "inotify";
        version = "0.9.6";
        edition = "2018";
        sha256 = "1zxb04c4qccp8wnr3v04l503qpxzxzzzph61amlqbsslq4z9s1pq";
        authors = [
          "Hanno Braun <mail@hannobraun.de>"
          "Félix Saparelli <me@passcod.name>"
          "Cristian Kubis <cristian.kubis@tsunix.de>"
          "Frank Denis <github@pureftpd.org>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "inotify-sys";
            packageId = "inotify-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = [ "stream" ];
          "futures-core" = [ "dep:futures-core" ];
          "stream" = [ "futures-core" "tokio" ];
          "tokio" = [ "dep:tokio" ];
        };
      };
      "inotify-sys" = rec {
        crateName = "inotify-sys";
        version = "0.1.5";
        edition = "2015";
        sha256 = "1syhjgvkram88my04kv03s0zwa66mdwa5v7ddja3pzwvx2sh4p70";
        authors = [
          "Hanno Braun <hb@hannobraun.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "instant" = rec {
        crateName = "instant";
        version = "0.1.12";
        edition = "2018";
        sha256 = "0b2bx5qdlwayriidhrag8vhy10kdfimfhmb3jnjmsz2h9j1bwnvs";
        authors = [
          "sebcrozet <developer@crozet.re>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "js-sys" = [ "dep:js-sys" ];
          "stdweb" = [ "dep:stdweb" ];
          "wasm-bindgen" = [ "js-sys" "wasm-bindgen_rs" "web-sys" ];
          "wasm-bindgen_rs" = [ "dep:wasm-bindgen_rs" ];
          "web-sys" = [ "dep:web-sys" ];
        };
      };
      "io-kit-sys" = rec {
        crateName = "io-kit-sys";
        version = "0.4.1";
        edition = "2021";
        sha256 = "0ysy5k3wf54yangy25hkj10xx332cj2hb937xasg6riziv7yczk1";
        authors = [
          "Junji Takakura <j.takakura@gmail.com>"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "mach2";
            packageId = "mach2";
          }
        ];

      };
      "io-lifetimes" = rec {
        crateName = "io-lifetimes";
        version = "1.0.11";
        edition = "2018";
        sha256 = "1hph5lz4wd3drnn6saakwxr497liznpfnv70via6s0v8x6pbkrza";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            optional = true;
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: (!(target."windows" or false));
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            optional = true;
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Storage_FileSystem" "Win32_Networking_WinSock" "Win32_Security" "Win32_System_IO" "Win32_System_Threading" ];
          }
        ];
        features = {
          "async-std" = [ "dep:async-std" ];
          "close" = [ "libc" "hermit-abi" "windows-sys" ];
          "default" = [ "close" ];
          "fs-err" = [ "dep:fs-err" ];
          "hermit-abi" = [ "dep:hermit-abi" ];
          "libc" = [ "dep:libc" ];
          "mio" = [ "dep:mio" ];
          "os_pipe" = [ "dep:os_pipe" ];
          "socket2" = [ "dep:socket2" ];
          "tokio" = [ "dep:tokio" ];
          "windows-sys" = [ "dep:windows-sys" ];
        };
        resolvedDefaultFeatures = [ "close" "hermit-abi" "libc" "windows-sys" ];
      };
      "is_terminal_polyfill" = rec {
        crateName = "is_terminal_polyfill";
        version = "1.70.0";
        edition = "2021";
        sha256 = "0018q5cf3rifbnzfc1w1z1xcx9c6i7xlywp2n0fw4limq1vqaizq";
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "itertools" = rec {
        crateName = "itertools";
        version = "0.12.1";
        edition = "2018";
        sha256 = "0s95jbb3ndj1lvfxyq5wanc0fm0r6hg6q4ngb92qlfdxvci10ads";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_alloc" "use_std" ];
      };
      "itoa" = rec {
        crateName = "itoa";
        version = "1.0.11";
        edition = "2018";
        sha256 = "0nv9cqjwzr3q58qz84dcz63ggc54yhf1yqar1m858m1kfd4g3wa9";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "jni" = rec {
        crateName = "jni";
        version = "0.21.1";
        edition = "2018";
        sha256 = "15wczfkr2r45slsljby12ymf2hij8wi5b104ghck9byjnwmsm1qs";
        authors = [
          "Josh Chase <josh@prevoty.com>"
        ];
        dependencies = [
          {
            name = "cesu8";
            packageId = "cesu8";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "combine";
            packageId = "combine";
          }
          {
            name = "jni-sys";
            packageId = "jni-sys";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.45.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Globalization" ];
          }
        ];
        buildDependencies = [
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "invocation" = [ "java-locator" "libloading" ];
          "java-locator" = [ "dep:java-locator" ];
          "libloading" = [ "dep:libloading" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "jni-sys" = rec {
        crateName = "jni-sys";
        version = "0.3.0";
        edition = "2015";
        sha256 = "0c01zb9ygvwg9wdx2fii2d39myzprnpqqhy7yizxvjqp5p04pbwf";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];

      };
      "jobserver" = rec {
        crateName = "jobserver";
        version = "0.1.31";
        edition = "2021";
        sha256 = "0vnyfxr5gm03j3lpnd1zswnyvqa40kbssy08pz2m35salfm9kc6j";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
        ];

      };
      "js-sys" = rec {
        crateName = "js-sys";
        version = "0.3.69";
        edition = "2018";
        sha256 = "0v99rz97asnzapb0jsc3jjhvxpfxr7h7qd97yqyrf9i7viimbh99";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];

      };
      "khronos-egl" = rec {
        crateName = "khronos-egl";
        version = "6.0.0";
        edition = "2021";
        sha256 = "0xnzdx0n1bil06xmh8i1x6dbxvk7kd2m70bbm6nw1qzc43r1vbka";
        authors = [
          "Timothée Haudebourg <author@haudebourg.net>"
          "Sean Kerr <sean@metatomic.io>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "libloading";
            packageId = "libloading 0.8.3";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
            optional = true;
          }
        ];
        features = {
          "1_1" = [ "1_0" ];
          "1_2" = [ "1_1" ];
          "1_3" = [ "1_2" ];
          "1_4" = [ "1_3" ];
          "1_5" = [ "1_4" ];
          "default" = [ "1_5" ];
          "dynamic" = [ "libloading" ];
          "libloading" = [ "dep:libloading" ];
          "pkg-config" = [ "dep:pkg-config" ];
          "static" = [ "pkg-config" ];
        };
        resolvedDefaultFeatures = [ "1_0" "1_1" "1_2" "1_3" "1_4" "1_5" "default" "dynamic" "libloading" "no-pkg-config" "pkg-config" "static" ];
      };
      "khronos_api" = rec {
        crateName = "khronos_api";
        version = "3.1.0";
        edition = "2015";
        sha256 = "1p0xj5mlbagqyvvnv8wmv3cr7l9y1m153888pxqwg3vk3mg5inz2";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
          "Corey Richardson"
          "Arseny Kapoulkine"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];

      };
      "kqueue" = rec {
        crateName = "kqueue";
        version = "1.0.8";
        edition = "2018";
        sha256 = "033x2knkbv8d3jy6i9r32jcgsq6zm3g97zh5la43amkv3g5g2ivl";
        authors = [
          "William Orr <will@worrbase.com>"
        ];
        dependencies = [
          {
            name = "kqueue-sys";
            packageId = "kqueue-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "kqueue-sys" = rec {
        crateName = "kqueue-sys";
        version = "1.0.4";
        edition = "2018";
        sha256 = "12w3wi90y4kwis4k9g6fp0kqjdmc6l00j16g8mgbhac7vbzjb5pd";
        authors = [
          "William Orr <will@worrbase.com>"
          "Daniel (dmilith) Dettlaff <dmilith@me.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "ktx2" = rec {
        crateName = "ktx2";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0f781irq66llyrqxwz7yh56nnxdrlvm3j0bss84y80pcm445xml7";
        authors = [
          "Benjamin Saunders <ben.e.saunders@gmail.com>"
          "Connor Fitzgerald <connorwadefitzgerald@gmail.com>"
          "f3kilo <f3kilo@yandex.ru>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.4.0";
        edition = "2015";
        sha256 = "0in6ikhw8mgl33wjv6q6xfrb5b9jr16q8ygjy803fay4zcisvaz2";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin" = [ "dep:spin" ];
          "spin_no_std" = [ "spin" ];
        };
      };
      "lazycell" = rec {
        crateName = "lazycell";
        version = "1.3.0";
        edition = "2015";
        sha256 = "0m8gw7dn30i0zjjpjdyf6pc16c34nl71lpv461mix50x3p70h3c3";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Nikita Pekin <contact@nikitapek.in>"
        ];
        features = {
          "clippy" = [ "dep:clippy" ];
          "nightly-testing" = [ "clippy" "nightly" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "lebe" = rec {
        crateName = "lebe";
        version = "0.5.2";
        edition = "2018";
        sha256 = "1j2l6chx19qpa5gqcw434j83gyskq3g2cnffrbl3842ymlmpq203";
        authors = [
          "johannesvollmer <johannes596@t-online.de>"
        ];

      };
      "lewton" = rec {
        crateName = "lewton";
        version = "0.10.2";
        edition = "2015";
        sha256 = "0c60fn004awg5c3cvx82d6na2pirf0qdz9w3b93mbcdakbglhyvp";
        authors = [
          "est31 <MTest31@outlook.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "ogg";
            packageId = "ogg";
            optional = true;
          }
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [ "alloc" ];
          }
        ];
        devDependencies = [
          {
            name = "ogg";
            packageId = "ogg";
          }
        ];
        features = {
          "async_ogg" = [ "ogg" "ogg/async" "futures" "tokio-io" ];
          "default" = [ "ogg" ];
          "futures" = [ "dep:futures" ];
          "ogg" = [ "dep:ogg" ];
          "tokio-io" = [ "dep:tokio-io" ];
        };
        resolvedDefaultFeatures = [ "default" "ogg" ];
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.154";
        edition = "2015";
        sha256 = "0inkwrnwzrr1kw75x944ihdajrhhldkgg4irx1n19y9gp4w36x5f";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "rustc-std-workspace-core" = [ "dep:rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "extra_traits" "std" "use_std" ];
      };
      "libloading 0.7.4" = rec {
        crateName = "libloading";
        version = "0.7.4";
        edition = "2015";
        sha256 = "17wbccnjvhjd9ibh019xcd8kjvqws8lqgq86lqkpbgig7gyq0wxn";
        authors = [
          "Simonas Kazlauskas <libloading@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "errhandlingapi" "libloaderapi" ];
          }
        ];

      };
      "libloading 0.8.3" = rec {
        crateName = "libloading";
        version = "0.8.3";
        edition = "2015";
        sha256 = "06awqx9glr3i7mcs6csscr8d6dbd9rrk6yglilmdmsmhns7ijahc";
        authors = [
          "Simonas Kazlauskas <libloading@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.5";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "libm" = rec {
        crateName = "libm";
        version = "0.2.8";
        edition = "2018";
        sha256 = "0n4hk1rs8pzw8hdfmwn96c4568s93kfxqgcqswr7sajd2diaihjf";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        features = {
          "musl-reference-tests" = [ "rand" ];
          "rand" = [ "dep:rand" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "libredox" = rec {
        crateName = "libredox";
        version = "0.0.2";
        edition = "2021";
        sha256 = "01v6pb09j7dl2gnbvzz6zmy2k4zyxjjzvl7wacwjjffqsxajry9s";
        authors = [
          "4lDO2 <4lDO2@protonmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.4.1";
          }
        ];
        features = {
          "default" = [ "call" ];
          "scheme" = [ "call" ];
        };
        resolvedDefaultFeatures = [ "call" "default" ];
      };
      "libudev-sys" = rec {
        crateName = "libudev-sys";
        version = "0.1.4";
        edition = "2015";
        links = "libudev";
        sha256 = "09236fdzlx9l0dlrsc6xx21v5x8flpfm3d5rjq9jr5ivlas6k11w";
        authors = [
          "David Cuddeback <david.cuddeback@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];

      };
      "linux-raw-sys 0.3.8" = rec {
        crateName = "linux-raw-sys";
        version = "0.3.8";
        edition = "2018";
        sha256 = "068mbigb3frrxvbi5g61lx25kksy98f2qgkvc4xg8zxznwp98lzg";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" "general" "errno" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "no_std" ];
        };
        resolvedDefaultFeatures = [ "errno" "general" "ioctl" "no_std" ];
      };
      "linux-raw-sys 0.4.13" = rec {
        crateName = "linux-raw-sys";
        version = "0.4.13";
        edition = "2021";
        sha256 = "172k2c6422gsc914ig8rh99mb9yc7siw6ikc3d9xw1k7vx0s3k81";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" "general" "errno" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "no_std" ];
        };
        resolvedDefaultFeatures = [ "elf" "errno" "general" "if_ether" "ioctl" "net" "netlink" "no_std" "prctl" "system" "xdp" ];
      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.4.12";
        edition = "2021";
        sha256 = "05qvxa6g27yyva25a5ghsg85apdxkvr77yhkyhapj6r8vnf8pbq7";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "atomic_usize" ];
          "owning_ref" = [ "dep:owning_ref" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "arc_lock" "atomic_usize" "default" ];
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.21";
        edition = "2021";
        sha256 = "074hldq1q8rlzq2s2qa8f25hj4s3gpw71w64vdwzjd01a4g8rvch";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "kv_serde" = [ "kv_std" "value-bag/serde" "serde" ];
          "kv_std" = [ "std" "kv" "value-bag/error" ];
          "kv_sval" = [ "kv" "value-bag/sval" "sval" "sval_ref" ];
          "kv_unstable" = [ "kv" "value-bag" ];
          "kv_unstable_serde" = [ "kv_serde" "kv_unstable_std" ];
          "kv_unstable_std" = [ "kv_std" "kv_unstable" ];
          "kv_unstable_sval" = [ "kv_sval" "kv_unstable" ];
          "serde" = [ "dep:serde" ];
          "sval" = [ "dep:sval" ];
          "sval_ref" = [ "dep:sval_ref" ];
          "value-bag" = [ "dep:value-bag" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "loom" = rec {
        crateName = "loom";
        version = "0.7.2";
        edition = "2018";
        sha256 = "1jpszf9qxv8ydpsm2h9vcyvxvyxcfkhmmfbylzd4gfbc0k40v7j1";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "generator";
            packageId = "generator";
          }
          {
            name = "scoped-tls";
            packageId = "scoped-tls";
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            features = [ "env-filter" ];
          }
        ];
        features = {
          "checkpoint" = [ "serde" "serde_json" ];
          "futures" = [ "pin-utils" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "lz4_flex" = rec {
        crateName = "lz4_flex";
        version = "0.11.3";
        edition = "2021";
        sha256 = "1xg3h3y0ghnq3widdssd36s02pvy29c0afbwgq6mh3ibmri12xkm";
        authors = [
          "Pascal Seitz <pascal.seitz@gmail.com>"
          "Arthur Silva <arthurprs@gmail.com>"
          "ticki <Ticki@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "twox-hash";
            packageId = "twox-hash";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "safe-encode" "safe-decode" "frame" ];
          "frame" = [ "std" "dep:twox-hash" ];
        };
        resolvedDefaultFeatures = [ "frame" "std" ];
      };
      "mach2" = rec {
        crateName = "mach2";
        version = "0.4.2";
        edition = "2015";
        sha256 = "02gpyq89rcrqdbz4hgp5bpjas21dllxfc70jgw8vj0iaxg6mbf8r";
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "malloc_buf" = rec {
        crateName = "malloc_buf";
        version = "0.0.6";
        edition = "2015";
        sha256 = "1jqr77j89pwszv51fmnknzvd53i1nkmcr8rjrvcxhm4dx1zr1fv2";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "matchers" = rec {
        crateName = "matchers";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0n2mbk7lg2vf962c8xwzdq96yrc9i0p8dbmm4wa1nnkcp1dhfqw2";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "regex-automata";
            packageId = "regex-automata 0.1.10";
          }
        ];

      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.7.2";
        edition = "2021";
        sha256 = "07bcqxb0vx4ji0648ny5xsicjnpma95x1n07v7mi7jrhsz2l11kc";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "logging" = [ "dep:log" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
          "std" = [ "alloc" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "memmap2" = rec {
        crateName = "memmap2";
        version = "0.9.4";
        edition = "2018";
        sha256 = "08hkmvri44j6h14lyq4yw5ipsp91a9jacgiww4bs9jm8whi18xgy";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
        ];
        features = {
          "stable_deref_trait" = [ "dep:stable_deref_trait" ];
        };
      };
      "memoffset 0.7.1" = rec {
        crateName = "memoffset";
        version = "0.7.1";
        edition = "2015";
        sha256 = "1x2zv8hv9c9bvgmhsjvr9bymqwyxvgbca12cm8xkhpyy5k1r7s2x";
        authors = [
          "Gilad Naaman <gilad.naaman@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "memoffset 0.9.1" = rec {
        crateName = "memoffset";
        version = "0.9.1";
        edition = "2015";
        sha256 = "12i17wh9a9plx869g7j4whf62xw68k5zd4k0k5nh6ys5mszid028";
        authors = [
          "Gilad Naaman <gilad.naaman@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "meshopt" = rec {
        crateName = "meshopt";
        version = "0.2.1";
        edition = "2021";
        sha256 = "03yqbgnadp4jnsgiq4zjfzl26sxaa0a2lnqhx0qbp9j5ylxbj6da";
        authors = [
          "Graham Wihlidal <graham@wihlidal.ca>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "float-cmp";
            packageId = "float-cmp";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "bindgen" = [ "dep:bindgen" ];
          "generate_bindings" = [ "bindgen" ];
        };
      };
      "metal" = rec {
        crateName = "metal";
        version = "0.27.0";
        edition = "2021";
        sha256 = "09bz461vyi9kw69k55gy2fpd3hz17j6g2n0v08gm3glc7yap6gy4";
        authors = [
          "gfx-rs developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "block";
            packageId = "block";
          }
          {
            name = "core-graphics-types";
            packageId = "core-graphics-types";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "objc";
            packageId = "objc";
            features = [ "objc_exception" ];
          }
          {
            name = "paste";
            packageId = "paste";
          }
        ];
        features = {
          "default" = [ "link" ];
          "dispatch" = [ "dep:dispatch" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "metis" = rec {
        crateName = "metis";
        version = "0.2.1";
        edition = "2021";
        sha256 = "0pq4z1p3ww5597040hmj3fd3imlm9ark3g4pclkcvycvcpf05pm9";
        authors = [
          "Hubert Hirtz <hubert@hirtz.pm>"
          "Cedric Chevalier <cedric.chevalier@cea.fr>"
        ];
        dependencies = [
          {
            name = "metis-sys";
            packageId = "metis-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "metis-sys/default" ];
          "use-system" = [ "metis-sys/use-system" ];
          "vendored" = [ "metis-sys/vendored" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "metis-sys" = rec {
        crateName = "metis-sys";
        version = "0.3.1";
        edition = "2021";
        sha256 = "10bmmb9m0vlkwmnq3rlcnsm0ff0k5g36v0q3wx6q142f8681hvmp";
        authors = [
          "Hubert Hirtz <hubert@hirtz.pm>"
          "Cedric Chevalier <cedric.chevalier@cea.fr>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            optional = true;
            features = [ "parallel" ];
          }
        ];
        features = {
          "bindgen" = [ "dep:bindgen" ];
          "default" = [ "vendored" "force-optimize-vendor" ];
          "force-optimize-vendor" = [ "vendored" ];
          "generate-bindings" = [ "vendored" "bindgen" ];
          "use-system" = [ "bindgen" ];
          "vendored" = [ "dep:cc" ];
        };
        resolvedDefaultFeatures = [ "default" "force-optimize-vendor" "vendored" ];
      };
      "minimal-lexical" = rec {
        crateName = "minimal-lexical";
        version = "0.2.1";
        edition = "2018";
        sha256 = "16ppc5g84aijpri4jzv14rvcnslvlpphbszc7zzp6vfkddf4qdb8";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "minimp3-sys" = rec {
        crateName = "minimp3-sys";
        version = "0.3.2";
        edition = "2015";
        sha256 = "144vmf3s89kad0smjprzigcp2c9r5dm95n4ydilrbp399irp6772";
        authors = [
          "germän gômez <germangb42@gmail.com>"
          "Erin Moon <erin@hashbang.sh>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "minimp3_fixed" = rec {
        crateName = "minimp3_fixed";
        version = "0.5.4";
        edition = "2021";
        sha256 = "06wmic6gy3k3jmbz767clapx98v20aqmc9kc76p9gnkmgr7g3c22";
        authors = [
          "germän gômez <germangb42@gmail.com>"
          "Erin Moon <erin@hashbang.sh>"
          "BOB450"
        ];
        dependencies = [
          {
            name = "minimp3-sys";
            packageId = "minimp3-sys";
          }
          {
            name = "slice-ring-buffer";
            packageId = "slice-ring-buffer";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "async_tokio" = [ "tokio" ];
          "tokio" = [ "dep:tokio" ];
          "unix_sysv" = [ "slice-ring-buffer/unix_sysv" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "miniz_oxide" = rec {
        crateName = "miniz_oxide";
        version = "0.7.2";
        edition = "2018";
        sha256 = "19qlxb21s6kabgqq61mk7kd1qk2invyygj076jz6i1gj2lz1z0cx";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "adler";
            packageId = "adler";
            usesDefaultFeatures = false;
          }
          {
            name = "simd-adler32";
            packageId = "simd-adler32";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "with-alloc" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "adler/rustc-dep-of-std" ];
          "simd" = [ "simd-adler32" ];
          "simd-adler32" = [ "dep:simd-adler32" ];
        };
        resolvedDefaultFeatures = [ "default" "simd" "simd-adler32" "with-alloc" ];
      };
      "mint" = rec {
        crateName = "mint";
        version = "0.5.9";
        edition = "2018";
        sha256 = "1zw5glv8z2d99c82jy2za97hh9p6377xmf4rbwz7jynsdfxfngg5";
        authors = [
          "Benjamin Saunders <ben.e.saunders@gmail.com>"
          "Dzmitry Malyshau <kvarkus@gmail.com>"
          "Evgenii P. <eupn@protonmail.com>"
          "George Burton <burtonageo@gmail.com>"
          "Ilya Bogdanov <fumlead@gmail.com>"
          "Osspial <osspial@gmail.com>"
          "Pâris DOUADY <paris.douady@hotmail.fr>"
          "Rémi Lauzier <remilauzier@protonmail.com>"
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "mio" = rec {
        crateName = "mio";
        version = "0.8.11";
        edition = "2018";
        sha256 = "034byyl0ardml5yliy1hmvx8arkmn9rv479pid794sm07ia519m4";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "wasi";
            packageId = "wasi";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_Storage_FileSystem" "Win32_System_IO" "Win32_System_WindowsProgramming" ];
          }
        ];
        features = {
          "default" = [ "log" ];
          "log" = [ "dep:log" ];
          "os-ext" = [ "os-poll" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_Security" ];
        };
        resolvedDefaultFeatures = [ "default" "log" "os-ext" "os-poll" ];
      };
      "naga" = rec {
        crateName = "naga";
        version = "0.19.2";
        edition = "2021";
        sha256 = "0hq82fg8rj067wppqrk7h9q5b89vkp98spmb37s9lggm89355qsh";
        authors = [
          "gfx-rs developers"
        ];
        dependencies = [
          {
            name = "bit-set";
            packageId = "bit-set";
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "codespan-reporting";
            packageId = "codespan-reporting";
          }
          {
            name = "hexf-parse";
            packageId = "hexf-parse";
            optional = true;
          }
          {
            name = "indexmap";
            packageId = "indexmap";
            features = [ "std" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "petgraph";
            packageId = "petgraph";
            optional = true;
          }
          {
            name = "pp-rs";
            packageId = "pp-rs";
            optional = true;
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "spirv";
            packageId = "spirv";
            optional = true;
          }
          {
            name = "termcolor";
            packageId = "termcolor";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "spirv";
            packageId = "spirv";
            features = [ "deserialize" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" "bitflags/arbitrary" "indexmap/arbitrary" ];
          "deserialize" = [ "serde" "bitflags/serde" "indexmap/serde" ];
          "glsl-in" = [ "pp-rs" ];
          "hexf-parse" = [ "dep:hexf-parse" ];
          "petgraph" = [ "dep:petgraph" ];
          "pp-rs" = [ "dep:pp-rs" ];
          "serde" = [ "dep:serde" ];
          "serialize" = [ "serde" "bitflags/serde" "indexmap/serde" ];
          "spirv" = [ "dep:spirv" ];
          "spv-in" = [ "petgraph" "spirv" ];
          "spv-out" = [ "spirv" ];
          "unicode-xid" = [ "dep:unicode-xid" ];
          "wgsl-in" = [ "hexf-parse" "unicode-xid" "compact" ];
        };
        resolvedDefaultFeatures = [ "clone" "compact" "default" "glsl-in" "glsl-out" "hexf-parse" "hlsl-out" "msl-out" "petgraph" "pp-rs" "serde" "serialize" "spirv" "spv-in" "spv-out" "unicode-xid" "wgsl-in" "wgsl-out" ];
      };
      "naga_oil" = rec {
        crateName = "naga_oil";
        version = "0.13.0";
        edition = "2021";
        sha256 = "1law6ryy18gbd7irw5dy1kq42asjh2hrq857zim4b1r71yp65sn0";
        dependencies = [
          {
            name = "bit-set";
            packageId = "bit-set";
          }
          {
            name = "codespan-reporting";
            packageId = "codespan-reporting";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "naga";
            packageId = "naga";
            features = [ "wgsl-in" "wgsl-out" "clone" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.3";
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "test_shader" "glsl" ];
          "glsl" = [ "naga/glsl-in" "naga/glsl-out" ];
        };
        resolvedDefaultFeatures = [ "default" "glsl" "test_shader" ];
      };
      "ndk" = rec {
        crateName = "ndk";
        version = "0.8.0";
        edition = "2021";
        sha256 = "1dx5yyqh32bi161mipg4br4i33syjidw81qrq0w7mc8hf0ds6xi0";
        authors = [
          "The Rust Mobile contributors"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "jni-sys";
            packageId = "jni-sys";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "ndk-sys";
            packageId = "ndk-sys";
            rename = "ffi";
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
            rename = "rwh_06";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "all" = [ "audio" "bitmap" "media" "api-level-31" "rwh_04" "rwh_05" "rwh_06" ];
          "api-level-24" = [ "api-level-23" ];
          "api-level-25" = [ "api-level-24" ];
          "api-level-26" = [ "api-level-25" ];
          "api-level-27" = [ "api-level-26" ];
          "api-level-28" = [ "api-level-27" ];
          "api-level-29" = [ "api-level-28" ];
          "api-level-30" = [ "api-level-29" ];
          "api-level-31" = [ "api-level-30" ];
          "audio" = [ "ffi/audio" "api-level-26" ];
          "bitmap" = [ "ffi/bitmap" ];
          "default" = [ "rwh_06" ];
          "jni" = [ "dep:jni" ];
          "media" = [ "ffi/media" ];
          "rwh_04" = [ "dep:rwh_04" ];
          "rwh_05" = [ "dep:rwh_05" ];
          "rwh_06" = [ "dep:rwh_06" ];
          "sync" = [ "ffi/sync" "api-level-26" ];
          "test" = [ "ffi/test" "jni" "all" ];
        };
        resolvedDefaultFeatures = [ "rwh_06" ];
      };
      "ndk-context" = rec {
        crateName = "ndk-context";
        version = "0.1.1";
        edition = "2021";
        sha256 = "12sai3dqsblsvfd1l1zab0z6xsnlha3xsfl7kagdnmj3an3jvc17";
        authors = [
          "The Rust Windowing contributors"
        ];

      };
      "ndk-sys" = rec {
        crateName = "ndk-sys";
        version = "0.5.0+25.2.9519653";
        edition = "2021";
        sha256 = "14bnxww0f17xl8pyn6j5kpkl98snjl9lin8i7qv4zzb0vmlnf6cc";
        authors = [
          "The Rust Windowing contributors"
        ];
        dependencies = [
          {
            name = "jni-sys";
            packageId = "jni-sys";
          }
        ];
        features = {
        };
      };
      "nix 0.26.4" = rec {
        crateName = "nix";
        version = "0.26.4";
        edition = "2018";
        sha256 = "06xgl4ybb8pvjrbmc3xggbgk3kbs1j0c4c0nzdfrmpbgrkrym2sr";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
          {
            name = "memoffset";
            packageId = "memoffset 0.7.1";
            optional = true;
            target = { target, features }: (!("redox" == target."os" or null));
          }
        ];
        features = {
          "aio" = [ "pin-utils" ];
          "default" = [ "acct" "aio" "dir" "env" "event" "feature" "fs" "hostname" "inotify" "ioctl" "kmod" "mman" "mount" "mqueue" "net" "personality" "poll" "process" "pthread" "ptrace" "quota" "reboot" "resource" "sched" "signal" "socket" "term" "time" "ucontext" "uio" "user" "zerocopy" ];
          "dir" = [ "fs" ];
          "memoffset" = [ "dep:memoffset" ];
          "mount" = [ "uio" ];
          "mqueue" = [ "fs" ];
          "net" = [ "socket" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "ptrace" = [ "process" ];
          "sched" = [ "process" ];
          "signal" = [ "process" ];
          "socket" = [ "memoffset" ];
          "ucontext" = [ "signal" ];
          "user" = [ "feature" ];
          "zerocopy" = [ "fs" "uio" ];
        };
        resolvedDefaultFeatures = [ "feature" "memoffset" "socket" "uio" "user" ];
      };
      "nix 0.28.0" = rec {
        crateName = "nix";
        version = "0.28.0";
        edition = "2021";
        sha256 = "1r0rylax4ycx3iqakwjvaa178jrrwiiwghcw95ndzy72zk25c8db";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        features = {
          "aio" = [ "pin-utils" ];
          "dir" = [ "fs" ];
          "memoffset" = [ "dep:memoffset" ];
          "mount" = [ "uio" ];
          "mqueue" = [ "fs" ];
          "net" = [ "socket" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "ptrace" = [ "process" ];
          "sched" = [ "process" ];
          "signal" = [ "process" ];
          "socket" = [ "memoffset" ];
          "ucontext" = [ "signal" ];
          "user" = [ "feature" ];
          "zerocopy" = [ "fs" "uio" ];
        };
        resolvedDefaultFeatures = [ "event" "ioctl" ];
      };
      "nom" = rec {
        crateName = "nom";
        version = "7.1.3";
        edition = "2018";
        sha256 = "0jha9901wxam390jcf5pfa0qqfrgh8li787jx2ip0yk5b8y9hwyj";
        authors = [
          "contact@geoffroycouprie.com"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "minimal-lexical";
            packageId = "minimal-lexical";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" "memchr/std" "minimal-lexical/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "nonmax" = rec {
        crateName = "nonmax";
        version = "0.5.5";
        edition = "2018";
        sha256 = "0lfvyfz4falgmc9g1cbfi2wkys9wka2nfmdyga87zikf636ml2k1";
        authors = [
          "Lucien Greathouse <me@lpghatguy.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "notify" = rec {
        crateName = "notify";
        version = "6.1.1";
        edition = "2021";
        sha256 = "0bad98r0ilkhhq2jg3zs11zcqasgbvxia8224wpasm74n65vs1b2";
        authors = [
          "Félix Saparelli <me@passcod.name>"
          "Daniel Faust <hessijames@gmail.com>"
          "Aron Heinecke <Ox0p54r36@t-online.de>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
            optional = true;
          }
          {
            name = "filetime";
            packageId = "filetime";
          }
          {
            name = "fsevent-sys";
            packageId = "fsevent-sys";
            optional = true;
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "inotify";
            packageId = "inotify 0.9.6";
            usesDefaultFeatures = false;
            target = { target, features }: (("linux" == target."os" or null) || ("android" == target."os" or null));
          }
          {
            name = "kqueue";
            packageId = "kqueue";
            target = { target, features }: (("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null) || ("dragonflybsd" == target."os" or null));
          }
          {
            name = "kqueue";
            packageId = "kqueue";
            optional = true;
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "mio";
            packageId = "mio";
            target = { target, features }: (("freebsd" == target."os" or null) || ("openbsd" == target."os" or null) || ("netbsd" == target."os" or null) || ("dragonflybsd" == target."os" or null));
            features = [ "os-ext" ];
          }
          {
            name = "mio";
            packageId = "mio";
            target = { target, features }: (("linux" == target."os" or null) || ("android" == target."os" or null));
            features = [ "os-ext" ];
          }
          {
            name = "mio";
            packageId = "mio";
            optional = true;
            target = { target, features }: ("macos" == target."os" or null);
            features = [ "os-ext" ];
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Threading" "Win32_Foundation" "Win32_Storage_FileSystem" "Win32_Security" "Win32_System_WindowsProgramming" "Win32_System_IO" ];
          }
        ];
        features = {
          "crossbeam-channel" = [ "dep:crossbeam-channel" ];
          "default" = [ "macos_fsevent" "crossbeam-channel" ];
          "fsevent-sys" = [ "dep:fsevent-sys" ];
          "kqueue" = [ "dep:kqueue" ];
          "macos_fsevent" = [ "fsevent-sys" ];
          "macos_kqueue" = [ "kqueue" "mio" ];
          "mio" = [ "dep:mio" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "crossbeam-channel" "default" "fsevent-sys" "macos_fsevent" ];
      };
      "notify-debouncer-full" = rec {
        crateName = "notify-debouncer-full";
        version = "0.3.1";
        edition = "2021";
        sha256 = "0m31ad5wv0lhrncn6qqk4zmryf0fl9h1j9kzrx89p2rlkjsxmxa9";
        libName = "notify_debouncer_full";
        authors = [
          "Daniel Faust <hessijames@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
            optional = true;
          }
          {
            name = "file-id";
            packageId = "file-id";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "notify";
            packageId = "notify";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "crossbeam" = [ "crossbeam-channel" "notify/crossbeam-channel" ];
          "crossbeam-channel" = [ "dep:crossbeam-channel" ];
          "default" = [ "crossbeam" ];
        };
        resolvedDefaultFeatures = [ "crossbeam" "crossbeam-channel" "default" ];
      };
      "ntapi" = rec {
        crateName = "ntapi";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1r38zhbwdvkis2mzs6671cm1p6djgsl49i7bwxzrvhwicdf8k8z8";
        authors = [
          "MSxDOS <melcodos@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            features = [ "cfg" "evntrace" "in6addr" "inaddr" "minwinbase" "ntsecapi" "windef" "winioctl" ];
          }
        ];
        features = {
          "default" = [ "user" ];
          "impl-default" = [ "winapi/impl-default" ];
        };
        resolvedDefaultFeatures = [ "default" "user" ];
      };
      "nu-ansi-term" = rec {
        crateName = "nu-ansi-term";
        version = "0.46.0";
        edition = "2018";
        sha256 = "115sywxh53p190lyw97alm14nc004qj5jm5lvdj608z84rbida3p";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
          "The Nushell Project Developers"
        ];
        dependencies = [
          {
            name = "overload";
            packageId = "overload";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "consoleapi" "errhandlingapi" "fileapi" "handleapi" "processenv" ];
          }
        ];
        features = {
          "derive_serde_style" = [ "serde" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "num-derive" = rec {
        crateName = "num-derive";
        version = "0.4.2";
        edition = "2021";
        sha256 = "00p2am9ma8jgd2v6xpsz621wc7wbn1yqi71g15gc3h67m7qmafgd";
        procMacro = true;
        libName = "num_derive";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
          }
        ];

      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.19";
        edition = "2021";
        sha256 = "0h984rhdkkqd4ny9cif7y2azl3xdfb7768hb9irhpsch4q3gq787";
        authors = [
          "The Rust Project Developers"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num_enum" = rec {
        crateName = "num_enum";
        version = "0.7.2";
        edition = "2021";
        sha256 = "0i88m682kk45fa1yxm02738mf8p770dib5zqk48p8lvjxr29fcq2";
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "num_enum_derive";
            packageId = "num_enum_derive";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "complex-expressions" = [ "num_enum_derive/complex-expressions" ];
          "default" = [ "std" ];
          "std" = [ "num_enum_derive/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num_enum_derive" = rec {
        crateName = "num_enum_derive";
        version = "0.7.2";
        edition = "2021";
        sha256 = "0awqpdw8bbzwrq0mgim99axzxar6dl9ram8qdj83c2k06ylk0438";
        procMacro = true;
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.1.0";
            optional = true;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
            features = [ "parsing" ];
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.61";
            features = [ "extra-traits" "parsing" ];
          }
        ];
        features = {
          "complex-expressions" = [ "syn/full" ];
          "default" = [ "std" ];
          "proc-macro-crate" = [ "dep:proc-macro-crate" ];
          "std" = [ "proc-macro-crate" ];
        };
        resolvedDefaultFeatures = [ "proc-macro-crate" "std" ];
      };
      "objc" = rec {
        crateName = "objc";
        version = "0.2.7";
        edition = "2015";
        sha256 = "1cbpf6kz8a244nn1qzl3xyhmp05gsg4n313c9m3567625d3innwi";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "malloc_buf";
            packageId = "malloc_buf";
          }
          {
            name = "objc_exception";
            packageId = "objc_exception";
            optional = true;
          }
        ];
        features = {
          "exception" = [ "objc_exception" ];
          "objc_exception" = [ "dep:objc_exception" ];
        };
        resolvedDefaultFeatures = [ "objc_exception" ];
      };
      "objc-sys 0.2.0-beta.2" = rec {
        crateName = "objc-sys";
        version = "0.2.0-beta.2";
        edition = "2021";
        links = "objc_0_2";
        sha256 = "1msm1bwv69k12ikxm71mi1ifrbx2bzsmk2w2bah98mp9q4s9hfyz";
        authors = [
          "Mads Marquart <mads@marquart.dk>"
        ];
        features = {
          "cc" = [ "dep:cc" ];
          "default" = [ "std" "apple" ];
          "gnustep-1-8" = [ "gnustep-1-7" ];
          "gnustep-1-9" = [ "gnustep-1-8" ];
          "gnustep-2-0" = [ "gnustep-1-9" ];
          "gnustep-2-1" = [ "gnustep-2-0" ];
          "std" = [ "alloc" ];
          "unstable-exception" = [ "cc" ];
          "unstable-winobjc" = [ "gnustep-1-8" ];
        };
        resolvedDefaultFeatures = [ "alloc" "apple" "std" ];
      };
      "objc-sys 0.3.3" = rec {
        crateName = "objc-sys";
        version = "0.3.3";
        edition = "2021";
        links = "objc_0_3";
        sha256 = "0q3d5pg7g428dm0fvcalw57bdmgvhmg1hdc67xhb1dxriwclqa6s";
        authors = [
          "Mads Marquart <mads@marquart.dk>"
        ];
        features = {
          "cc" = [ "dep:cc" ];
          "default" = [ "std" "apple" ];
          "gnustep-1-8" = [ "gnustep-1-7" ];
          "gnustep-1-9" = [ "gnustep-1-8" ];
          "gnustep-2-0" = [ "gnustep-1-9" ];
          "gnustep-2-1" = [ "gnustep-2-0" ];
          "std" = [ "alloc" ];
          "unstable-exception" = [ "cc" ];
          "unstable-winobjc" = [ "gnustep-1-8" ];
        };
        resolvedDefaultFeatures = [ "alloc" "apple" "std" ];
      };
      "objc2 0.3.0-beta.3.patch-leaks.3" = rec {
        crateName = "objc2";
        version = "0.3.0-beta.3.patch-leaks.3";
        edition = "2021";
        sha256 = "0s54wfgw20ypg4ibzldwkqvv6b2kkqbmwcl0pq5j5c9ckw7n80by";
        authors = [
          "Steven Sheldon"
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "block2";
            packageId = "block2 0.2.0-alpha.6";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "objc-sys";
            packageId = "objc-sys 0.2.0-beta.2";
            usesDefaultFeatures = false;
          }
          {
            name = "objc2-encode";
            packageId = "objc2-encode 2.0.0-pre.2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "objc2-encode/alloc" "objc-sys/alloc" "block2?/alloc" ];
          "apple" = [ "objc-sys/apple" "objc2-encode/apple" "block2?/apple" ];
          "block" = [ "block2" ];
          "block2" = [ "dep:block2" ];
          "catch-all" = [ "exception" ];
          "default" = [ "std" "apple" "foundation" ];
          "exception" = [ "objc-sys/unstable-exception" ];
          "gnustep-1-7" = [ "objc-sys/gnustep-1-7" "objc2-encode/gnustep-1-7" "block2?/gnustep-1-7" ];
          "gnustep-1-8" = [ "gnustep-1-7" "objc-sys/gnustep-1-8" "objc2-encode/gnustep-1-8" "block2?/gnustep-1-8" ];
          "gnustep-1-9" = [ "gnustep-1-8" "objc-sys/gnustep-1-9" "objc2-encode/gnustep-1-9" "block2?/gnustep-1-9" ];
          "gnustep-2-0" = [ "gnustep-1-9" "objc-sys/gnustep-2-0" "objc2-encode/gnustep-2-0" "block2?/gnustep-2-0" ];
          "gnustep-2-1" = [ "gnustep-2-0" "objc-sys/gnustep-2-1" "objc2-encode/gnustep-2-1" "block2?/gnustep-2-1" ];
          "malloc" = [ "malloc_buf" ];
          "malloc_buf" = [ "dep:malloc_buf" ];
          "objc2-proc-macros" = [ "dep:objc2-proc-macros" ];
          "std" = [ "alloc" "objc2-encode/std" "objc-sys/std" "block2?/std" ];
          "unstable-static-class" = [ "objc2-proc-macros" ];
          "unstable-static-class-inlined" = [ "unstable-static-class" ];
          "unstable-static-sel" = [ "objc2-proc-macros" ];
          "unstable-static-sel-inlined" = [ "unstable-static-sel" ];
          "uuid" = [ "dep:uuid" ];
          "verify_message" = [ "malloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "apple" "default" "foundation" "std" ];
      };
      "objc2 0.4.1" = rec {
        crateName = "objc2";
        version = "0.4.1";
        edition = "2021";
        sha256 = "13gr3zqv8gzlylff5d4za91f50asb7vsrkpv8kiva3nkzm05m72m";
        authors = [
          "Steven Sheldon"
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "objc-sys";
            packageId = "objc-sys 0.3.3";
            usesDefaultFeatures = false;
          }
          {
            name = "objc2-encode";
            packageId = "objc2-encode 3.0.0";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "objc2-encode/alloc" "objc-sys/alloc" ];
          "apple" = [ "objc-sys/apple" ];
          "catch-all" = [ "exception" ];
          "default" = [ "std" "apple" ];
          "exception" = [ "objc-sys/unstable-exception" ];
          "gnustep-1-7" = [ "objc-sys/gnustep-1-7" ];
          "gnustep-1-8" = [ "gnustep-1-7" "objc-sys/gnustep-1-8" ];
          "gnustep-1-9" = [ "gnustep-1-8" "objc-sys/gnustep-1-9" ];
          "gnustep-2-0" = [ "gnustep-1-9" "objc-sys/gnustep-2-0" ];
          "gnustep-2-1" = [ "gnustep-2-0" "objc-sys/gnustep-2-1" ];
          "malloc" = [ "malloc_buf" ];
          "malloc_buf" = [ "dep:malloc_buf" ];
          "objc2-proc-macros" = [ "dep:objc2-proc-macros" ];
          "std" = [ "alloc" "objc2-encode/std" "objc-sys/std" ];
          "unstable-apple-new" = [ "apple" ];
          "unstable-compiler-rt" = [ "apple" ];
          "unstable-static-class" = [ "objc2-proc-macros" ];
          "unstable-static-class-inlined" = [ "unstable-static-class" ];
          "unstable-static-sel" = [ "objc2-proc-macros" ];
          "unstable-static-sel-inlined" = [ "unstable-static-sel" ];
          "verify" = [ "malloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "apple" "default" "std" ];
      };
      "objc2-encode 2.0.0-pre.2" = rec {
        crateName = "objc2-encode";
        version = "2.0.0-pre.2";
        edition = "2021";
        sha256 = "04h5wns3hxmc9g652hr9xqzrijs4ij9sdnlgc0ha202v050srz5b";
        authors = [
          "Steven Sheldon"
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "objc-sys";
            packageId = "objc-sys 0.2.0-beta.2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "objc-sys/alloc" ];
          "apple" = [ "objc-sys/apple" ];
          "default" = [ "std" "apple" ];
          "gnustep-1-7" = [ "objc-sys/gnustep-1-7" ];
          "gnustep-1-8" = [ "gnustep-1-7" "objc-sys/gnustep-1-8" ];
          "gnustep-1-9" = [ "gnustep-1-8" "objc-sys/gnustep-1-9" ];
          "gnustep-2-0" = [ "gnustep-1-9" "objc-sys/gnustep-2-0" ];
          "gnustep-2-1" = [ "gnustep-2-0" "objc-sys/gnustep-2-1" ];
          "std" = [ "alloc" "objc-sys/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "apple" "std" ];
      };
      "objc2-encode 3.0.0" = rec {
        crateName = "objc2-encode";
        version = "3.0.0";
        edition = "2021";
        sha256 = "0rknhkcnyj4qv1pzqp5j8l80726phz8fcxpsbpz9nhmg6xdq8yfh";
        authors = [
          "Steven Sheldon"
          "Mads Marquart <mads@marquart.dk>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "objc_exception" = rec {
        crateName = "objc_exception";
        version = "0.1.2";
        edition = "2015";
        sha256 = "191cmdmlypp6piw67y4m8y5swlxf5w0ss8n1lk5xd2l1ans0z5xd";
        authors = [
          "Steven Sheldon"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "oboe" = rec {
        crateName = "oboe";
        version = "0.6.1";
        edition = "2021";
        sha256 = "1yv7x06mwk61nsy3ckcmqwgg9q0n3j4y4zncz3sl6pcyskmipdp8";
        authors = [
          "K. <kayo@illumium.org>"
        ];
        dependencies = [
          {
            name = "jni";
            packageId = "jni";
            optional = true;
          }
          {
            name = "ndk";
            packageId = "ndk";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ndk-context";
            packageId = "ndk-context";
            optional = true;
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "oboe-sys";
            packageId = "oboe-sys";
          }
        ];
        features = {
          "fetch-prebuilt" = [ "oboe-sys/fetch-prebuilt" ];
          "generate-bindings" = [ "oboe-sys/generate-bindings" ];
          "java-interface" = [ "ndk" "ndk-context" "jni" ];
          "jni" = [ "dep:jni" ];
          "ndk" = [ "dep:ndk" ];
          "ndk-context" = [ "dep:ndk-context" ];
          "shared-link" = [ "oboe-sys/shared-link" ];
          "shared-stdcxx" = [ "oboe-sys/shared-stdcxx" ];
        };
        resolvedDefaultFeatures = [ "java-interface" "jni" "ndk" "ndk-context" "shared-stdcxx" ];
      };
      "oboe-sys" = rec {
        crateName = "oboe-sys";
        version = "0.6.1";
        edition = "2021";
        sha256 = "17g7yb4kk6bakc4rhv1izfcqjgqhpkasgq6gf20nc79b9adb12vc";
        authors = [
          "K. <kayo@illumium.org>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            features = [ "parallel" ];
          }
        ];
        features = {
          "bindgen" = [ "dep:bindgen" ];
          "fetch-prebuilt" = [ "fetch_unroll" ];
          "fetch_unroll" = [ "dep:fetch_unroll" ];
          "generate-bindings" = [ "bindgen" ];
        };
        resolvedDefaultFeatures = [ "shared-stdcxx" ];
      };
      "ogg" = rec {
        crateName = "ogg";
        version = "0.8.0";
        edition = "2015";
        sha256 = "0vjxmqcv9252aj8byy70iy2krqfjknfcxg11lcyikj11pzlb8lb9";
        authors = [
          "est31 <MTest31@outlook.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
        ];
        features = {
          "async" = [ "tokio-io" "futures" "bytes" ];
          "bytes" = [ "dep:bytes" ];
          "futures" = [ "dep:futures" ];
          "tokio-io" = [ "dep:tokio-io" ];
        };
      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.19.0";
        edition = "2021";
        sha256 = "14kvw7px5z96dk4dwdm1r9cqhhy2cyj1l5n5b29mynbb8yr15nrz";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "alloc" = [ "race" ];
          "atomic-polyfill" = [ "critical-section" ];
          "critical-section" = [ "dep:critical-section" "portable-atomic" ];
          "default" = [ "std" ];
          "parking_lot" = [ "dep:parking_lot_core" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "race" "std" ];
      };
      "orbclient" = rec {
        crateName = "orbclient";
        version = "0.3.47";
        edition = "2018";
        sha256 = "0rk144mqpv27r390bjn6dfcp2314xxfila6g3njx6x4pvr5xbw2j";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "libredox";
            packageId = "libredox";
            target = { target, features }: ("redox" == target."os" or null);
          }
        ];
        features = {
          "bundled" = [ "sdl" "sdl2/bundled" "sdl2/static-link" "sdl2-sys/bundled" "sdl2-sys/static-link" ];
          "default" = [ "std" "sdl" "unifont" ];
          "libc" = [ "dep:libc" ];
          "raw-window-handle" = [ "dep:raw-window-handle" ];
          "sdl" = [ "sdl2" "sdl2-sys" "libc" ];
          "sdl2" = [ "dep:sdl2" ];
          "sdl2-sys" = [ "dep:sdl2-sys" ];
        };
      };
      "ordered-stream" = rec {
        crateName = "ordered-stream";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0l0xxp697q7wiix1gnfn66xsss7fdhfivl2k7bvpjs4i3lgb18ls";
        authors = [
          "Daniel De Graaf <code@danieldg.net>"
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];

      };
      "overload" = rec {
        crateName = "overload";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0fdgbaqwknillagy1xq7xfgv60qdbk010diwl7s1p0qx7hb16n5i";
        authors = [
          "Daniel Salvadori <danaugrs@gmail.com>"
        ];

      };
      "owned_ttf_parser" = rec {
        crateName = "owned_ttf_parser";
        version = "0.20.0";
        edition = "2021";
        sha256 = "1rr38229kigjp4mzwpgz5qhjpd9jrfx88k57jwbwfj66wkgnwn6l";
        authors = [
          "Alex Butler <alexheretic@gmail.com>"
        ];
        dependencies = [
          {
            name = "ttf-parser";
            packageId = "ttf-parser";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "apple-layout" = [ "ttf-parser/apple-layout" ];
          "default" = [ "std" "opentype-layout" "apple-layout" "variable-fonts" "glyph-names" ];
          "glyph-names" = [ "ttf-parser/glyph-names" ];
          "gvar-alloc" = [ "std" "ttf-parser/gvar-alloc" ];
          "opentype-layout" = [ "ttf-parser/opentype-layout" ];
          "std" = [ "ttf-parser/std" ];
          "variable-fonts" = [ "ttf-parser/variable-fonts" ];
        };
        resolvedDefaultFeatures = [ "apple-layout" "default" "glyph-names" "opentype-layout" "std" "variable-fonts" ];
      };
      "parking" = rec {
        crateName = "parking";
        version = "2.2.0";
        edition = "2018";
        sha256 = "1blwbkq6im1hfxp5wlbr475mw98rsyc0bbr2d5n16m38z253p0dv";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "The Rust Project Developers"
        ];
        features = {
          "loom" = [ "dep:loom" ];
        };
      };
      "parking_lot" = rec {
        crateName = "parking_lot";
        version = "0.12.2";
        edition = "2021";
        sha256 = "1ys2dzz6cysjmwyivwxczl1ljpcf5cj4qmhdj07d5bkc9z5g0jky";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        features = {
          "arc_lock" = [ "lock_api/arc_lock" ];
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [ "arc_lock" "default" "send_guard" ];
      };
      "parking_lot_core" = rec {
        crateName = "parking_lot_core";
        version = "0.9.10";
        edition = "2021";
        sha256 = "1y3cf9ld9ijf7i4igwzffcn0xl16dxyn4c5bwgjck1dkgabiyh0y";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.5.1";
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.5";
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
          "petgraph" = [ "dep:petgraph" ];
          "thread-id" = [ "dep:thread-id" ];
        };
      };
      "parse-zoneinfo" = rec {
        crateName = "parse-zoneinfo";
        version = "0.3.1";
        edition = "2021";
        sha256 = "093cs8slbd6kyfi6h12isz0mnaayf5ha8szri1xrbqj4inqhaahz";
        dependencies = [
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" "unicode-perl" ];
          }
        ];

      };
      "paste" = rec {
        crateName = "paste";
        version = "1.0.15";
        edition = "2018";
        sha256 = "02pxffpdqkapy292harq6asfjvadgp1s005fip9ljfsn9fvxgh2p";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "pbr" = rec {
        crateName = "pbr";
        version = "1.1.1";
        edition = "2018";
        sha256 = "056mqvw168ziig1dgl2kq4vmkamv6gk3hv1x9696r6ynl3gjfn7d";
        authors = [
          "Ariel Mashraki <ariel@mashraki.co.il>"
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "wincon" "processenv" "winbase" ];
          }
        ];

      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.3.1";
        edition = "2018";
        sha256 = "0gi8wgx0dcy8rnv1kywdv98lwcx67hz0a0zwpib5v2i08r88y573";
        authors = [
          "The rust-url developers"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "pest" = rec {
        crateName = "pest";
        version = "2.7.10";
        edition = "2021";
        sha256 = "1s4fvis7h6l872g6nk17r130kcllj4c0hjvwkzd3hi196g3320an";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
            optional = true;
          }
          {
            name = "ucd-trie";
            packageId = "ucd-trie";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "memchr" ];
          "memchr" = [ "dep:memchr" ];
          "pretty-print" = [ "dep:serde" "dep:serde_json" ];
          "std" = [ "ucd-trie/std" "dep:thiserror" ];
        };
        resolvedDefaultFeatures = [ "default" "memchr" "std" ];
      };
      "pest_derive" = rec {
        crateName = "pest_derive";
        version = "2.7.10";
        edition = "2021";
        sha256 = "0n8lsk9s21dp7958p9yarbk2gsc8wg0rvdzr7cd7pjpvjf8kqa96";
        procMacro = true;
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "pest";
            packageId = "pest";
            usesDefaultFeatures = false;
          }
          {
            name = "pest_generator";
            packageId = "pest_generator";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "grammar-extras" = [ "pest_generator/grammar-extras" ];
          "not-bootstrap-in-src" = [ "pest_generator/not-bootstrap-in-src" ];
          "std" = [ "pest/std" "pest_generator/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "pest_generator" = rec {
        crateName = "pest_generator";
        version = "2.7.10";
        edition = "2021";
        sha256 = "11s6q0vf25lckbzak0qndzpv87ksaxy6pa9cvn2hlizvsgvjmhiy";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "pest";
            packageId = "pest";
            usesDefaultFeatures = false;
          }
          {
            name = "pest_meta";
            packageId = "pest_meta";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
          }
        ];
        features = {
          "default" = [ "std" ];
          "grammar-extras" = [ "pest_meta/grammar-extras" ];
          "not-bootstrap-in-src" = [ "pest_meta/not-bootstrap-in-src" ];
          "std" = [ "pest/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "pest_meta" = rec {
        crateName = "pest_meta";
        version = "2.7.10";
        edition = "2021";
        sha256 = "1kdxl164yyjsmn01lvllsll4sz3xbgy4dmkq33n63hrp5w1418np";
        authors = [
          "Dragoș Tiselice <dragostiselice@gmail.com>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "pest";
            packageId = "pest";
          }
        ];
        buildDependencies = [
          {
            name = "sha2";
            packageId = "sha2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "not-bootstrap-in-src" = [ "dep:cargo" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "petgraph" = rec {
        crateName = "petgraph";
        version = "0.6.4";
        edition = "2018";
        sha256 = "1ac6wfq5f5pzcv0nvzzfgjbwg2kwslpnzsw5wcmxlscfcb9azlz1";
        authors = [
          "bluss"
          "mitchmindtree"
        ];
        dependencies = [
          {
            name = "fixedbitset";
            packageId = "fixedbitset 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
        ];
        features = {
          "all" = [ "unstable" "quickcheck" "matrix_graph" "stable_graph" "graphmap" ];
          "default" = [ "graphmap" "stable_graph" "matrix_graph" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "serde" = [ "dep:serde" ];
          "serde-1" = [ "serde" "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
          "unstable" = [ "generate" ];
        };
        resolvedDefaultFeatures = [ "default" "graphmap" "matrix_graph" "serde" "serde-1" "serde_derive" "stable_graph" ];
      };
      "phf" = rec {
        crateName = "phf";
        version = "0.11.2";
        edition = "2021";
        sha256 = "1p03rsw66l7naqhpgr1a34r9yzi1gv9jh16g3fsk6wrwyfwdiqmd";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_shared";
            packageId = "phf_shared";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "macros" = [ "phf_macros" ];
          "phf_macros" = [ "dep:phf_macros" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "phf_shared/std" ];
          "uncased" = [ "phf_shared/uncased" ];
          "unicase" = [ "phf_macros?/unicase" "phf_shared/unicase" ];
        };
      };
      "phf_codegen" = rec {
        crateName = "phf_codegen";
        version = "0.11.2";
        edition = "2021";
        sha256 = "0nia6h4qfwaypvfch3pnq1nd2qj64dif4a6kai3b7rjrsf49dlz8";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_generator";
            packageId = "phf_generator";
          }
          {
            name = "phf_shared";
            packageId = "phf_shared";
          }
        ];

      };
      "phf_generator" = rec {
        crateName = "phf_generator";
        version = "0.11.2";
        edition = "2021";
        crateBin = [];
        sha256 = "1c14pjyxbcpwkdgw109f7581cc5fa3fnkzdq1ikvx7mdq9jcrr28";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "phf_shared";
            packageId = "phf_shared";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand";
            usesDefaultFeatures = false;
            features = [ "small_rng" ];
          }
        ];
        features = {
          "criterion" = [ "dep:criterion" ];
        };
      };
      "phf_shared" = rec {
        crateName = "phf_shared";
        version = "0.11.2";
        edition = "2021";
        sha256 = "0azphb0a330ypqx3qvyffal5saqnks0xvl8rj73jlk3qxxgbkz4h";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "siphasher";
            packageId = "siphasher";
          }
        ];
        features = {
          "default" = [ "std" ];
          "uncased" = [ "dep:uncased" ];
          "unicase" = [ "dep:unicase" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "pin-project-lite" = rec {
        crateName = "pin-project-lite";
        version = "0.2.14";
        edition = "2018";
        sha256 = "00nx3f04agwjlsmd3mc5rx5haibj2v8q9b52b0kwn63wcv4nz9mx";

      };
      "pin-utils" = rec {
        crateName = "pin-utils";
        version = "0.1.0";
        edition = "2018";
        sha256 = "117ir7vslsl2z1a7qzhws4pd01cg2d3338c47swjyvqv2n60v1wb";
        authors = [
          "Josef Brandl <mail@josefbrandl.de>"
        ];

      };
      "piper" = rec {
        crateName = "piper";
        version = "0.2.1";
        edition = "2018";
        sha256 = "1m45fkdq7q5l9mv3b0ra10qwm0kb67rjp2q8y91958gbqjqk33b6";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "atomic-waker";
            packageId = "atomic-waker";
          }
          {
            name = "fastrand";
            packageId = "fastrand 2.1.0";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "futures-io" = [ "dep:futures-io" ];
          "portable-atomic" = [ "atomic-waker/portable-atomic" "portable_atomic_crate" "portable-atomic-util" ];
          "portable-atomic-util" = [ "dep:portable-atomic-util" ];
          "portable_atomic_crate" = [ "dep:portable_atomic_crate" ];
          "std" = [ "fastrand/std" "futures-io" ];
        };
        resolvedDefaultFeatures = [ "default" "futures-io" "std" ];
      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.30";
        edition = "2015";
        sha256 = "1v07557dj1sa0aly9c90wsygc0i8xv5vnmyv0g94lpkvj8qb4cfj";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "png" = rec {
        crateName = "png";
        version = "0.17.13";
        edition = "2018";
        sha256 = "1qdmajjzkdbmk5zk7qb5pc6927xa26hr2v68hbkpa9ris79v1r06";
        authors = [
          "The image-rs Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "fdeflate";
            packageId = "fdeflate";
          }
          {
            name = "flate2";
            packageId = "flate2";
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            features = [ "simd" ];
          }
        ];
        features = {
        };
      };
      "polling 2.8.0" = rec {
        crateName = "polling";
        version = "2.8.0";
        edition = "2018";
        sha256 = "1kixxfq1af1k7gkmmk9yv4j2krpp4fji2r8j4cz6p6d7ihz34bab";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."unix" or false) || ("fuchsia" == target."os" or null) || ("vxworks" == target."os" or null));
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_Storage_FileSystem" "Win32_System_IO" "Win32_System_LibraryLoader" "Win32_System_Threading" "Win32_System_WindowsProgramming" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "polling 3.7.0" = rec {
        crateName = "polling";
        version = "3.7.0";
        edition = "2021";
        sha256 = "1qvvccdbk49xmrwic5ljikgjvf8zrxlaf0lx44jfymj46k7r6m34";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.34";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) || ("fuchsia" == target."os" or null) || ("vxworks" == target."os" or null));
            features = [ "event" "fs" "pipe" "process" "std" "time" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Wdk_Foundation" "Wdk_Storage_FileSystem" "Win32_Foundation" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage_FileSystem" "Win32_System_IO" "Win32_System_LibraryLoader" "Win32_System_Threading" "Win32_System_WindowsProgramming" ];
          }
        ];

      };
      "postcard" = rec {
        crateName = "postcard";
        version = "1.0.8";
        edition = "2018";
        sha256 = "1y106iwjv6vm7s4zkszgxlhacca1xbw6qcwf8il7xc0ddkp52p55";
        authors = [
          "James Munns <james@onevariable.com>"
        ];
        dependencies = [
          {
            name = "cobs";
            packageId = "cobs";
            usesDefaultFeatures = false;
          }
          {
            name = "embedded-io";
            packageId = "embedded-io";
            optional = true;
          }
          {
            name = "heapless";
            packageId = "heapless";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" "embedded-io/alloc" ];
          "const_format" = [ "dep:const_format" ];
          "crc" = [ "dep:crc" ];
          "default" = [ "heapless-cas" ];
          "defmt" = [ "dep:defmt" ];
          "embedded-io" = [ "dep:embedded-io" ];
          "experimental-derive" = [ "postcard-derive" "const_format" ];
          "heapless" = [ "dep:heapless" ];
          "heapless-cas" = [ "heapless" "heapless/cas" ];
          "paste" = [ "dep:paste" ];
          "postcard-derive" = [ "dep:postcard-derive" ];
          "use-crc" = [ "crc" "paste" ];
          "use-defmt" = [ "defmt" ];
          "use-std" = [ "serde/std" "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "embedded-io" "heapless" "heapless-cas" ];
      };
      "pp-rs" = rec {
        crateName = "pp-rs";
        version = "0.2.1";
        edition = "2015";
        sha256 = "1vkd9lgwf5rxy7qgzl8mka7vnghaq6nnn0nmg7mycl72ysvqnidv";
        authors = [
          "pp-rs Developers"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];

      };
      "ppv-lite86" = rec {
        crateName = "ppv-lite86";
        version = "0.2.17";
        edition = "2018";
        sha256 = "1pp6g52aw970adv3x2310n7glqnji96z0a9wiamzw89ibf0ayh2v";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "simd" "std" ];
      };
      "presser" = rec {
        crateName = "presser";
        version = "0.3.1";
        edition = "2021";
        sha256 = "1ykvqx861sjmhkdh540aafqba7i7li7gqgwrcczy6v56i9m8xkz8";
        authors = [
          "Embark <opensource@embark-studios.com>"
          "Gray Olson <gray@grayolson.com"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "proc-macro-crate 1.3.1" = rec {
        crateName = "proc-macro-crate";
        version = "1.3.1";
        edition = "2021";
        sha256 = "069r1k56bvgk0f58dm5swlssfcp79im230affwk6d9ck20g04k3z";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.19.15";
          }
        ];

      };
      "proc-macro-crate 3.1.0" = rec {
        crateName = "proc-macro-crate";
        version = "3.1.0";
        edition = "2021";
        sha256 = "110jcl9vnj92ihbhjqmkp19m8rzxc14a7i60knlmv99qlwfcadvd";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "toml_edit";
            packageId = "toml_edit 0.21.1";
          }
        ];

      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.82";
        edition = "2021";
        sha256 = "06qk88hbf6wg4v1i961zibhjz512873jwkz3myx1z82ip6dd9lwa";
        libName = "proc_macro2";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "profiling" = rec {
        crateName = "profiling";
        version = "1.0.15";
        edition = "2018";
        sha256 = "0n5y50w07m95mk2yn94wcrbz4kip30anv7vzf5rjdjbag8flvn23";
        authors = [
          "Philip Degarmo <aclysma@gmail.com>"
        ];
        dependencies = [
          {
            name = "profiling-procmacros";
            packageId = "profiling-procmacros";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
          }
        ];
        features = {
          "default" = [ "procmacros" ];
          "optick" = [ "dep:optick" ];
          "procmacros" = [ "profiling-procmacros" ];
          "profile-with-optick" = [ "optick" "profiling-procmacros?/profile-with-optick" ];
          "profile-with-puffin" = [ "puffin" "profiling-procmacros?/profile-with-puffin" ];
          "profile-with-superluminal" = [ "superluminal-perf" "profiling-procmacros?/profile-with-superluminal" ];
          "profile-with-tracing" = [ "tracing" "profiling-procmacros?/profile-with-tracing" ];
          "profile-with-tracy" = [ "tracy-client" "profiling-procmacros?/profile-with-tracy" ];
          "profiling-procmacros" = [ "dep:profiling-procmacros" ];
          "puffin" = [ "dep:puffin" ];
          "superluminal-perf" = [ "dep:superluminal-perf" ];
          "tracing" = [ "dep:tracing" ];
          "tracy-client" = [ "dep:tracy-client" ];
        };
        resolvedDefaultFeatures = [ "default" "procmacros" "profile-with-tracing" "profiling-procmacros" "tracing" ];
      };
      "profiling-procmacros" = rec {
        crateName = "profiling-procmacros";
        version = "1.0.15";
        edition = "2018";
        sha256 = "1zf3a6wc21l43ckmyhfd56pyq255i9msq9i5zhn4777cr1cwy8c0";
        procMacro = true;
        authors = [
          "Philip Degarmo <aclysma@gmail.com>"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
            features = [ "full" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "profile-with-tracing" ];
      };
      "quick-xml" = rec {
        crateName = "quick-xml";
        version = "0.31.0";
        edition = "2021";
        sha256 = "0cravqanylzh5cq2v6hzlfqgxcid5nrp2snnb3pf4m0and2a610h";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "async-tokio" = [ "tokio" ];
          "document-features" = [ "dep:document-features" ];
          "encoding" = [ "encoding_rs" ];
          "encoding_rs" = [ "dep:encoding_rs" ];
          "serde" = [ "dep:serde" ];
          "serde-types" = [ "serde/derive" ];
          "serialize" = [ "serde" ];
          "tokio" = [ "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.36";
        edition = "2018";
        sha256 = "19xcmh445bg6simirnnd4fvkmp6v2qiwxh5f6rw4a70h76pnm9qg";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "radsort" = rec {
        crateName = "radsort";
        version = "0.1.0";
        edition = "2018";
        sha256 = "02vsyxigycsa20zk66g396kvxq47smg69qnzw49dmznk1qwrdz8p";
        authors = [
          "Jakub Valtar <jakub.valtar@gmail.com>"
        ];

      };
      "rand" = rec {
        crateName = "rand";
        version = "0.8.5";
        edition = "2018";
        sha256 = "013l6931nn7gkc23jz5mm3qdhf93jjf0fg64nz2lp4i51qd8vbrl";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" "std_rng" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "libc" = [ "dep:libc" ];
          "log" = [ "dep:log" ];
          "packed_simd" = [ "dep:packed_simd" ];
          "rand_chacha" = [ "dep:rand_chacha" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" "rand_core/serde1" ];
          "simd_support" = [ "packed_simd" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc" ];
          "std_rng" = [ "rand_chacha" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "libc" "rand_chacha" "small_rng" "std" "std_rng" ];
      };
      "rand_chacha" = rec {
        crateName = "rand_chacha";
        version = "0.3.1";
        edition = "2018";
        sha256 = "123x2adin558xbhvqb8w4f6syjsdkmqff8cxwhmjacpsl1ihmhg6";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rand_core" = rec {
        crateName = "rand_core";
        version = "0.6.4";
        edition = "2018";
        sha256 = "0b4j2v4cb5krak1pv6kakv4sz6xcwbrmy2zckc32hsigbrwy82zc";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
            optional = true;
          }
        ];
        features = {
          "getrandom" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "range-alloc" = rec {
        crateName = "range-alloc";
        version = "0.1.3";
        edition = "2018";
        sha256 = "1azfwh89nd4idj0s272qgmw3x1cj6m7d3f44b2la02wzvkyrk2lw";
        authors = [
          "the gfx-rs Developers"
        ];

      };
      "raw-window-handle" = rec {
        crateName = "raw-window-handle";
        version = "0.6.1";
        edition = "2021";
        sha256 = "12s1ck4v5ib1zclasr348sxpb76cnkk6hag603ki3z6xn6yvrhwc";
        authors = [
          "Osspial <osspial@gmail.com>"
        ];
        features = {
          "std" = [ "alloc" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
          "wasm-bindgen-0-2" = [ "wasm-bindgen" "std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "rayon-core" = rec {
        crateName = "rayon-core";
        version = "1.12.1";
        edition = "2021";
        links = "rayon-core";
        sha256 = "1qpwim68ai5h0j7axa8ai8z0payaawv3id0lrgkqmapx7lx8fr8l";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
        ];
        features = {
          "web_spin_lock" = [ "dep:wasm_sync" ];
        };
      };
      "rectangle-pack" = rec {
        crateName = "rectangle-pack";
        version = "0.4.2";
        edition = "2018";
        sha256 = "1fzr1k7yir4w15vr7iskxaqdaa0hz5k539a96hayfj20i3r67m50";
        authors = [
          "Chinedu Francis Nwafili <frankie.nwafili@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "redox_syscall 0.3.5" = rec {
        crateName = "redox_syscall";
        version = "0.3.5";
        edition = "2018";
        sha256 = "0acgiy2lc1m2vr8cr33l5s7k9wzby8dybyab1a9p753hcbr68xjn";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
        ];
        features = {
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "bitflags/rustc-dep-of-std" ];
        };
      };
      "redox_syscall 0.4.1" = rec {
        crateName = "redox_syscall";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1aiifyz5dnybfvkk4cdab9p2kmphag1yad6iknc7aszlxxldf8j7";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
        ];
        features = {
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "bitflags/rustc-dep-of-std" ];
        };
      };
      "redox_syscall 0.5.1" = rec {
        crateName = "redox_syscall";
        version = "0.5.1";
        edition = "2018";
        sha256 = "0zja6y3av9z50gg1hh0vsc053941wng21r43whhk8mfb9n4m5426";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
        ];
        features = {
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "bitflags/rustc-dep-of-std" ];
        };
      };
      "regex" = rec {
        crateName = "regex";
        version = "1.10.4";
        edition = "2021";
        sha256 = "0k5sb0h2mkwf51ab0gvv3x38jp1q7wgxf63abfbhi0wwvvgxn5y1";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-automata";
            packageId = "regex-automata 0.4.6";
            usesDefaultFeatures = false;
            features = [ "alloc" "syntax" "meta" "nfa-pikevm" ];
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.3";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "perf" "unicode" "regex-syntax/default" ];
          "logging" = [ "aho-corasick?/logging" "memchr?/logging" "regex-automata/logging" ];
          "perf" = [ "perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal" ];
          "perf-backtrack" = [ "regex-automata/nfa-backtrack" ];
          "perf-dfa" = [ "regex-automata/hybrid" ];
          "perf-dfa-full" = [ "regex-automata/dfa-build" "regex-automata/dfa-search" ];
          "perf-inline" = [ "regex-automata/perf-inline" ];
          "perf-literal" = [ "dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal" ];
          "perf-onepass" = [ "regex-automata/dfa-onepass" ];
          "std" = [ "aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode" ];
          "unicode-age" = [ "regex-automata/unicode-age" "regex-syntax/unicode-age" ];
          "unicode-bool" = [ "regex-automata/unicode-bool" "regex-syntax/unicode-bool" ];
          "unicode-case" = [ "regex-automata/unicode-case" "regex-syntax/unicode-case" ];
          "unicode-gencat" = [ "regex-automata/unicode-gencat" "regex-syntax/unicode-gencat" ];
          "unicode-perl" = [ "regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl" ];
          "unicode-script" = [ "regex-automata/unicode-script" "regex-syntax/unicode-script" ];
          "unicode-segment" = [ "regex-automata/unicode-segment" "regex-syntax/unicode-segment" ];
          "unstable" = [ "pattern" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "perf" "perf-backtrack" "perf-cache" "perf-dfa" "perf-inline" "perf-literal" "perf-onepass" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-automata 0.1.10" = rec {
        crateName = "regex-automata";
        version = "0.1.10";
        edition = "2015";
        sha256 = "0ci1hvbzhrfby5fdpf4ganhf7kla58acad9i1ff1p34dzdrhs8vc";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.6.29";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "fst" = [ "dep:fst" ];
          "regex-syntax" = [ "dep:regex-syntax" ];
          "std" = [ "regex-syntax" ];
          "transducer" = [ "std" "fst" ];
        };
        resolvedDefaultFeatures = [ "default" "regex-syntax" "std" ];
      };
      "regex-automata 0.4.6" = rec {
        crateName = "regex-automata";
        version = "0.4.6";
        edition = "2021";
        sha256 = "1spaq7y4im7s56d1gxa2hi4hzf6dwswb1bv8xyavzya7k25kpf46";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.3";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid" ];
          "dfa" = [ "dfa-build" "dfa-search" "dfa-onepass" ];
          "dfa-build" = [ "nfa-thompson" "dfa-search" ];
          "dfa-onepass" = [ "nfa-thompson" ];
          "hybrid" = [ "alloc" "nfa-thompson" ];
          "internal-instrument" = [ "internal-instrument-pikevm" ];
          "internal-instrument-pikevm" = [ "logging" "std" ];
          "logging" = [ "dep:log" "aho-corasick?/logging" "memchr?/logging" ];
          "meta" = [ "syntax" "nfa-pikevm" ];
          "nfa" = [ "nfa-thompson" "nfa-pikevm" "nfa-backtrack" ];
          "nfa-backtrack" = [ "nfa-thompson" ];
          "nfa-pikevm" = [ "nfa-thompson" ];
          "nfa-thompson" = [ "alloc" ];
          "perf" = [ "perf-inline" "perf-literal" ];
          "perf-literal" = [ "perf-literal-substring" "perf-literal-multisubstring" ];
          "perf-literal-multisubstring" = [ "std" "dep:aho-corasick" ];
          "perf-literal-substring" = [ "aho-corasick?/perf-literal" "dep:memchr" ];
          "std" = [ "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc" ];
          "syntax" = [ "dep:regex-syntax" "alloc" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode" ];
          "unicode-age" = [ "regex-syntax?/unicode-age" ];
          "unicode-bool" = [ "regex-syntax?/unicode-bool" ];
          "unicode-case" = [ "regex-syntax?/unicode-case" ];
          "unicode-gencat" = [ "regex-syntax?/unicode-gencat" ];
          "unicode-perl" = [ "regex-syntax?/unicode-perl" ];
          "unicode-script" = [ "regex-syntax?/unicode-script" ];
          "unicode-segment" = [ "regex-syntax?/unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "alloc" "dfa-onepass" "hybrid" "meta" "nfa" "nfa-backtrack" "nfa-pikevm" "nfa-thompson" "perf" "perf-inline" "perf-literal" "perf-literal-multisubstring" "perf-literal-substring" "std" "syntax" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" ];
      };
      "regex-syntax 0.6.29" = rec {
        crateName = "regex-syntax";
        version = "0.6.29";
        edition = "2018";
        sha256 = "1qgj49vm6y3zn1hi09x91jvgkl2b1fiaq402skj83280ggfwcqpi";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "default" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-syntax 0.8.3" = rec {
        crateName = "regex-syntax";
        version = "0.8.3";
        edition = "2021";
        sha256 = "0mhzkm1pkqg6y53xv056qciazlg47pq0czqs94cn302ckvi49bdd";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "renderdoc-sys" = rec {
        crateName = "renderdoc-sys";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0cj8zjs7k0gvchcx3jhpg8r9bbqy8b1hsgbz0flcq2ydn12hmcqr";
        authors = [
          "Eyal Kalderon <ebkalderon@gmail.com>"
        ];

      };
      "rmp" = rec {
        crateName = "rmp";
        version = "0.8.14";
        edition = "2021";
        sha256 = "1i1l6dhv7vws5vp0ikakj44fk597xi59g3j6ng1q55x3dz0xg3i2";
        authors = [
          "Evgeny Safronov <division494@gmail.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "paste";
            packageId = "paste";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "byteorder/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rmp-serde" = rec {
        crateName = "rmp-serde";
        version = "1.3.0";
        edition = "2021";
        sha256 = "1nylmh7w2vpa1bwrnx1jfp2l4yz6i5qrmpic5zll166gfyj9kraj";
        authors = [
          "Evgeny Safronov <division494@gmail.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "rmp";
            packageId = "rmp";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];

      };
      "rodio" = rec {
        crateName = "rodio";
        version = "0.17.3";
        edition = "2021";
        sha256 = "04g66llq7jw91cj8inw5rk7h0xnc9w2c08m1bpsp3174issbf6rv";
        dependencies = [
          {
            name = "claxon";
            packageId = "claxon";
            optional = true;
          }
          {
            name = "cpal";
            packageId = "cpal";
          }
          {
            name = "hound";
            packageId = "hound";
            optional = true;
          }
          {
            name = "lewton";
            packageId = "lewton";
            optional = true;
          }
          {
            name = "minimp3_fixed";
            packageId = "minimp3_fixed";
            optional = true;
          }
          {
            name = "symphonia";
            packageId = "symphonia";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "claxon" = [ "dep:claxon" ];
          "crossbeam-channel" = [ "dep:crossbeam-channel" ];
          "default" = [ "flac" "vorbis" "wav" "mp3" ];
          "flac" = [ "claxon" ];
          "hound" = [ "dep:hound" ];
          "lewton" = [ "dep:lewton" ];
          "minimp3" = [ "dep:minimp3_fixed" ];
          "mp3" = [ "symphonia-mp3" ];
          "symphonia" = [ "dep:symphonia" ];
          "symphonia-aac" = [ "symphonia/aac" ];
          "symphonia-all" = [ "symphonia-aac" "symphonia-flac" "symphonia-isomp4" "symphonia-mp3" "symphonia-vorbis" "symphonia-wav" ];
          "symphonia-flac" = [ "symphonia/flac" ];
          "symphonia-isomp4" = [ "symphonia/isomp4" ];
          "symphonia-mp3" = [ "symphonia/mp3" ];
          "symphonia-vorbis" = [ "symphonia/vorbis" ];
          "symphonia-wav" = [ "symphonia/wav" "symphonia/pcm" "symphonia/adpcm" ];
          "vorbis" = [ "lewton" ];
          "wasm-bindgen" = [ "cpal/wasm-bindgen" ];
          "wav" = [ "hound" ];
        };
        resolvedDefaultFeatures = [ "claxon" "flac" "hound" "lewton" "minimp3" "mp3" "symphonia" "symphonia-aac" "symphonia-all" "symphonia-flac" "symphonia-isomp4" "symphonia-mp3" "symphonia-vorbis" "symphonia-wav" "vorbis" "wasm-bindgen" "wav" ];
      };
      "ron" = rec {
        crateName = "ron";
        version = "0.8.1";
        edition = "2021";
        sha256 = "154w53s895yxdfg7rn87c6f6x4yncc535x1x31zpcj7p0pzpw7xr";
        authors = [
          "Christopher Durham <cad97@cad97.com>"
          "Dzmitry Malyshau <kvarkus@gmail.com>"
          "Thomas Schaller <torkleyy@gmail.com>"
          "Juniper Tyree <juniper.tyree@helsinki.fi>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "indexmap" = [ "dep:indexmap" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "rustc-hash" = rec {
        crateName = "rustc-hash";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1qkc5khrmv5pqi5l5ca9p5nl5hs742cagrndhbrlk3dhlrx3zm08";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rustc_version" = rec {
        crateName = "rustc_version";
        version = "0.4.0";
        edition = "2018";
        sha256 = "0rpk9rcdk405xhbmgclsh4pai0svn49x35aggl4nhbkd4a2zb85z";
        authors = [
          "Dirkjan Ochtman <dirkjan@ochtman.nl>"
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = [
          {
            name = "semver";
            packageId = "semver";
          }
        ];

      };
      "rustix 0.37.27" = rec {
        crateName = "rustix";
        version = "0.37.27";
        edition = "2018";
        sha256 = "1lidfswa8wbg358yrrkhfvsw0hzlvl540g4lwqszw09sg8vcma7y";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
          "Jakub Konka <kubkon@jakubkonka.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || (("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("powerpc64" == target."arch" or null) || ("riscv64" == target."arch" or null) || ("mips" == target."arch" or null) || ("mips64" == target."arch" or null)))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || (("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("powerpc64" == target."arch" or null) || ("riscv64" == target."arch" or null) || ("mips" == target."arch" or null) || ("mips64" == target."arch" or null))))))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "io-lifetimes";
            packageId = "io-lifetimes";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "close" ];
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || (("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("powerpc64" == target."arch" or null) || ("riscv64" == target."arch" or null) || ("mips" == target."arch" or null) || ("mips64" == target."arch" or null)))));
            features = [ "extra_traits" ];
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || (("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("powerpc64" == target."arch" or null) || ("riscv64" == target."arch" or null) || ("mips" == target."arch" or null) || ("mips64" == target."arch" or null))))))));
            features = [ "extra_traits" ];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys 0.3.8";
            usesDefaultFeatures = false;
            target = { target, features }: ((("android" == target."os" or null) || ("linux" == target."os" or null)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || (("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("powerpc64" == target."arch" or null) || ("riscv64" == target."arch" or null) || ("mips" == target."arch" or null) || ("mips64" == target."arch" or null))))))));
            features = [ "general" "ioctl" "no_std" ];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys 0.3.8";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || (("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("powerpc64" == target."arch" or null) || ("riscv64" == target."arch" or null) || ("mips" == target."arch" or null) || ("mips64" == target."arch" or null)))));
            features = [ "general" "errno" "ioctl" "no_std" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_NetworkManagement_IpHelper" "Win32_System_Threading" ];
          }
        ];
        devDependencies = [
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
          }
          {
            name = "io-lifetimes";
            packageId = "io-lifetimes";
            usesDefaultFeatures = false;
            features = [ "close" ];
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "all-apis" = [ "fs" "io_uring" "mm" "net" "param" "process" "procfs" "pty" "rand" "runtime" "termios" "thread" "time" ];
          "all-impls" = [ "os_pipe" "fs-err" ];
          "alloc" = [ "dep:alloc" ];
          "cc" = [ "dep:cc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" "use-libc-auxv" ];
          "fs-err" = [ "io-lifetimes/fs-err" ];
          "io-lifetimes" = [ "dep:io-lifetimes" ];
          "io_uring" = [ "fs" "net" ];
          "itoa" = [ "dep:itoa" ];
          "libc" = [ "dep:libc" ];
          "libc_errno" = [ "dep:libc_errno" ];
          "linux_latest" = [ "linux_4_11" ];
          "once_cell" = [ "dep:once_cell" ];
          "os_pipe" = [ "io-lifetimes/os_pipe" ];
          "param" = [ "fs" ];
          "procfs" = [ "once_cell" "itoa" "fs" ];
          "pty" = [ "itoa" "fs" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "linux-raw-sys/rustc-dep-of-std" "bitflags/rustc-dep-of-std" ];
          "std" = [ "io-lifetimes" ];
          "use-libc" = [ "libc_errno" "libc" ];
          "use-libc-auxv" = [ "libc" ];
        };
        resolvedDefaultFeatures = [ "fs" "io-lifetimes" "std" ];
      };
      "rustix 0.38.34" = rec {
        crateName = "rustix";
        version = "0.38.34";
        edition = "2021";
        sha256 = "03vkqa2ism7q56rkifyy8mns0wwqrk70f4i4fd53r97p8b05xp3h";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
          "Jakub Konka <kubkon@jakubkonka.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys 0.4.13";
            usesDefaultFeatures = false;
            target = { target, features }: ((("android" == target."os" or null) || ("linux" == target."os" or null)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
            features = [ "general" "ioctl" "no_std" ];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys 0.4.13";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && ("little" == target."endian" or null) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
            features = [ "general" "errno" "ioctl" "no_std" "elf" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_NetworkManagement_IpHelper" "Win32_System_Threading" ];
          }
        ];
        devDependencies = [
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "all-apis" = [ "event" "fs" "io_uring" "mm" "mount" "net" "param" "pipe" "process" "procfs" "pty" "rand" "runtime" "shm" "stdio" "system" "termios" "thread" "time" ];
          "default" = [ "std" "use-libc-auxv" ];
          "io_uring" = [ "event" "fs" "net" "linux-raw-sys/io_uring" ];
          "itoa" = [ "dep:itoa" ];
          "libc" = [ "dep:libc" ];
          "libc-extra-traits" = [ "libc?/extra_traits" ];
          "libc_errno" = [ "dep:libc_errno" ];
          "linux_latest" = [ "linux_4_11" ];
          "net" = [ "linux-raw-sys/net" "linux-raw-sys/netlink" "linux-raw-sys/if_ether" "linux-raw-sys/xdp" ];
          "once_cell" = [ "dep:once_cell" ];
          "param" = [ "fs" ];
          "process" = [ "linux-raw-sys/prctl" ];
          "procfs" = [ "once_cell" "itoa" "fs" ];
          "pty" = [ "itoa" "fs" ];
          "runtime" = [ "linux-raw-sys/prctl" ];
          "rustc-dep-of-std" = [ "dep:core" "dep:alloc" "dep:compiler_builtins" "linux-raw-sys/rustc-dep-of-std" "bitflags/rustc-dep-of-std" "compiler_builtins?/rustc-dep-of-std" ];
          "shm" = [ "fs" ];
          "std" = [ "bitflags/std" "alloc" "libc?/std" "libc_errno?/std" "libc-extra-traits" ];
          "system" = [ "linux-raw-sys/system" ];
          "thread" = [ "linux-raw-sys/prctl" ];
          "use-libc" = [ "libc_errno" "libc" "libc-extra-traits" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "event" "fs" "libc-extra-traits" "net" "pipe" "process" "shm" "std" "system" "thread" "time" "use-libc-auxv" ];
      };
      "rustversion" = rec {
        crateName = "rustversion";
        version = "1.0.16";
        edition = "2018";
        sha256 = "1c6zy65i4jmhn2raxpb3p6wfbyh5hjcmi8z6d67jga0yl38p8909";
        procMacro = true;
        build = "build/build.rs";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "ruzstd" = rec {
        crateName = "ruzstd";
        version = "0.6.0";
        edition = "2018";
        crateBin = [];
        sha256 = "0yygqpar2x910lnii4k5p43aj4943hlnxpczmqhsfddmxrqa8x2i";
        authors = [
          "Moritz Borcherding <moritz.borcherding@web.de>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "derive_more";
            packageId = "derive_more";
            usesDefaultFeatures = false;
            features = [ "display" "from" ];
          }
          {
            name = "twox-hash";
            packageId = "twox-hash";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "hash" "std" ];
          "hash" = [ "dep:twox-hash" ];
          "std" = [ "derive_more/error" ];
        };
        resolvedDefaultFeatures = [ "default" "hash" "std" ];
      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.18";
        edition = "2018";
        sha256 = "17xx2s8j1lln7iackzd9p0sv546vjq71i779gphjq923vjh5pjzk";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "same-file" = rec {
        crateName = "same-file";
        version = "1.0.6";
        edition = "2018";
        sha256 = "00h5j1w87dmhnvbv9l8bic3y7xxsnjmssvifw2ayvgx9mb1ivz4k";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "scoped-tls" = rec {
        crateName = "scoped-tls";
        version = "1.0.1";
        edition = "2015";
        sha256 = "15524h04mafihcvfpgxd8f4bgc3k95aclz8grjkg9a0rxcvn9kz1";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.2.0";
        edition = "2015";
        sha256 = "0jcz9sd47zlsgcnm1hdw0664krxwb5gczlif4qngj2aif8vky54l";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "sctk-adwaita" = rec {
        crateName = "sctk-adwaita";
        version = "0.8.1";
        edition = "2021";
        sha256 = "0l35njnl25axhkg2r5jg1iqdyhp788qfgcl8p4hsar5jlprymcl2";
        authors = [
          "Poly <marynczak.bartlomiej@gmail.com>"
        ];
        dependencies = [
          {
            name = "ab_glyph";
            packageId = "ab_glyph";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "memmap2";
            packageId = "memmap2";
            optional = true;
          }
          {
            name = "smithay-client-toolkit";
            packageId = "smithay-client-toolkit";
            usesDefaultFeatures = false;
          }
          {
            name = "tiny-skia";
            packageId = "tiny-skia";
            usesDefaultFeatures = false;
            features = [ "std" "simd" ];
          }
        ];
        features = {
          "ab_glyph" = [ "dep:ab_glyph" "memmap2" ];
          "crossfont" = [ "dep:crossfont" ];
          "default" = [ "ab_glyph" ];
          "memmap2" = [ "dep:memmap2" ];
        };
        resolvedDefaultFeatures = [ "ab_glyph" "memmap2" ];
      };
      "semver" = rec {
        crateName = "semver";
        version = "1.0.23";
        edition = "2018";
        sha256 = "12wqpxfflclbq4dv8sa6gchdh92ahhwn4ci1ls22wlby3h57wsb1";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "send_wrapper" = rec {
        crateName = "send_wrapper";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0wrxzsh9fzgkkkms621ydnz8mj30ilyq299a8cf65jn1y72hw2yd";
        authors = [
          "Thomas Keh"
        ];
        features = {
          "futures" = [ "futures-core" ];
          "futures-core" = [ "dep:futures-core" ];
        };
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.200";
        edition = "2018";
        sha256 = "0kyfkis7jg71wak6l2bfpy7gffpx22ha7vgpm8hhwz6njk6gkinx";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "derive" "rc" "serde_derive" "std" ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.200";
        edition = "2015";
        sha256 = "1jrb95pssal86p6kbh188p14893mvgn75mafr74f7kh0jimh8vw5";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "derive" "parsing" "printing" "proc-macro" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serde_json" = rec {
        crateName = "serde_json";
        version = "1.0.116";
        edition = "2021";
        sha256 = "04r81f5myl41zrsyghnbmbl39c4n3azldb9zxfafnzyi4rqxn5ry";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "indexmap" = [ "dep:indexmap" ];
          "preserve_order" = [ "indexmap" "std" ];
          "std" = [ "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "raw_value" "std" ];
      };
      "serde_repr" = rec {
        crateName = "serde_repr";
        version = "0.1.19";
        edition = "2021";
        sha256 = "1sb4cplc33z86pzlx38234xr141wr3cmviqgssiadisgl8dlar3c";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
          }
        ];

      };
      "sha1" = rec {
        crateName = "sha1";
        version = "0.10.6";
        edition = "2018";
        sha256 = "1fnnxlfg08xhkmwf2ahv634as30l1i3xhlhkvxflmasi5nd85gz3";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86" == target."arch" or null) || ("x86_64" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha1-asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "sha1-asm" = [ "dep:sha1-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sha2" = rec {
        crateName = "sha2";
        version = "0.10.8";
        edition = "2018";
        sha256 = "1j1x78zk9il95w9iv46dh9wm73r6xrgj32y6lzzw7bxws9dbfgbr";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha2-asm" ];
          "asm-aarch64" = [ "asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "sha2-asm" = [ "dep:sha2-asm" ];
          "std" = [ "digest/std" ];
        };
      };
      "sharded-slab" = rec {
        crateName = "sharded-slab";
        version = "0.1.7";
        edition = "2018";
        sha256 = "1xipjr4nqsgw34k7a2cgj9zaasl2ds6jwn89886kww93d32a637l";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        features = {
          "loom" = [ "dep:loom" ];
        };
      };
      "shlex" = rec {
        crateName = "shlex";
        version = "1.3.0";
        edition = "2015";
        sha256 = "0r1y6bv26c1scpxvhg2cabimrmwgbp4p3wy6syj9n0c4s3q2znhg";
        authors = [
          "comex <comexk@gmail.com>"
          "Fenhl <fenhl@fenhl.net>"
          "Adrian Taylor <adetaylor@chromium.org>"
          "Alex Touchet <alextouchet@outlook.com>"
          "Daniel Parks <dp+git@oxidized.org>"
          "Garrett Berg <googberg@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "signal-hook-registry" = rec {
        crateName = "signal-hook-registry";
        version = "1.4.2";
        edition = "2015";
        sha256 = "1cb5akgq8ajnd5spyn587srvs4n26ryq0p78nswffwhv46sf1sd9";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
          "Masaki Hara <ackie.h.gmai@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "simd-adler32" = rec {
        crateName = "simd-adler32";
        version = "0.3.7";
        edition = "2018";
        sha256 = "1zkq40c3iajcnr5936gjp9jjh1lpzhy44p3dq3fiw75iwr1w2vfn";
        authors = [
          "Marvin Countryman <me@maar.vin>"
        ];
        features = {
          "default" = [ "std" "const-generics" ];
        };
        resolvedDefaultFeatures = [ "const-generics" "default" "std" ];
      };
      "siphasher" = rec {
        crateName = "siphasher";
        version = "0.3.11";
        edition = "2018";
        sha256 = "03axamhmwsrmh0psdw3gf7c0zc4fyl5yjxfifz9qfka6yhkqid9q";
        authors = [
          "Frank Denis <github@pureftpd.org>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "serde_no_std" = [ "serde/alloc" ];
          "serde_std" = [ "std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.9";
        edition = "2018";
        sha256 = "0rxvsgir0qw5lkycrqgb1cxsvxzjv9bmx73bk5y42svnzfba94lg";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "slice-ring-buffer" = rec {
        crateName = "slice-ring-buffer";
        version = "0.3.3";
        edition = "2018";
        sha256 = "0xvb2ssx68wap25xy189x4ivpgciack4xp9fqgqgaqnbabjcg0bh";
        authors = [
          "Linus Probert <linus.probert@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) || ("dragonfly" == target."os" or null));
          }
          {
            name = "mach2";
            packageId = "mach2";
            usesDefaultFeatures = false;
            target = { target, features }: ((("macos" == target."os" or null) || ("ios" == target."os" or null)) && (!(builtins.elem "unix_sysv" features)));
          }
          {
            name = "winapi";
            packageId = "winapi";
            usesDefaultFeatures = false;
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "memoryapi" "handleapi" "sysinfoapi" "winbase" ];
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "libc/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "slotmap" = rec {
        crateName = "slotmap";
        version = "1.0.7";
        edition = "2018";
        sha256 = "0amqb2fn9lcy1ri0risblkcp88dl0rnfmynw7lx0nqwza77lmzyv";
        authors = [
          "Orson Peters <orsonpeters@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "slug" = rec {
        crateName = "slug";
        version = "0.1.5";
        edition = "2021";
        sha256 = "1i68hkvpbf04ga5kcssyads2wdy0kyikbqgq0l069nn8r774mn9v";type = [ "cdylib" "rlib" ];
        authors = [
          "Steven Allen <steven@stebalien.com>"
        ];
        dependencies = [
          {
            name = "deunicode";
            packageId = "deunicode";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: (builtins.elem "wasm" target."family");
          }
        ];

      };
      "smallvec" = rec {
        crateName = "smallvec";
        version = "1.13.2";
        edition = "2018";
        sha256 = "0rsw5samawl3wsw6glrsb127rx6sh89a8wyikicw6dkdcjd1lpiw";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "const_new" = [ "const_generics" ];
          "drain_keep_rest" = [ "drain_filter" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "const_generics" "const_new" "serde" "union" ];
      };
      "smithay-client-toolkit" = rec {
        crateName = "smithay-client-toolkit";
        version = "0.18.1";
        edition = "2021";
        sha256 = "0fpm2yfpsif7022w4xalxgn53y8w5dc8zkipcpbj1n1vmgpd6bwj";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
          "i509VCB <mail@i509.me>"
          "Ashley Wulber <ashley@system76.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "calloop";
            packageId = "calloop";
            optional = true;
          }
          {
            name = "calloop-wayland-source";
            packageId = "calloop-wayland-source";
            optional = true;
          }
          {
            name = "cursor-icon";
            packageId = "cursor-icon";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "memmap2";
            packageId = "memmap2";
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.34";
            features = [ "fs" "pipe" "shm" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
          }
          {
            name = "wayland-csd-frame";
            packageId = "wayland-csd-frame";
          }
          {
            name = "wayland-cursor";
            packageId = "wayland-cursor";
          }
          {
            name = "wayland-protocols";
            packageId = "wayland-protocols";
            features = [ "client" "staging" "unstable" ];
          }
          {
            name = "wayland-protocols-wlr";
            packageId = "wayland-protocols-wlr";
            features = [ "client" ];
          }
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
          {
            name = "xkeysym";
            packageId = "xkeysym";
          }
        ];
        features = {
          "bytemuck" = [ "dep:bytemuck" ];
          "calloop" = [ "dep:calloop" "calloop-wayland-source" ];
          "calloop-wayland-source" = [ "dep:calloop-wayland-source" ];
          "default" = [ "calloop" "xkbcommon" ];
          "pkg-config" = [ "dep:pkg-config" ];
          "xkbcommon" = [ "dep:xkbcommon" "bytemuck" "pkg-config" "xkeysym/bytemuck" ];
        };
        resolvedDefaultFeatures = [ "calloop" "calloop-wayland-source" ];
      };
      "smol_str" = rec {
        crateName = "smol_str";
        version = "0.2.1";
        edition = "2018";
        sha256 = "0jca0hyrwnv428q5gxhn2s8jsvrrkyrb0fyla9x37056mmimb176";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "serde?/std" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "socket2" = rec {
        crateName = "socket2";
        version = "0.4.10";
        edition = "2018";
        sha256 = "03ack54dxhgfifzsj14k7qa3r5c9wqy3v6mqhlim99cc03y1cycz";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "handleapi" "ws2ipdef" "ws2tcpip" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "all" ];
      };
      "spin" = rec {
        crateName = "spin";
        version = "0.9.8";
        edition = "2015";
        sha256 = "0rvam5r0p3a6qhc18scqpvpgb3ckzyqxpgdfyjnghh8ja7byi039";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "John Ericson <git@JohnEricson.me>"
          "Joshua Barretto <joshua.s.barretto@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
            rename = "lock_api_crate";
            optional = true;
          }
        ];
        features = {
          "barrier" = [ "mutex" ];
          "default" = [ "lock_api" "mutex" "spin_mutex" "rwlock" "once" "lazy" "barrier" ];
          "fair_mutex" = [ "mutex" ];
          "lazy" = [ "once" ];
          "lock_api" = [ "lock_api_crate" ];
          "lock_api_crate" = [ "dep:lock_api_crate" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "portable_atomic" = [ "portable-atomic" ];
          "spin_mutex" = [ "mutex" ];
          "ticket_mutex" = [ "mutex" ];
          "use_ticket_mutex" = [ "mutex" "ticket_mutex" ];
        };
        resolvedDefaultFeatures = [ "barrier" "default" "lazy" "lock_api" "lock_api_crate" "mutex" "once" "rwlock" "spin_mutex" ];
      };
      "spirv" = rec {
        crateName = "spirv";
        version = "0.3.0+sdk-1.3.268.0";
        edition = "2018";
        sha256 = "0i3qj7yvvprai1s03dvll2gkfy8398nl64wvllkhaaa4vh1i197d";
        libPath = "lib.rs";
        authors = [
          "Lei Zhang <antiagainst@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
        ];
        features = {
          "deserialize" = [ "serde" "bitflags/serde" ];
          "serde" = [ "dep:serde" ];
          "serialize" = [ "serde" "bitflags/serde" ];
        };
      };
      "stable_deref_trait" = rec {
        crateName = "stable_deref_trait";
        version = "1.2.0";
        edition = "2015";
        sha256 = "1lxjr8q2n534b2lhkxd6l6wcddzjvnksi58zv11f9y0jjmr15wd8";
        authors = [
          "Robert Grosse <n210241048576@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
      };
      "static_assertions" = rec {
        crateName = "static_assertions";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0gsl6xmw10gvn3zs1rv99laj5ig7ylffnh71f9l34js4nr4r7sx2";
        authors = [
          "Nikolai Vazquez"
        ];
        features = {
        };
      };
      "strict-num" = rec {
        crateName = "strict-num";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0cb7l1vhb8zj90mzm8avlk815k40sql9515s865rqdrdfavvldv6";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        features = {
          "approx-eq" = [ "float-cmp" ];
          "default" = [ "approx-eq" ];
          "float-cmp" = [ "dep:float-cmp" ];
        };
      };
      "strsim" = rec {
        crateName = "strsim";
        version = "0.11.1";
        edition = "2015";
        sha256 = "0kzvqlw8hxqb7y598w1s0hxlnmi84sg5vsipp3yg5na5d1rvba3x";
        authors = [
          "Danny Guo <danny@dannyguo.com>"
          "maxbachmann <oss@maxbachmann.de>"
        ];

      };
      "svg_fmt" = rec {
        crateName = "svg_fmt";
        version = "0.4.2";
        edition = "2018";
        sha256 = "16dl8bd7sm2bgvilqp81flk6zbc2fwphm6xqxxvgnpi6lc1aafzq";
        authors = [
          "Nicolas Silva <nical@fastmail.com>"
        ];

      };
      "symphonia" = rec {
        crateName = "symphonia";
        version = "0.5.4";
        edition = "2018";
        sha256 = "1agmsnmzgsmvd70hq760nvkjrb52nnjmz5hgn1xp6x7fwwm98p41";
        authors = [
          "Philip Deljanov <philip.deljanov@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "symphonia-bundle-flac";
            packageId = "symphonia-bundle-flac";
            optional = true;
          }
          {
            name = "symphonia-bundle-mp3";
            packageId = "symphonia-bundle-mp3";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "symphonia-codec-aac";
            packageId = "symphonia-codec-aac";
            optional = true;
          }
          {
            name = "symphonia-codec-adpcm";
            packageId = "symphonia-codec-adpcm";
            optional = true;
          }
          {
            name = "symphonia-codec-pcm";
            packageId = "symphonia-codec-pcm";
            optional = true;
          }
          {
            name = "symphonia-codec-vorbis";
            packageId = "symphonia-codec-vorbis";
            optional = true;
          }
          {
            name = "symphonia-core";
            packageId = "symphonia-core";
          }
          {
            name = "symphonia-format-isomp4";
            packageId = "symphonia-format-isomp4";
            optional = true;
          }
          {
            name = "symphonia-format-riff";
            packageId = "symphonia-format-riff";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "symphonia-metadata";
            packageId = "symphonia-metadata";
          }
        ];
        features = {
          "aac" = [ "symphonia-codec-aac" ];
          "adpcm" = [ "symphonia-codec-adpcm" ];
          "aiff" = [ "symphonia-format-riff/aiff" ];
          "alac" = [ "symphonia-codec-alac" ];
          "all" = [ "all-codecs" "all-formats" ];
          "all-codecs" = [ "aac" "adpcm" "alac" "flac" "mp1" "mp2" "mp3" "pcm" "vorbis" ];
          "all-formats" = [ "caf" "isomp4" "mkv" "ogg" "aiff" "wav" ];
          "caf" = [ "symphonia-format-caf" ];
          "default" = [ "adpcm" "flac" "mkv" "ogg" "pcm" "vorbis" "wav" ];
          "flac" = [ "symphonia-bundle-flac" ];
          "isomp4" = [ "symphonia-format-isomp4" ];
          "mkv" = [ "symphonia-format-mkv" ];
          "mp1" = [ "symphonia-bundle-mp3/mp1" ];
          "mp2" = [ "symphonia-bundle-mp3/mp2" ];
          "mp3" = [ "symphonia-bundle-mp3/mp3" ];
          "mpa" = [ "mp1" "mp2" "mp3" ];
          "ogg" = [ "symphonia-format-ogg" ];
          "opt-simd" = [ "opt-simd-sse" "opt-simd-avx" "opt-simd-neon" ];
          "opt-simd-avx" = [ "symphonia-core/opt-simd-avx" ];
          "opt-simd-neon" = [ "symphonia-core/opt-simd-neon" ];
          "opt-simd-sse" = [ "symphonia-core/opt-simd-sse" ];
          "pcm" = [ "symphonia-codec-pcm" ];
          "symphonia-bundle-flac" = [ "dep:symphonia-bundle-flac" ];
          "symphonia-bundle-mp3" = [ "dep:symphonia-bundle-mp3" ];
          "symphonia-codec-aac" = [ "dep:symphonia-codec-aac" ];
          "symphonia-codec-adpcm" = [ "dep:symphonia-codec-adpcm" ];
          "symphonia-codec-alac" = [ "dep:symphonia-codec-alac" ];
          "symphonia-codec-pcm" = [ "dep:symphonia-codec-pcm" ];
          "symphonia-codec-vorbis" = [ "dep:symphonia-codec-vorbis" ];
          "symphonia-format-caf" = [ "dep:symphonia-format-caf" ];
          "symphonia-format-isomp4" = [ "dep:symphonia-format-isomp4" ];
          "symphonia-format-mkv" = [ "dep:symphonia-format-mkv" ];
          "symphonia-format-ogg" = [ "dep:symphonia-format-ogg" ];
          "symphonia-format-riff" = [ "dep:symphonia-format-riff" ];
          "vorbis" = [ "symphonia-codec-vorbis" ];
          "wav" = [ "symphonia-format-riff/wav" ];
        };
        resolvedDefaultFeatures = [ "aac" "adpcm" "flac" "isomp4" "mp3" "pcm" "symphonia-bundle-flac" "symphonia-bundle-mp3" "symphonia-codec-aac" "symphonia-codec-adpcm" "symphonia-codec-pcm" "symphonia-codec-vorbis" "symphonia-format-isomp4" "symphonia-format-riff" "vorbis" "wav" ];
      };
      "symphonia-bundle-flac" = rec {
        crateName = "symphonia-bundle-flac";
        version = "0.5.4";
        edition = "2018";
        sha256 = "15xxncx6gfh7jwvxvqqw4f8x9ic4bfzpyv3s77a0hwwa54s4zqvj";
        authors = [
          "Philip Deljanov <philip.deljanov@gmail.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "symphonia-core";
            packageId = "symphonia-core";
          }
          {
            name = "symphonia-metadata";
            packageId = "symphonia-metadata";
          }
          {
            name = "symphonia-utils-xiph";
            packageId = "symphonia-utils-xiph";
          }
        ];

      };
      "symphonia-bundle-mp3" = rec {
        crateName = "symphonia-bundle-mp3";
        version = "0.5.4";
        edition = "2018";
        sha256 = "1m062zkxq2cbwqxbm3qp4qvgpc9hm49g23vgdc4zpwghf2p2l760";
        authors = [
          "Philip Deljanov <philip.deljanov@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "symphonia-core";
            packageId = "symphonia-core";
          }
          {
            name = "symphonia-metadata";
            packageId = "symphonia-metadata";
          }
        ];
        features = {
          "default" = [ "mp1" "mp2" "mp3" ];
        };
        resolvedDefaultFeatures = [ "mp3" ];
      };
      "symphonia-codec-aac" = rec {
        crateName = "symphonia-codec-aac";
        version = "0.5.4";
        edition = "2018";
        sha256 = "0w1ga9c7m5bb11rc9bpnjb5g9bqms4x69slix3ikw3dd8nsjbgyd";
        authors = [
          "Philip Deljanov <philip.deljanov@gmail.com>"
          "Kostya Shishkov <kostya.shiskov@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "symphonia-core";
            packageId = "symphonia-core";
          }
        ];

      };
      "symphonia-codec-adpcm" = rec {
        crateName = "symphonia-codec-adpcm";
        version = "0.5.4";
        edition = "2018";
        sha256 = "03va885srhrzfz31jvxh2rgr9crnmmlvxmbkx4bdcz1jqgm1ykn9";
        authors = [
          "Philip Deljanov <philip.deljanov@gmail.com>"
          "Johannes Hackel <geckoxx90@gmail.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "symphonia-core";
            packageId = "symphonia-core";
          }
        ];

      };
      "symphonia-codec-pcm" = rec {
        crateName = "symphonia-codec-pcm";
        version = "0.5.4";
        edition = "2018";
        sha256 = "16zq2s8zf0rs6070y3sfyscvm9z1riqvxcbv9plcbsy2axqad5gk";
        authors = [
          "Philip Deljanov <philip.deljanov@gmail.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "symphonia-core";
            packageId = "symphonia-core";
          }
        ];

      };
      "symphonia-codec-vorbis" = rec {
        crateName = "symphonia-codec-vorbis";
        version = "0.5.4";
        edition = "2018";
        sha256 = "0c4z98b8yg2kws3pknw7ipvvca911j3y5xq7n0r6f2kanigpd62s";
        authors = [
          "Philip Deljanov <philip.deljanov@gmail.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "symphonia-core";
            packageId = "symphonia-core";
          }
          {
            name = "symphonia-utils-xiph";
            packageId = "symphonia-utils-xiph";
          }
        ];

      };
      "symphonia-core" = rec {
        crateName = "symphonia-core";
        version = "0.5.4";
        edition = "2018";
        sha256 = "1hr2w2a217vq4lpghszmsdwxr5ilh5d1ysfm3cixbirxkrvhd0vr";
        authors = [
          "Philip Deljanov <philip.deljanov@gmail.com>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
          }
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "opt-simd" = [ "opt-simd-sse" "opt-simd-avx" "opt-simd-neon" ];
          "opt-simd-avx" = [ "rustfft/avx" ];
          "opt-simd-neon" = [ "rustfft/neon" ];
          "opt-simd-sse" = [ "rustfft/sse" ];
          "rustfft" = [ "dep:rustfft" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "symphonia-format-isomp4" = rec {
        crateName = "symphonia-format-isomp4";
        version = "0.5.4";
        edition = "2018";
        sha256 = "0i68dnhp3q7hv4i51hryw0c75i4l3fx85ffrwphhrrcpsrwg3zdb";
        authors = [
          "Philip Deljanov <philip.deljanov@gmail.com>"
        ];
        dependencies = [
          {
            name = "encoding_rs";
            packageId = "encoding_rs";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "symphonia-core";
            packageId = "symphonia-core";
          }
          {
            name = "symphonia-metadata";
            packageId = "symphonia-metadata";
          }
          {
            name = "symphonia-utils-xiph";
            packageId = "symphonia-utils-xiph";
          }
        ];

      };
      "symphonia-format-riff" = rec {
        crateName = "symphonia-format-riff";
        version = "0.5.4";
        edition = "2018";
        sha256 = "0l2zs6zl7q15jhsk9j1lahs2j29k5kkcn5bi9dzr6bwn5wivxxq5";
        authors = [
          "Philip Deljanov <philip.deljanov@gmail.com>"
          "dedobbin <dedobbindedobbin@gmail.com>"
        ];
        dependencies = [
          {
            name = "extended";
            packageId = "extended";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "symphonia-core";
            packageId = "symphonia-core";
          }
          {
            name = "symphonia-metadata";
            packageId = "symphonia-metadata";
          }
        ];
        features = {
          "default" = [ "aiff" "wav" ];
        };
        resolvedDefaultFeatures = [ "wav" ];
      };
      "symphonia-metadata" = rec {
        crateName = "symphonia-metadata";
        version = "0.5.4";
        edition = "2018";
        sha256 = "0g02lhhyf6yyxm7bynx5b9fn2ha39y8fp6cfn72qj05186c2nqmw";
        authors = [
          "Philip Deljanov <philip.deljanov@gmail.com>"
        ];
        dependencies = [
          {
            name = "encoding_rs";
            packageId = "encoding_rs";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "symphonia-core";
            packageId = "symphonia-core";
          }
        ];

      };
      "symphonia-utils-xiph" = rec {
        crateName = "symphonia-utils-xiph";
        version = "0.5.4";
        edition = "2018";
        sha256 = "1zhhs1p0h6wdcgcwfqpmqq07n8v2wvn50razvapr36d41xc74i28";
        authors = [
          "Philip Deljanov <philip.deljanov@gmail.com>"
        ];
        dependencies = [
          {
            name = "symphonia-core";
            packageId = "symphonia-core";
          }
          {
            name = "symphonia-metadata";
            packageId = "symphonia-metadata";
          }
        ];

      };
      "syn 1.0.109" = rec {
        crateName = "syn";
        version = "1.0.109";
        edition = "2018";
        sha256 = "0ds2if4600bd59wsv7jjgfkayfzy3hnazs394kz6zdkmna8l3dkj";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
          "quote" = [ "dep:quote" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "fold" "full" "parsing" "printing" "proc-macro" "quote" "visit" ];
      };
      "syn 2.0.61" = rec {
        crateName = "syn";
        version = "2.0.61";
        edition = "2021";
        sha256 = "1j8zhf5mmd2l5niwhiniw5wcp9v6fbd4a61v6rbfhsm5rf6fv4y9";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "dep:quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote?/proc-macro" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "full" "parsing" "printing" "proc-macro" "visit" "visit-mut" ];
      };
      "sysinfo" = rec {
        crateName = "sysinfo";
        version = "0.30.12";
        edition = "2018";
        sha256 = "1bhmz8gpjrlb69bf214j0hhs8qlnimqsbyq8cbs2lsryyl0glbvk";
        authors = [
          "Guillaume Gomez <guillaume1.gomez@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(("unknown" == target."os" or null) || ("wasm32" == target."arch" or null)));
          }
          {
            name = "ntapi";
            packageId = "ntapi";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = { target, features }: ((target."windows" or false) || ("linux" == target."os" or null) || ("android" == target."os" or null));
          }
          {
            name = "windows";
            packageId = "windows 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Wdk_System_SystemInformation" "Wdk_System_SystemServices" "Wdk_System_Threading" "Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_NetworkManagement_NetManagement" "Win32_NetworkManagement_Ndis" "Win32_Networking_WinSock" "Win32_Security" "Win32_Security_Authentication_Identity" "Win32_Security_Authorization" "Win32_Storage_FileSystem" "Win32_System_Com" "Win32_System_Diagnostics_Debug" "Win32_System_IO" "Win32_System_Ioctl" "Win32_System_LibraryLoader" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_Ole" "Win32_System_Performance" "Win32_System_Power" "Win32_System_ProcessStatus" "Win32_System_Registry" "Win32_System_RemoteDesktop" "Win32_System_Rpc" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_Variant" "Win32_System_WindowsProgramming" "Win32_System_Wmi" "Win32_UI_Shell" ];
          }
        ];
        features = {
          "apple-app-store" = [ "apple-sandbox" ];
          "debug" = [ "libc/extra_traits" ];
          "default" = [ "multithread" ];
          "multithread" = [ "rayon" ];
          "rayon" = [ "dep:rayon" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "apple-app-store" "apple-sandbox" ];
      };
      "taffy" = rec {
        crateName = "taffy";
        version = "0.4.3";
        edition = "2021";
        sha256 = "09cjrxlja9jj5kp97ixg76r8dps71f8nab5v8kkvav4c685i8bkv";
        authors = [
          "Alice Cecile <alice.i.cecile@gmail.com>"
          "Johnathan Kelley <jkelleyrtp@gmail.com>"
          "Nico Burns <nico@nicoburns.com>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "grid";
            packageId = "grid";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde_derive" ];
          }
          {
            name = "slotmap";
            packageId = "slotmap";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" ];
          "debug" = [ "std" ];
          "default" = [ "std" "taffy_tree" "flexbox" "grid" "block_layout" "content_size" ];
          "grid" = [ "alloc" "dep:grid" ];
          "profile" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-traits/std" "grid?/std" "serde?/std" "slotmap?/std" ];
          "taffy_tree" = [ "dep:slotmap" ];
        };
        resolvedDefaultFeatures = [ "alloc" "block_layout" "content_size" "default" "flexbox" "grid" "std" "taffy_tree" ];
      };
      "tempfile" = rec {
        crateName = "tempfile";
        version = "3.10.1";
        edition = "2021";
        sha256 = "1wdzz35ri168jn9al4s1g2rnsrr5ci91khgarc2rvpb3nappzdw5";
        authors = [
          "Steven Allen <steven@stebalien.com>"
          "The Rust Project Developers"
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Jason White <me@jasonwhite.io>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "fastrand";
            packageId = "fastrand 2.1.0";
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.34";
            target = { target, features }: ((target."unix" or false) || ("wasi" == target."os" or null));
            features = [ "fs" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Storage_FileSystem" "Win32_Foundation" ];
          }
        ];
        features = {
        };
      };
      "tera" = rec {
        crateName = "tera";
        version = "1.19.1";
        edition = "2018";
        sha256 = "1f0hdpz59qi6abl12yj42fxh27ppgshy6xmw1554m20yq4bzy3cp";
        authors = [
          "Vincent Prouillet <hello@prouilletvincent.com>"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "clock" ];
          }
          {
            name = "chrono-tz";
            packageId = "chrono-tz";
            optional = true;
          }
          {
            name = "globwalk";
            packageId = "globwalk";
          }
          {
            name = "humansize";
            packageId = "humansize";
            optional = true;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            optional = true;
          }
          {
            name = "pest";
            packageId = "pest";
          }
          {
            name = "pest_derive";
            packageId = "pest_derive";
          }
          {
            name = "rand";
            packageId = "rand";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "slug";
            packageId = "slug";
            optional = true;
          }
          {
            name = "unic-segment";
            packageId = "unic-segment";
          }
        ];
        features = {
          "builtins" = [ "urlencode" "slug" "humansize" "chrono" "chrono-tz" "rand" ];
          "chrono" = [ "dep:chrono" ];
          "chrono-tz" = [ "dep:chrono-tz" ];
          "date-locale" = [ "builtins" "chrono/unstable-locales" ];
          "default" = [ "builtins" ];
          "humansize" = [ "dep:humansize" ];
          "percent-encoding" = [ "dep:percent-encoding" ];
          "preserve_order" = [ "serde_json/preserve_order" ];
          "rand" = [ "dep:rand" ];
          "slug" = [ "dep:slug" ];
          "urlencode" = [ "percent-encoding" ];
        };
        resolvedDefaultFeatures = [ "builtins" "chrono" "chrono-tz" "default" "humansize" "percent-encoding" "rand" "slug" "urlencode" ];
      };
      "termcolor" = rec {
        crateName = "termcolor";
        version = "1.4.1";
        edition = "2018";
        sha256 = "0mappjh3fj3p2nmrg4y7qv94rchwi9mzmgmfflr8p2awdj7lyy86";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "thiserror" = rec {
        crateName = "thiserror";
        version = "1.0.60";
        edition = "2021";
        sha256 = "067wi7pb1zn9jhhk82w0ppmvjwa00nwkp4m9j77rvpaqra1r17jp";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl";
          }
        ];

      };
      "thiserror-impl" = rec {
        crateName = "thiserror-impl";
        version = "1.0.60";
        edition = "2021";
        sha256 = "0945q2hk1rqdzjz2zqakxbddwm4h26k5c0wdncdarhvfq10h0iz2";
        procMacro = true;
        libName = "thiserror_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
          }
        ];

      };
      "thread_local" = rec {
        crateName = "thread_local";
        version = "1.1.8";
        edition = "2021";
        sha256 = "173i5lyjh011gsimk21np9jn8al18rxsrkjli20a7b8ks2xgk7lb";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
        };
      };
      "tiny-skia" = rec {
        crateName = "tiny-skia";
        version = "0.11.4";
        edition = "2018";
        sha256 = "1aq9gd4qh4418g8v08qzakqqggx8hl66qcianl3k5bjdsja37lc3";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "aarch64_simd" ];
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "tiny-skia-path";
            packageId = "tiny-skia-path";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "simd" "png-format" ];
          "no-std-float" = [ "tiny-skia-path/no-std-float" ];
          "png" = [ "dep:png" ];
          "png-format" = [ "std" "png" ];
          "std" = [ "tiny-skia-path/std" ];
        };
        resolvedDefaultFeatures = [ "simd" "std" ];
      };
      "tiny-skia-path" = rec {
        crateName = "tiny-skia-path";
        version = "0.11.4";
        edition = "2018";
        sha256 = "14ywbdfakvacl6rxxmzbnycplaxpc6i2linh2yqk0sp8qb07z7lw";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "strict-num";
            packageId = "strict-num";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
          "no-std-float" = [ "libm" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "tinyvec" = rec {
        crateName = "tinyvec";
        version = "1.6.0";
        edition = "2018";
        sha256 = "0l6bl2h62a5m44jdnpn7lmj14rd44via8180i7121fvm73mmrk47";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec_macros";
            packageId = "tinyvec_macros";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "tinyvec_macros" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "real_blackbox" = [ "criterion/real_blackbox" ];
          "rustc_1_55" = [ "rustc_1_40" ];
          "rustc_1_57" = [ "rustc_1_55" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "tinyvec_macros" = [ "dep:tinyvec_macros" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "tinyvec_macros" ];
      };
      "tinyvec_macros" = rec {
        crateName = "tinyvec_macros";
        version = "0.1.1";
        edition = "2018";
        sha256 = "081gag86208sc3y6sdkshgw3vysm5d34p431dzw0bshz66ncng0z";
        authors = [
          "Soveu <marx.tomasz@gmail.com>"
        ];

      };
      "toml_datetime" = rec {
        crateName = "toml_datetime";
        version = "0.6.5";
        edition = "2021";
        sha256 = "1wds4pm2cn6agd38f0ivm65xnc7c7bmk9m0fllcaq82nd3lz8l1m";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "toml_edit 0.19.15" = rec {
        crateName = "toml_edit";
        version = "0.19.15";
        edition = "2021";
        sha256 = "08bl7rp5g6jwmfpad9s8jpw8wjrciadpnbaswgywpr9hv9qbfnqv";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap";
            features = [ "std" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "winnow";
            packageId = "winnow 0.5.40";
          }
        ];
        features = {
          "perf" = [ "dep:kstring" ];
          "serde" = [ "dep:serde" "toml_datetime/serde" "dep:serde_spanned" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "toml_edit 0.21.1" = rec {
        crateName = "toml_edit";
        version = "0.21.1";
        edition = "2021";
        sha256 = "1qch02syrd9c8krcimfl72gyjz11fmjssh03hrg41dbqgzyk91ba";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap";
            features = [ "std" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "winnow";
            packageId = "winnow 0.5.40";
            optional = true;
          }
        ];
        features = {
          "default" = [ "parse" "display" ];
          "parse" = [ "dep:winnow" ];
          "perf" = [ "dep:kstring" ];
          "serde" = [ "dep:serde" "toml_datetime/serde" "dep:serde_spanned" ];
        };
        resolvedDefaultFeatures = [ "default" "display" "parse" ];
      };
      "toml_edit 0.22.12" = rec {
        crateName = "toml_edit";
        version = "0.22.12";
        edition = "2021";
        sha256 = "1vyxc7naf61hxhn8lccq1x8scfaxb20db8cd96jb41d7d17qscnk";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap";
            features = [ "std" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "winnow";
            packageId = "winnow 0.6.8";
            optional = true;
          }
        ];
        features = {
          "default" = [ "parse" "display" ];
          "parse" = [ "dep:winnow" ];
          "perf" = [ "dep:kstring" ];
          "serde" = [ "dep:serde" "toml_datetime/serde" "dep:serde_spanned" ];
        };
        resolvedDefaultFeatures = [ "parse" ];
      };
      "tracing" = rec {
        crateName = "tracing";
        version = "0.1.40";
        edition = "2018";
        sha256 = "1vv48dac9zgj9650pg2b4d0j3w6f3x9gbggf43scq5hrlysklln3";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tracing-attributes";
            packageId = "tracing-attributes";
            optional = true;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "attributes" = [ "tracing-attributes" ];
          "default" = [ "std" "attributes" ];
          "log" = [ "dep:log" ];
          "log-always" = [ "log" ];
          "std" = [ "tracing-core/std" ];
          "tracing-attributes" = [ "dep:tracing-attributes" ];
          "valuable" = [ "tracing-core/valuable" ];
        };
        resolvedDefaultFeatures = [ "attributes" "default" "std" "tracing-attributes" ];
      };
      "tracing-attributes" = rec {
        crateName = "tracing-attributes";
        version = "0.1.27";
        edition = "2018";
        sha256 = "1rvb5dn9z6d0xdj14r403z0af0bbaqhg02hq4jc97g5wds6lqw1l";
        procMacro = true;
        authors = [
          "Tokio Contributors <team@tokio.rs>"
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <dbarsky@amazon.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
            usesDefaultFeatures = false;
            features = [ "full" "parsing" "printing" "visit-mut" "clone-impls" "extra-traits" "proc-macro" ];
          }
        ];
        features = {
        };
      };
      "tracing-chrome" = rec {
        crateName = "tracing-chrome";
        version = "0.7.2";
        edition = "2018";
        sha256 = "0977zy46gpawva2laffigxr2pph8v0xa51kfp6ghlifnsn7762mz";
        authors = [
          "Thoren Paulson <thoren.paulson@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
          }
        ];

      };
      "tracing-core" = rec {
        crateName = "tracing-core";
        version = "0.1.32";
        edition = "2018";
        sha256 = "0m5aglin3cdwxpvbg6kz0r9r0k31j48n0kcfwsp6l49z26k3svf0";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "valuable";
            packageId = "valuable";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."tracing_unstable" or false);
          }
        ];
        features = {
          "default" = [ "std" "valuable/std" ];
          "once_cell" = [ "dep:once_cell" ];
          "std" = [ "once_cell" ];
          "valuable" = [ "dep:valuable" ];
        };
        resolvedDefaultFeatures = [ "default" "once_cell" "std" "valuable" ];
      };
      "tracing-error" = rec {
        crateName = "tracing-error";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0vi0rns7r8iny2milg0kikz1mhgcl9wz5clpy1vi4jrq1wffr1nn";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Jane Lusby <jlusby@yaah.dev>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            usesDefaultFeatures = false;
            features = [ "registry" "fmt" ];
          }
        ];
        features = {
          "default" = [ "traced-error" ];
        };
        resolvedDefaultFeatures = [ "default" "traced-error" ];
      };
      "tracing-log" = rec {
        crateName = "tracing-log";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1hs77z026k730ij1a9dhahzrl0s073gfa2hm5p0fbl0b80gmz1gf";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "default" = [ "log-tracer" "std" ];
          "interest-cache" = [ "lru" "ahash" ];
          "lru" = [ "dep:lru" ];
          "std" = [ "log/std" ];
        };
        resolvedDefaultFeatures = [ "default" "log-tracer" "std" ];
      };
      "tracing-subscriber" = rec {
        crateName = "tracing-subscriber";
        version = "0.3.18";
        edition = "2018";
        sha256 = "12vs1bwk4kig1l2qqjbbn2nm5amwiqmkcmnznylzmnfvjy6083xd";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <me@davidbarsky.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "matchers";
            packageId = "matchers";
            optional = true;
          }
          {
            name = "nu-ansi-term";
            packageId = "nu-ansi-term";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "unicode-case" "unicode-perl" ];
          }
          {
            name = "sharded-slab";
            packageId = "sharded-slab";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
          }
          {
            name = "thread_local";
            packageId = "thread_local";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "log-tracer" "std" ];
          }
        ];
        devDependencies = [
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
          }
        ];
        features = {
          "ansi" = [ "fmt" "nu-ansi-term" ];
          "chrono" = [ "dep:chrono" ];
          "default" = [ "smallvec" "fmt" "ansi" "tracing-log" "std" ];
          "env-filter" = [ "matchers" "regex" "once_cell" "tracing" "std" "thread_local" ];
          "fmt" = [ "registry" "std" ];
          "json" = [ "tracing-serde" "serde" "serde_json" ];
          "local-time" = [ "time/local-offset" ];
          "matchers" = [ "dep:matchers" ];
          "nu-ansi-term" = [ "dep:nu-ansi-term" ];
          "once_cell" = [ "dep:once_cell" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "regex" = [ "dep:regex" ];
          "registry" = [ "sharded-slab" "thread_local" "std" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "sharded-slab" = [ "dep:sharded-slab" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "alloc" "tracing-core/std" ];
          "thread_local" = [ "dep:thread_local" ];
          "time" = [ "dep:time" ];
          "tracing" = [ "dep:tracing" ];
          "tracing-log" = [ "dep:tracing-log" ];
          "tracing-serde" = [ "dep:tracing-serde" ];
          "valuable" = [ "tracing-core/valuable" "valuable_crate" "valuable-serde" "tracing-serde/valuable" ];
          "valuable-serde" = [ "dep:valuable-serde" ];
          "valuable_crate" = [ "dep:valuable_crate" ];
        };
        resolvedDefaultFeatures = [ "alloc" "ansi" "default" "env-filter" "fmt" "matchers" "nu-ansi-term" "once_cell" "regex" "registry" "sharded-slab" "smallvec" "std" "thread_local" "tracing" "tracing-log" ];
      };
      "tracing-tracy" = rec {
        crateName = "tracing-tracy";
        version = "0.11.0";
        edition = "2021";
        sha256 = "051nf1ncp1z45acgk0h5199ldlhb0wmkmvhyvk8x17x6hi7x0930";
        authors = [
          "Simonas Kazlauskas <tracing-tracy@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            usesDefaultFeatures = false;
            features = [ "fmt" "registry" ];
          }
          {
            name = "tracy-client";
            packageId = "tracy-client";
            rename = "client";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "broadcast" = [ "client/broadcast" ];
          "callstack-inlines" = [ "client/callstack-inlines" ];
          "code-transfer" = [ "client/code-transfer" ];
          "context-switch-tracing" = [ "client/context-switch-tracing" ];
          "default" = [ "enable" "system-tracing" "context-switch-tracing" "sampling" "code-transfer" "broadcast" "callstack-inlines" ];
          "delayed-init" = [ "client/delayed-init" ];
          "enable" = [ "client/enable" ];
          "fibers" = [ "client/fibers" ];
          "flush-on-exit" = [ "client/flush-on-exit" ];
          "manual-lifetime" = [ "client/manual-lifetime" ];
          "ondemand" = [ "client/ondemand" ];
          "only-ipv4" = [ "client/only-ipv4" ];
          "only-localhost" = [ "client/only-localhost" ];
          "sampling" = [ "client/sampling" ];
          "system-tracing" = [ "client/system-tracing" ];
          "timer-fallback" = [ "client/timer-fallback" ];
        };
        resolvedDefaultFeatures = [ "broadcast" "callstack-inlines" "code-transfer" "context-switch-tracing" "default" "enable" "sampling" "system-tracing" ];
      };
      "tracing-wasm" = rec {
        crateName = "tracing-wasm";
        version = "0.2.1";
        edition = "2018";
        sha256 = "01vfcarjds5n94vz72fxnzxz4nznd3zhhhcgsyi0yhkll5iwcxa5";type = [ "cdylib" "rlib" ];
        authors = [
          "Cole Lawrence <cole@colelawrence.com>"
          "Story.ai Team <team@story.ai>"
        ];
        dependencies = [
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "attributes" ];
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            usesDefaultFeatures = false;
            features = [ "registry" ];
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        features = {
          "mark-with-rayon-thread-index" = [ "rayon" ];
          "rayon" = [ "dep:rayon" ];
        };
      };
      "tracy-client" = rec {
        crateName = "tracy-client";
        version = "0.17.0";
        edition = "2021";
        sha256 = "07bla4iigg17fl4zil2dwizslhw8mv8vrsfkhr7ri27zchd97ysr";
        authors = [
          "Simonas Kazlauskas <tracy-client@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "loom";
            packageId = "loom";
            target = { target, features }: (target."loom" or false);
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "tracy-client-sys";
            packageId = "tracy-client-sys";
            rename = "sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "broadcast" = [ "sys/broadcast" ];
          "callstack-inlines" = [ "sys/callstack-inlines" ];
          "code-transfer" = [ "sys/code-transfer" ];
          "context-switch-tracing" = [ "sys/context-switch-tracing" ];
          "default" = [ "enable" "system-tracing" "context-switch-tracing" "sampling" "code-transfer" "broadcast" "callstack-inlines" ];
          "delayed-init" = [ "sys/delayed-init" ];
          "enable" = [ "sys/enable" ];
          "fibers" = [ "sys/fibers" ];
          "flush-on-exit" = [ "sys/flush-on-exit" ];
          "manual-lifetime" = [ "sys/manual-lifetime" ];
          "ondemand" = [ "sys/ondemand" ];
          "only-ipv4" = [ "sys/only-ipv4" ];
          "only-localhost" = [ "sys/only-localhost" ];
          "sampling" = [ "sys/sampling" ];
          "system-tracing" = [ "sys/system-tracing" ];
          "timer-fallback" = [ "sys/timer-fallback" ];
        };
        resolvedDefaultFeatures = [ "broadcast" "callstack-inlines" "code-transfer" "context-switch-tracing" "default" "enable" "sampling" "system-tracing" ];
      };
      "tracy-client-sys" = rec {
        crateName = "tracy-client-sys";
        version = "0.22.2";
        edition = "2021";
        sha256 = "10h8msq85b7rhfg2vg22g2iizbk4c6fcq0jiadad37gs1mhls44x";
        authors = [
          "Simonas Kazlauskas <tracy-client-sys@kazlauskas.me>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "enable" "system-tracing" "context-switch-tracing" "sampling" "code-transfer" "broadcast" "callstack-inlines" ];
          "manual-lifetime" = [ "delayed-init" ];
        };
        resolvedDefaultFeatures = [ "broadcast" "callstack-inlines" "code-transfer" "context-switch-tracing" "enable" "sampling" "system-tracing" ];
      };
      "ttf-parser" = rec {
        crateName = "ttf-parser";
        version = "0.20.0";
        edition = "2018";
        sha256 = "1d4n3p9ccjvy4mj72700i0c2q6d49dxjpwflw47q79rpv1v7vxqp";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        features = {
          "default" = [ "std" "opentype-layout" "apple-layout" "variable-fonts" "glyph-names" ];
          "gvar-alloc" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "apple-layout" "glyph-names" "opentype-layout" "std" "variable-fonts" ];
      };
      "twox-hash" = rec {
        crateName = "twox-hash";
        version = "1.6.3";
        edition = "2018";
        crateBin = [];
        sha256 = "0xgn72j36a270l5ls1jk88n7bmq2dhlfkbhdh5554hbagjsydzlp";
        authors = [
          "Jake Goulding <jake.goulding@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            usesDefaultFeatures = false;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "digest" = [ "dep:digest" ];
          "digest_0_10" = [ "dep:digest_0_10" ];
          "digest_0_9" = [ "dep:digest_0_9" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" ];
          "serialize" = [ "serde" ];
          "std" = [ "rand" ];
        };
      };
      "typenum" = rec {
        crateName = "typenum";
        version = "1.17.0";
        edition = "2018";
        sha256 = "09dqxv69m9lj9zvv6xw5vxaqx15ps0vxyy5myg33i0kbqvq0pzs2";
        build = "build/main.rs";
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        features = {
          "scale-info" = [ "dep:scale-info" ];
          "scale_info" = [ "scale-info/derive" ];
        };
      };
      "ucd-trie" = rec {
        crateName = "ucd-trie";
        version = "0.1.6";
        edition = "2021";
        sha256 = "1ff4yfksirqs37ybin9aw71aa5gva00hw7jdxbw8w668zy964r7d";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "uds_windows" = rec {
        crateName = "uds_windows";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1fb4y65pw0rsp0gyfyinjazlzxz1f6zv7j4zmb20l5pxwv1ypnl9";
        authors = [
          "Azure IoT Edge Devs"
          "Harald Hoyer <harald@redhat.com>"
        ];
        dependencies = [
          {
            name = "memoffset";
            packageId = "memoffset 0.9.1";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "winsock2" "ws2def" "minwinbase" "ntdef" "processthreadsapi" "handleapi" "ws2tcpip" "winbase" ];
          }
        ];

      };
      "unic-char-property" = rec {
        crateName = "unic-char-property";
        version = "0.9.0";
        edition = "2018";
        sha256 = "08g21dn3wwix3ycfl0vrbahn0835nv2q3swm8wms0vwvgm07mid8";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-char-range";
            packageId = "unic-char-range";
          }
        ];

      };
      "unic-char-range" = rec {
        crateName = "unic-char-range";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1g0z7iwvjhqspi6194zsff8vy6i3921hpqcrp3v1813hbwnh5603";
        authors = [
          "The UNIC Project Developers"
        ];
        features = {
          "rayon" = [ "dep:rayon" ];
          "unstable" = [ "exact-size-is-empty" "fused" "trusted-len" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unic-common" = rec {
        crateName = "unic-common";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1g1mm954m0zr497dl4kx3vr09yaly290zs33bbl4wrbaba1gzmw0";
        authors = [
          "The UNIC Project Developers"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unic-segment" = rec {
        crateName = "unic-segment";
        version = "0.9.0";
        edition = "2018";
        sha256 = "08wgz2q6vrdvmbd23kf9pbg8cyzm5q8hq9spc4blzy2ppqk5vvg4";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-ucd-segment";
            packageId = "unic-ucd-segment";
          }
        ];

      };
      "unic-ucd-segment" = rec {
        crateName = "unic-ucd-segment";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0027lczcg0r401g6fnzm2bq9fxhgxvri1nlryhhv8192lqic2y90";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-char-property";
            packageId = "unic-char-property";
          }
          {
            name = "unic-char-range";
            packageId = "unic-char-range";
          }
          {
            name = "unic-ucd-version";
            packageId = "unic-ucd-version";
          }
        ];

      };
      "unic-ucd-version" = rec {
        crateName = "unic-ucd-version";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1i5hnzpfnxkp4ijfk8kvhpvj84bij575ybqx1b6hyigy6wi2zgcn";
        authors = [
          "The UNIC Project Developers"
        ];
        dependencies = [
          {
            name = "unic-common";
            packageId = "unic-common";
          }
        ];

      };
      "unicode-ident" = rec {
        crateName = "unicode-ident";
        version = "1.0.12";
        edition = "2018";
        sha256 = "0jzf1znfpb2gx8nr8mvmyqs1crnv79l57nxnbiszc7xf7ynbjm1k";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.11.0";
        edition = "2018";
        sha256 = "00kjpwp1g8fqm45drmwivlacn3y9jx73bvs09n6s3x73nqi7vj6l";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
      };
      "unicode-width" = rec {
        crateName = "unicode-width";
        version = "0.1.12";
        edition = "2021";
        sha256 = "1mk6mybsmi5py8hf8zy9vbgs4rw4gkdqdq3gzywd9kwf2prybxb8";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "std" "core" "compiler_builtins" ];
          "std" = [ "dep:std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-xid" = rec {
        crateName = "unicode-xid";
        version = "0.2.4";
        edition = "2015";
        sha256 = "131dfzf7d8fsr1ivch34x42c2d1ik5ig3g78brxncnn0r1sdyqpr";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "utf8parse" = rec {
        crateName = "utf8parse";
        version = "0.2.1";
        edition = "2018";
        sha256 = "02ip1a0az0qmc2786vxk2nqwsgcwf17d3a38fkf0q7hrmwh9c6vi";
        authors = [
          "Joe Wilm <joe@jwilm.com>"
          "Christian Duerr <contact@christianduerr.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "uuid" = rec {
        crateName = "uuid";
        version = "1.8.0";
        edition = "2018";
        sha256 = "1h7wks153j08xmdk06wnza3is8pn6j37hihd3kfv95xsxrzwz0x1";
        authors = [
          "Ashley Mannix<ashleymannix@live.com.au>"
          "Christopher Armstrong"
          "Dylan DPC<dylan.dpc@gmail.com>"
          "Hunar Roop Kahlon<hunar.roop@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "atomic" = [ "dep:atomic" ];
          "borsh" = [ "dep:borsh" "dep:borsh-derive" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "std" ];
          "fast-rng" = [ "rng" "dep:rand" ];
          "js" = [ "dep:wasm-bindgen" "getrandom?/js" ];
          "macro-diagnostics" = [ "dep:uuid-macro-internal" ];
          "md5" = [ "dep:md-5" ];
          "rng" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "sha1" = [ "dep:sha1_smol" ];
          "slog" = [ "dep:slog" ];
          "v1" = [ "atomic" ];
          "v3" = [ "md5" ];
          "v4" = [ "rng" ];
          "v5" = [ "sha1" ];
          "v6" = [ "atomic" ];
          "v7" = [ "atomic" "rng" ];
          "zerocopy" = [ "dep:zerocopy" ];
        };
        resolvedDefaultFeatures = [ "default" "rng" "serde" "std" "v4" ];
      };
      "valuable" = rec {
        crateName = "valuable";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0v9gp3nkjbl30z0fd56d8mx7w1csk86wwjhfjhr400wh9mfpw2w3";
        features = {
          "default" = [ "std" ];
          "derive" = [ "valuable-derive" ];
          "std" = [ "alloc" ];
          "valuable-derive" = [ "dep:valuable-derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "vec_map" = rec {
        crateName = "vec_map";
        version = "0.8.2";
        edition = "2015";
        sha256 = "1481w9g1dw9rxp3l6snkdqihzyrd2f8vispzqmwjwsdyhw8xzggi";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Jorge Aparicio <japaricious@gmail.com>"
          "Alexis Beingessner <a.beingessner@gmail.com>"
          "Brian Anderson <>"
          "tbu- <>"
          "Manish Goregaokar <>"
          "Aaron Turon <aturon@mozilla.com>"
          "Adolfo Ochagavía <>"
          "Niko Matsakis <>"
          "Steven Fackler <>"
          "Chase Southwood <csouth3@illinois.edu>"
          "Eduard Burtescu <>"
          "Florian Wilkens <>"
          "Félix Raimundo <>"
          "Tibor Benke <>"
          "Markus Siemens <markus@m-siemens.de>"
          "Josh Branchaud <jbranchaud@gmail.com>"
          "Huon Wilson <dbau.pp@gmail.com>"
          "Corey Farwell <coref@rwell.org>"
          "Aaron Liblong <>"
          "Nick Cameron <nrc@ncameron.org>"
          "Patrick Walton <pcwalton@mimiga.net>"
          "Felix S Klock II <>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
          "Sean McArthur <sean.monstar@gmail.com>"
          "Vadim Petrochenkov <>"
        ];
        features = {
          "eders" = [ "serde" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.9.4";
        edition = "2015";
        sha256 = "0gs8grwdlgh0xq660d7wr80x14vxbizmd8dbp29p2pdncx8lp1s9";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];

      };
      "waker-fn" = rec {
        crateName = "waker-fn";
        version = "1.1.1";
        edition = "2018";
        sha256 = "142n74wlmpwcazfb5v7vhnzj3lb3r97qy8mzpjdpg345aizm3i7k";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];

      };
      "walkdir" = rec {
        crateName = "walkdir";
        version = "2.5.0";
        edition = "2018";
        sha256 = "0jsy7a710qv8gld5957ybrnc07gavppp963gs32xk4ag8130jy99";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "same-file";
            packageId = "same-file";
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "wasi" = rec {
        crateName = "wasi";
        version = "0.11.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "08z4hxwkpdpalxjps1ai9y7ihin26y9f476i53dv98v45gkqg3cw";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasm-bindgen" = rec {
        crateName = "wasm-bindgen";
        version = "0.2.92";
        edition = "2018";
        sha256 = "1a4mcw13nsk3fr8fxjzf9kk1wj88xkfsmnm0pjraw01ryqfm7qjb";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "wasm-bindgen-macro";
            packageId = "wasm-bindgen-macro";
          }
        ];
        features = {
          "default" = [ "spans" "std" ];
          "enable-interning" = [ "std" ];
          "gg-alloc" = [ "wasm-bindgen-test/gg-alloc" ];
          "serde" = [ "dep:serde" ];
          "serde-serialize" = [ "serde" "serde_json" "std" ];
          "serde_json" = [ "dep:serde_json" ];
          "spans" = [ "wasm-bindgen-macro/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro/strict-macro" ];
          "xxx_debug_only_print_generated_code" = [ "wasm-bindgen-macro/xxx_debug_only_print_generated_code" ];
        };
        resolvedDefaultFeatures = [ "default" "spans" "std" ];
      };
      "wasm-bindgen-backend" = rec {
        crateName = "wasm-bindgen-backend";
        version = "0.2.92";
        edition = "2018";
        sha256 = "1nj7wxbi49f0rw9d44rjzms26xlw6r76b2mrggx8jfbdjrxphkb1";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "bumpalo";
            packageId = "bumpalo";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
            features = [ "full" ];
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-futures" = rec {
        crateName = "wasm-bindgen-futures";
        version = "0.4.42";
        edition = "2018";
        sha256 = "1h322zjvpjllcpj7dahfxjsv6inkr6y0baw7nkdwivr1c4v19g3n";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: (builtins.elem "atomics" targetFeatures);
            features = [ "MessageEvent" "Worker" ];
          }
        ];
        features = {
          "futures-core" = [ "dep:futures-core" ];
          "futures-core-03-stream" = [ "futures-core" ];
        };
      };
      "wasm-bindgen-macro" = rec {
        crateName = "wasm-bindgen-macro";
        version = "0.2.92";
        edition = "2018";
        sha256 = "09npa1srjjabd6nfph5yc03jb26sycjlxhy0c2a1pdrpx4yq5y51";
        procMacro = true;
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "wasm-bindgen-macro-support";
            packageId = "wasm-bindgen-macro-support";
          }
        ];
        features = {
          "spans" = [ "wasm-bindgen-macro-support/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro-support/strict-macro" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-macro-support" = rec {
        crateName = "wasm-bindgen-macro-support";
        version = "0.2.92";
        edition = "2018";
        sha256 = "1dqv2xs8zcyw4kjgzj84bknp2h76phmsb3n7j6hn396h4ssifkz9";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
            features = [ "visit" "full" ];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
          "spans" = [ "wasm-bindgen-backend/spans" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-shared" = rec {
        crateName = "wasm-bindgen-shared";
        version = "0.2.92";
        edition = "2018";
        links = "wasm_bindgen";
        sha256 = "15kyavsrna2cvy30kg03va257fraf9x00ny554vxngvpyaa0q6dg";
        authors = [
          "The wasm-bindgen Developers"
        ];

      };
      "wayland-backend" = rec {
        crateName = "wayland-backend";
        version = "0.3.3";
        edition = "2021";
        sha256 = "0h4s8nfrl1q8xys1409lfwkb70cdh81c0pvzr1s69mwhrrhzll4x";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "downcast-rs";
            packageId = "downcast-rs";
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.34";
            features = [ "event" "fs" "net" "process" ];
          }
          {
            name = "scoped-tls";
            packageId = "scoped-tls";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = [ "union" "const_generics" "const_new" ];
          }
          {
            name = "wayland-sys";
            packageId = "wayland-sys";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "client_system" = [ "wayland-sys/client" ];
          "dlopen" = [ "wayland-sys/dlopen" ];
          "log" = [ "dep:log" ];
          "raw-window-handle" = [ "dep:raw-window-handle" ];
          "server_system" = [ "wayland-sys/server" ];
        };
        resolvedDefaultFeatures = [ "client_system" ];
      };
      "wayland-client" = rec {
        crateName = "wayland-client";
        version = "0.31.2";
        edition = "2021";
        sha256 = "07rzml07li3bi4nnqx4i2rfj3xkifzxp1d6cd1kflb2wjgp9dyw2";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.34";
            features = [ "event" ];
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
        ];
        features = {
          "log" = [ "dep:log" ];
        };
      };
      "wayland-csd-frame" = rec {
        crateName = "wayland-csd-frame";
        version = "0.3.0";
        edition = "2021";
        sha256 = "0zjcmcqprfzx57hlm741n89ssp4sha5yh5cnmbk2agflvclm0p32";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "cursor-icon";
            packageId = "cursor-icon";
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
            usesDefaultFeatures = false;
          }
        ];

      };
      "wayland-cursor" = rec {
        crateName = "wayland-cursor";
        version = "0.31.1";
        edition = "2021";
        sha256 = "1fii68l6x235b867q96yx1xqkl16azkf5i841ldd24yxd2l5zkki";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "rustix";
            packageId = "rustix 0.38.34";
            features = [ "shm" ];
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
          }
          {
            name = "xcursor";
            packageId = "xcursor";
          }
        ];

      };
      "wayland-protocols" = rec {
        crateName = "wayland-protocols";
        version = "0.31.2";
        edition = "2021";
        sha256 = "1x310l1p6p3p3l76nl1l2yava9408dy77s605917zadlp1jz70cg";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            optional = true;
          }
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
        ];
        features = {
          "client" = [ "wayland-client" ];
          "server" = [ "wayland-server" ];
          "wayland-client" = [ "dep:wayland-client" ];
          "wayland-server" = [ "dep:wayland-server" ];
        };
        resolvedDefaultFeatures = [ "client" "staging" "unstable" "wayland-client" ];
      };
      "wayland-protocols-plasma" = rec {
        crateName = "wayland-protocols-plasma";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0yglbxd4ka8284k0j0ssh9hf6wd9qp2n0s2qrsdymyaz258kb013";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            optional = true;
          }
          {
            name = "wayland-protocols";
            packageId = "wayland-protocols";
          }
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
        ];
        features = {
          "client" = [ "wayland-client" "wayland-protocols/client" ];
          "server" = [ "wayland-server" "wayland-protocols/server" ];
          "wayland-client" = [ "dep:wayland-client" ];
          "wayland-server" = [ "dep:wayland-server" ];
        };
        resolvedDefaultFeatures = [ "client" "wayland-client" ];
      };
      "wayland-protocols-wlr" = rec {
        crateName = "wayland-protocols-wlr";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1mjww9psk2nc5hm2q4s3qas30rbzfg1sb6qgw518fbbcdfvn27xd";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            optional = true;
          }
          {
            name = "wayland-protocols";
            packageId = "wayland-protocols";
          }
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
        ];
        features = {
          "client" = [ "wayland-client" "wayland-protocols/client" ];
          "server" = [ "wayland-server" "wayland-protocols/server" ];
          "wayland-client" = [ "dep:wayland-client" ];
          "wayland-server" = [ "dep:wayland-server" ];
        };
        resolvedDefaultFeatures = [ "client" "wayland-client" ];
      };
      "wayland-scanner" = rec {
        crateName = "wayland-scanner";
        version = "0.31.1";
        edition = "2021";
        sha256 = "10y2nq076x4zml8wc5bw75560rwvrsfpi35mdyc02w1854lsdcv3";
        procMacro = true;
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quick-xml";
            packageId = "quick-xml";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];

      };
      "wayland-sys" = rec {
        crateName = "wayland-sys";
        version = "0.31.1";
        edition = "2018";
        sha256 = "1bxpwamgagpxa8p9m798gd3g6rwj2m4sbdvc49zx05jjzzmci80m";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "dlib";
            packageId = "dlib";
          }
          {
            name = "log";
            packageId = "log";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "cursor" = [ "client" ];
          "dlopen" = [ "once_cell" ];
          "egl" = [ "client" ];
          "libc" = [ "dep:libc" ];
          "memoffset" = [ "dep:memoffset" ];
          "once_cell" = [ "dep:once_cell" ];
          "server" = [ "libc" "memoffset" ];
        };
        resolvedDefaultFeatures = [ "client" ];
      };
      "web-sys" = rec {
        crateName = "web-sys";
        version = "0.3.69";
        edition = "2018";
        sha256 = "1vqkxk935xa8zcnsi4bd88sb267ly2i24xl1yiq26d1n32hskbvp";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        features = {
          "AbortSignal" = [ "EventTarget" ];
          "AnalyserNode" = [ "AudioNode" "EventTarget" ];
          "Animation" = [ "EventTarget" ];
          "AnimationEvent" = [ "Event" ];
          "AnimationPlaybackEvent" = [ "Event" ];
          "Attr" = [ "EventTarget" "Node" ];
          "AudioBufferSourceNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "AudioContext" = [ "BaseAudioContext" "EventTarget" ];
          "AudioDestinationNode" = [ "AudioNode" "EventTarget" ];
          "AudioNode" = [ "EventTarget" ];
          "AudioProcessingEvent" = [ "Event" ];
          "AudioScheduledSourceNode" = [ "AudioNode" "EventTarget" ];
          "AudioStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "AudioTrackList" = [ "EventTarget" ];
          "AudioWorklet" = [ "Worklet" ];
          "AudioWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "AudioWorkletNode" = [ "AudioNode" "EventTarget" ];
          "AuthenticatorAssertionResponse" = [ "AuthenticatorResponse" ];
          "AuthenticatorAttestationResponse" = [ "AuthenticatorResponse" ];
          "BaseAudioContext" = [ "EventTarget" ];
          "BatteryManager" = [ "EventTarget" ];
          "BeforeUnloadEvent" = [ "Event" ];
          "BiquadFilterNode" = [ "AudioNode" "EventTarget" ];
          "BlobEvent" = [ "Event" ];
          "Bluetooth" = [ "EventTarget" ];
          "BluetoothAdvertisingEvent" = [ "Event" ];
          "BluetoothDevice" = [ "EventTarget" ];
          "BluetoothPermissionResult" = [ "EventTarget" "PermissionStatus" ];
          "BluetoothRemoteGattCharacteristic" = [ "EventTarget" ];
          "BluetoothRemoteGattService" = [ "EventTarget" ];
          "BroadcastChannel" = [ "EventTarget" ];
          "CanvasCaptureMediaStream" = [ "EventTarget" "MediaStream" ];
          "CanvasCaptureMediaStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "CdataSection" = [ "CharacterData" "EventTarget" "Node" "Text" ];
          "ChannelMergerNode" = [ "AudioNode" "EventTarget" ];
          "ChannelSplitterNode" = [ "AudioNode" "EventTarget" ];
          "CharacterData" = [ "EventTarget" "Node" ];
          "ChromeWorker" = [ "EventTarget" "Worker" ];
          "Clipboard" = [ "EventTarget" ];
          "ClipboardEvent" = [ "Event" ];
          "CloseEvent" = [ "Event" ];
          "Comment" = [ "CharacterData" "EventTarget" "Node" ];
          "CompositionEvent" = [ "Event" "UiEvent" ];
          "ConstantSourceNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "ConvolverNode" = [ "AudioNode" "EventTarget" ];
          "CssAnimation" = [ "Animation" "EventTarget" ];
          "CssConditionRule" = [ "CssGroupingRule" "CssRule" ];
          "CssCounterStyleRule" = [ "CssRule" ];
          "CssFontFaceRule" = [ "CssRule" ];
          "CssFontFeatureValuesRule" = [ "CssRule" ];
          "CssGroupingRule" = [ "CssRule" ];
          "CssImportRule" = [ "CssRule" ];
          "CssKeyframeRule" = [ "CssRule" ];
          "CssKeyframesRule" = [ "CssRule" ];
          "CssMediaRule" = [ "CssConditionRule" "CssGroupingRule" "CssRule" ];
          "CssNamespaceRule" = [ "CssRule" ];
          "CssPageRule" = [ "CssRule" ];
          "CssStyleRule" = [ "CssRule" ];
          "CssStyleSheet" = [ "StyleSheet" ];
          "CssSupportsRule" = [ "CssConditionRule" "CssGroupingRule" "CssRule" ];
          "CssTransition" = [ "Animation" "EventTarget" ];
          "CustomEvent" = [ "Event" ];
          "DedicatedWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "DelayNode" = [ "AudioNode" "EventTarget" ];
          "DeviceLightEvent" = [ "Event" ];
          "DeviceMotionEvent" = [ "Event" ];
          "DeviceOrientationEvent" = [ "Event" ];
          "DeviceProximityEvent" = [ "Event" ];
          "Document" = [ "EventTarget" "Node" ];
          "DocumentFragment" = [ "EventTarget" "Node" ];
          "DocumentTimeline" = [ "AnimationTimeline" ];
          "DocumentType" = [ "EventTarget" "Node" ];
          "DomMatrix" = [ "DomMatrixReadOnly" ];
          "DomPoint" = [ "DomPointReadOnly" ];
          "DomRect" = [ "DomRectReadOnly" ];
          "DomRequest" = [ "EventTarget" ];
          "DragEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "DynamicsCompressorNode" = [ "AudioNode" "EventTarget" ];
          "Element" = [ "EventTarget" "Node" ];
          "ErrorEvent" = [ "Event" ];
          "EventSource" = [ "EventTarget" ];
          "ExtendableEvent" = [ "Event" ];
          "ExtendableMessageEvent" = [ "Event" "ExtendableEvent" ];
          "FetchEvent" = [ "Event" "ExtendableEvent" ];
          "FetchObserver" = [ "EventTarget" ];
          "File" = [ "Blob" ];
          "FileReader" = [ "EventTarget" ];
          "FileSystemDirectoryEntry" = [ "FileSystemEntry" ];
          "FileSystemDirectoryHandle" = [ "FileSystemHandle" ];
          "FileSystemFileEntry" = [ "FileSystemEntry" ];
          "FileSystemFileHandle" = [ "FileSystemHandle" ];
          "FileSystemWritableFileStream" = [ "WritableStream" ];
          "FocusEvent" = [ "Event" "UiEvent" ];
          "FontFaceSet" = [ "EventTarget" ];
          "FontFaceSetLoadEvent" = [ "Event" ];
          "GainNode" = [ "AudioNode" "EventTarget" ];
          "GamepadAxisMoveEvent" = [ "Event" "GamepadEvent" ];
          "GamepadButtonEvent" = [ "Event" "GamepadEvent" ];
          "GamepadEvent" = [ "Event" ];
          "GpuDevice" = [ "EventTarget" ];
          "GpuInternalError" = [ "GpuError" ];
          "GpuOutOfMemoryError" = [ "GpuError" ];
          "GpuPipelineError" = [ "DomException" ];
          "GpuUncapturedErrorEvent" = [ "Event" ];
          "GpuValidationError" = [ "GpuError" ];
          "HashChangeEvent" = [ "Event" ];
          "Hid" = [ "EventTarget" ];
          "HidConnectionEvent" = [ "Event" ];
          "HidDevice" = [ "EventTarget" ];
          "HidInputReportEvent" = [ "Event" ];
          "HtmlAnchorElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlAreaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlAudioElement" = [ "Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node" ];
          "HtmlBaseElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlBodyElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlBrElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlButtonElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlCanvasElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDataElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDataListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDetailsElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDialogElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDirectoryElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDivElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDocument" = [ "Document" "EventTarget" "Node" ];
          "HtmlElement" = [ "Element" "EventTarget" "Node" ];
          "HtmlEmbedElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFieldSetElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFontElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFormControlsCollection" = [ "HtmlCollection" ];
          "HtmlFormElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFrameElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFrameSetElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHeadElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHeadingElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHrElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHtmlElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlIFrameElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlImageElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlInputElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLabelElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLegendElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLiElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLinkElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMapElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMediaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMenuElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMenuItemElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMetaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMeterElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlModElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlObjectElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptGroupElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptionsCollection" = [ "HtmlCollection" ];
          "HtmlOutputElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlParagraphElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlParamElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlPictureElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlPreElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlProgressElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlQuoteElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlScriptElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSelectElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSlotElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSourceElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSpanElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlStyleElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableCaptionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableCellElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableColElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableRowElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableSectionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTemplateElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTextAreaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTimeElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTitleElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTrackElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlUListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlUnknownElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlVideoElement" = [ "Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node" ];
          "IdbCursorWithValue" = [ "IdbCursor" ];
          "IdbDatabase" = [ "EventTarget" ];
          "IdbFileHandle" = [ "EventTarget" ];
          "IdbFileRequest" = [ "DomRequest" "EventTarget" ];
          "IdbLocaleAwareKeyRange" = [ "IdbKeyRange" ];
          "IdbMutableFile" = [ "EventTarget" ];
          "IdbOpenDbRequest" = [ "EventTarget" "IdbRequest" ];
          "IdbRequest" = [ "EventTarget" ];
          "IdbTransaction" = [ "EventTarget" ];
          "IdbVersionChangeEvent" = [ "Event" ];
          "IirFilterNode" = [ "AudioNode" "EventTarget" ];
          "ImageCaptureErrorEvent" = [ "Event" ];
          "ImageTrack" = [ "EventTarget" ];
          "InputEvent" = [ "Event" "UiEvent" ];
          "KeyboardEvent" = [ "Event" "UiEvent" ];
          "KeyframeEffect" = [ "AnimationEffect" ];
          "LocalMediaStream" = [ "EventTarget" "MediaStream" ];
          "MediaDevices" = [ "EventTarget" ];
          "MediaElementAudioSourceNode" = [ "AudioNode" "EventTarget" ];
          "MediaEncryptedEvent" = [ "Event" ];
          "MediaKeyError" = [ "Event" ];
          "MediaKeyMessageEvent" = [ "Event" ];
          "MediaKeySession" = [ "EventTarget" ];
          "MediaQueryList" = [ "EventTarget" ];
          "MediaQueryListEvent" = [ "Event" ];
          "MediaRecorder" = [ "EventTarget" ];
          "MediaRecorderErrorEvent" = [ "Event" ];
          "MediaSource" = [ "EventTarget" ];
          "MediaStream" = [ "EventTarget" ];
          "MediaStreamAudioDestinationNode" = [ "AudioNode" "EventTarget" ];
          "MediaStreamAudioSourceNode" = [ "AudioNode" "EventTarget" ];
          "MediaStreamEvent" = [ "Event" ];
          "MediaStreamTrack" = [ "EventTarget" ];
          "MediaStreamTrackEvent" = [ "Event" ];
          "MediaStreamTrackGenerator" = [ "EventTarget" "MediaStreamTrack" ];
          "MessageEvent" = [ "Event" ];
          "MessagePort" = [ "EventTarget" ];
          "MidiAccess" = [ "EventTarget" ];
          "MidiConnectionEvent" = [ "Event" ];
          "MidiInput" = [ "EventTarget" "MidiPort" ];
          "MidiMessageEvent" = [ "Event" ];
          "MidiOutput" = [ "EventTarget" "MidiPort" ];
          "MidiPort" = [ "EventTarget" ];
          "MouseEvent" = [ "Event" "UiEvent" ];
          "MouseScrollEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "MutationEvent" = [ "Event" ];
          "NetworkInformation" = [ "EventTarget" ];
          "Node" = [ "EventTarget" ];
          "Notification" = [ "EventTarget" ];
          "NotificationEvent" = [ "Event" "ExtendableEvent" ];
          "OfflineAudioCompletionEvent" = [ "Event" ];
          "OfflineAudioContext" = [ "BaseAudioContext" "EventTarget" ];
          "OfflineResourceList" = [ "EventTarget" ];
          "OffscreenCanvas" = [ "EventTarget" ];
          "OscillatorNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "PageTransitionEvent" = [ "Event" ];
          "PaintWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "PannerNode" = [ "AudioNode" "EventTarget" ];
          "PaymentMethodChangeEvent" = [ "Event" "PaymentRequestUpdateEvent" ];
          "PaymentRequestUpdateEvent" = [ "Event" ];
          "Performance" = [ "EventTarget" ];
          "PerformanceMark" = [ "PerformanceEntry" ];
          "PerformanceMeasure" = [ "PerformanceEntry" ];
          "PerformanceNavigationTiming" = [ "PerformanceEntry" "PerformanceResourceTiming" ];
          "PerformanceResourceTiming" = [ "PerformanceEntry" ];
          "PermissionStatus" = [ "EventTarget" ];
          "PointerEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "PopStateEvent" = [ "Event" ];
          "PopupBlockedEvent" = [ "Event" ];
          "PresentationAvailability" = [ "EventTarget" ];
          "PresentationConnection" = [ "EventTarget" ];
          "PresentationConnectionAvailableEvent" = [ "Event" ];
          "PresentationConnectionCloseEvent" = [ "Event" ];
          "PresentationConnectionList" = [ "EventTarget" ];
          "PresentationRequest" = [ "EventTarget" ];
          "ProcessingInstruction" = [ "CharacterData" "EventTarget" "Node" ];
          "ProgressEvent" = [ "Event" ];
          "PromiseRejectionEvent" = [ "Event" ];
          "PublicKeyCredential" = [ "Credential" ];
          "PushEvent" = [ "Event" "ExtendableEvent" ];
          "RadioNodeList" = [ "NodeList" ];
          "RtcDataChannel" = [ "EventTarget" ];
          "RtcDataChannelEvent" = [ "Event" ];
          "RtcPeerConnection" = [ "EventTarget" ];
          "RtcPeerConnectionIceErrorEvent" = [ "Event" ];
          "RtcPeerConnectionIceEvent" = [ "Event" ];
          "RtcTrackEvent" = [ "Event" ];
          "RtcdtmfSender" = [ "EventTarget" ];
          "RtcdtmfToneChangeEvent" = [ "Event" ];
          "Screen" = [ "EventTarget" ];
          "ScreenOrientation" = [ "EventTarget" ];
          "ScriptProcessorNode" = [ "AudioNode" "EventTarget" ];
          "ScrollAreaEvent" = [ "Event" "UiEvent" ];
          "SecurityPolicyViolationEvent" = [ "Event" ];
          "Serial" = [ "EventTarget" ];
          "SerialPort" = [ "EventTarget" ];
          "ServiceWorker" = [ "EventTarget" ];
          "ServiceWorkerContainer" = [ "EventTarget" ];
          "ServiceWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "ServiceWorkerRegistration" = [ "EventTarget" ];
          "ShadowRoot" = [ "DocumentFragment" "EventTarget" "Node" ];
          "SharedWorker" = [ "EventTarget" ];
          "SharedWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "SourceBuffer" = [ "EventTarget" ];
          "SourceBufferList" = [ "EventTarget" ];
          "SpeechRecognition" = [ "EventTarget" ];
          "SpeechRecognitionError" = [ "Event" ];
          "SpeechRecognitionEvent" = [ "Event" ];
          "SpeechSynthesis" = [ "EventTarget" ];
          "SpeechSynthesisErrorEvent" = [ "Event" "SpeechSynthesisEvent" ];
          "SpeechSynthesisEvent" = [ "Event" ];
          "SpeechSynthesisUtterance" = [ "EventTarget" ];
          "StereoPannerNode" = [ "AudioNode" "EventTarget" ];
          "StorageEvent" = [ "Event" ];
          "SubmitEvent" = [ "Event" ];
          "SvgAnimateElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimateMotionElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimateTransformElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimationElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgCircleElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgClipPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgComponentTransferFunctionElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgDefsElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgDescElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgElement" = [ "Element" "EventTarget" "Node" ];
          "SvgEllipseElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgFilterElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgForeignObjectElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgGeometryElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgGraphicsElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgImageElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgLineElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgLinearGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement" ];
          "SvgMarkerElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgMaskElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgMetadataElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgPathSegArcAbs" = [ "SvgPathSeg" ];
          "SvgPathSegArcRel" = [ "SvgPathSeg" ];
          "SvgPathSegClosePath" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalRel" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoRel" = [ "SvgPathSeg" ];
          "SvgPatternElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgPolygonElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgPolylineElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgRadialGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement" ];
          "SvgRectElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgScriptElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgSetElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgStopElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgStyleElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgSwitchElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgSymbolElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgTextContentElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgTextElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement" ];
          "SvgTextPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" ];
          "SvgTextPositioningElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" ];
          "SvgTitleElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgUseElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgViewElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgaElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgfeBlendElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeColorMatrixElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeComponentTransferElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeCompositeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeConvolveMatrixElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDiffuseLightingElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDisplacementMapElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDistantLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDropShadowElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeFloodElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeFuncAElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncBElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncGElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncRElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeGaussianBlurElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeImageElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMergeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMergeNodeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMorphologyElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeOffsetElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfePointLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeSpecularLightingElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeSpotLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeTileElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeTurbulenceElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvggElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgmPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgsvgElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgtSpanElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement" ];
          "TaskController" = [ "AbortController" ];
          "TaskPriorityChangeEvent" = [ "Event" ];
          "TaskSignal" = [ "AbortSignal" "EventTarget" ];
          "TcpServerSocket" = [ "EventTarget" ];
          "TcpServerSocketEvent" = [ "Event" ];
          "TcpSocket" = [ "EventTarget" ];
          "TcpSocketErrorEvent" = [ "Event" ];
          "TcpSocketEvent" = [ "Event" ];
          "Text" = [ "CharacterData" "EventTarget" "Node" ];
          "TextTrack" = [ "EventTarget" ];
          "TextTrackCue" = [ "EventTarget" ];
          "TextTrackList" = [ "EventTarget" ];
          "TimeEvent" = [ "Event" ];
          "TouchEvent" = [ "Event" "UiEvent" ];
          "TrackEvent" = [ "Event" ];
          "TransitionEvent" = [ "Event" ];
          "UiEvent" = [ "Event" ];
          "Usb" = [ "EventTarget" ];
          "UsbConnectionEvent" = [ "Event" ];
          "UsbPermissionResult" = [ "EventTarget" "PermissionStatus" ];
          "UserProximityEvent" = [ "Event" ];
          "ValueEvent" = [ "Event" ];
          "VideoStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "VideoTrackList" = [ "EventTarget" ];
          "VrDisplay" = [ "EventTarget" ];
          "VttCue" = [ "EventTarget" "TextTrackCue" ];
          "WakeLockSentinel" = [ "EventTarget" ];
          "WaveShaperNode" = [ "AudioNode" "EventTarget" ];
          "WebGlContextEvent" = [ "Event" ];
          "WebKitCssMatrix" = [ "DomMatrix" "DomMatrixReadOnly" ];
          "WebSocket" = [ "EventTarget" ];
          "WebTransportError" = [ "DomException" ];
          "WebTransportReceiveStream" = [ "ReadableStream" ];
          "WebTransportSendStream" = [ "WritableStream" ];
          "WheelEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "Window" = [ "EventTarget" ];
          "WindowClient" = [ "Client" ];
          "Worker" = [ "EventTarget" ];
          "WorkerDebuggerGlobalScope" = [ "EventTarget" ];
          "WorkerGlobalScope" = [ "EventTarget" ];
          "XmlDocument" = [ "Document" "EventTarget" "Node" ];
          "XmlHttpRequest" = [ "EventTarget" "XmlHttpRequestEventTarget" ];
          "XmlHttpRequestEventTarget" = [ "EventTarget" ];
          "XmlHttpRequestUpload" = [ "EventTarget" "XmlHttpRequestEventTarget" ];
          "XrBoundedReferenceSpace" = [ "EventTarget" "XrReferenceSpace" "XrSpace" ];
          "XrInputSourceEvent" = [ "Event" ];
          "XrInputSourcesChangeEvent" = [ "Event" ];
          "XrJointPose" = [ "XrPose" ];
          "XrJointSpace" = [ "EventTarget" "XrSpace" ];
          "XrLayer" = [ "EventTarget" ];
          "XrPermissionStatus" = [ "EventTarget" "PermissionStatus" ];
          "XrReferenceSpace" = [ "EventTarget" "XrSpace" ];
          "XrReferenceSpaceEvent" = [ "Event" ];
          "XrSession" = [ "EventTarget" ];
          "XrSessionEvent" = [ "Event" ];
          "XrSpace" = [ "EventTarget" ];
          "XrSystem" = [ "EventTarget" ];
          "XrViewerPose" = [ "XrPose" ];
          "XrWebGlLayer" = [ "EventTarget" "XrLayer" ];
        };
        resolvedDefaultFeatures = [ "AbortController" "AbortSignal" "AngleInstancedArrays" "AudioBuffer" "AudioBufferSourceNode" "AudioContext" "AudioContextOptions" "AudioContextState" "AudioDestinationNode" "AudioNode" "AudioScheduledSourceNode" "BaseAudioContext" "Blob" "CssStyleDeclaration" "Document" "DomException" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "ExtBlendMinmax" "ExtColorBufferFloat" "ExtColorBufferHalfFloat" "ExtDisjointTimerQuery" "ExtFragDepth" "ExtSRgb" "ExtShaderTextureLod" "ExtTextureFilterAnisotropic" "FocusEvent" "Gamepad" "GamepadButton" "GamepadMappingType" "HtmlCanvasElement" "HtmlElement" "HtmlImageElement" "HtmlMediaElement" "HtmlVideoElement" "ImageBitmap" "ImageBitmapRenderingContext" "IntersectionObserver" "IntersectionObserverEntry" "KeyboardEvent" "MediaQueryList" "MessageChannel" "MessageEvent" "MessagePort" "MouseEvent" "Navigator" "Node" "NodeList" "OesElementIndexUint" "OesStandardDerivatives" "OesTextureFloat" "OesTextureFloatLinear" "OesTextureHalfFloat" "OesTextureHalfFloatLinear" "OesVertexArrayObject" "OffscreenCanvas" "OvrMultiview2" "PageTransitionEvent" "PointerEvent" "Request" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "Response" "UiEvent" "Url" "VideoFrame" "VisibilityState" "WebGl2RenderingContext" "WebGlActiveInfo" "WebGlBuffer" "WebGlFramebuffer" "WebGlProgram" "WebGlQuery" "WebGlRenderbuffer" "WebGlRenderingContext" "WebGlSampler" "WebGlShader" "WebGlSync" "WebGlTexture" "WebGlTransformFeedback" "WebGlUniformLocation" "WebGlVertexArrayObject" "WebglColorBufferFloat" "WebglCompressedTextureAstc" "WebglCompressedTextureEtc" "WebglCompressedTextureEtc1" "WebglCompressedTexturePvrtc" "WebglCompressedTextureS3tc" "WebglCompressedTextureS3tcSrgb" "WebglDebugRendererInfo" "WebglDebugShaders" "WebglDepthTexture" "WebglDrawBuffers" "WebglLoseContext" "WheelEvent" "Window" "Worker" "WorkerGlobalScope" "WorkerNavigator" "console" ];
      };
      "web-time" = rec {
        crateName = "web-time";
        version = "0.2.4";
        edition = "2021";
        sha256 = "1q6gk0nkwbfz30g1pz8g52mq00zjx7m5im36k3474aw73jdh8c5a";
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ((builtins.elem "wasm" target."family") && (!(("emscripten" == target."os" or null) || ("wasi" == target."os" or null))));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
            target = { target, features }: ((builtins.elem "wasm" target."family") && (!(("emscripten" == target."os" or null) || ("wasi" == target."os" or null))));
          }
        ];

      };
      "wgpu" = rec {
        crateName = "wgpu";
        version = "0.19.4";
        edition = "2021";
        sha256 = "009cfqxabinkwmk93wm08gj8nz7d4hl1m17imfxgxg1aplfk3myb";
        authors = [
          "gfx-rs developers"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "naga";
            packageId = "naga";
            optional = true;
            features = [ "clone" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "profiling";
            packageId = "profiling";
            usesDefaultFeatures = false;
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "Document" "Navigator" "Node" "NodeList" "HtmlCanvasElement" "OffscreenCanvas" "ImageBitmap" "ImageBitmapRenderingContext" "Window" "WorkerGlobalScope" "WorkerNavigator" "Event" "EventTarget" ];
          }
          {
            name = "wgpu-core";
            packageId = "wgpu-core";
            rename = "wgc";
            optional = true;
            features = [ "raw-window-handle" ];
          }
          {
            name = "wgpu-core";
            packageId = "wgpu-core";
            rename = "wgc";
            target = { target, features }: ((target."unix" or false) && (!("ios" == target."os" or null)) && (!("macos" == target."os" or null)));
            features = [ "gles" ];
          }
          {
            name = "wgpu-core";
            packageId = "wgpu-core";
            rename = "wgc";
            target = { target, features }: ((!("wasm32" == target."arch" or null)) || ("emscripten" == target."os" or null));
            features = [ "raw-window-handle" ];
          }
          {
            name = "wgpu-core";
            packageId = "wgpu-core";
            rename = "wgc";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "wgpu-core";
            packageId = "wgpu-core";
            rename = "wgc";
            target = { target, features }: ((target."windows" or false) || ((target."unix" or false) && (!("emscripten" == target."os" or null)) && (!("ios" == target."os" or null)) && (!("macos" == target."os" or null))));
            features = [ "vulkan" ];
          }
          {
            name = "wgpu-core";
            packageId = "wgpu-core";
            rename = "wgc";
            target = { target, features }: (target."windows" or false);
            features = [ "gles" ];
          }
          {
            name = "wgpu-hal";
            packageId = "wgpu-hal";
            rename = "hal";
            target = { target, features }: ((!("wasm32" == target."arch" or null)) && (target."unix" or false) && (!("ios" == target."os" or null)) && (!("macos" == target."os" or null)));
            features = [ "renderdoc" ];
          }
          {
            name = "wgpu-hal";
            packageId = "wgpu-hal";
            rename = "hal";
            target = { target, features }: ((!("wasm32" == target."arch" or null)) || ("emscripten" == target."os" or null));
          }
          {
            name = "wgpu-hal";
            packageId = "wgpu-hal";
            rename = "hal";
            optional = true;
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wgpu-hal";
            packageId = "wgpu-hal";
            rename = "hal";
            target = { target, features }: (target."windows" or false);
            features = [ "dxc_shader_compiler" "renderdoc" "windows_rs" ];
          }
          {
            name = "wgpu-types";
            packageId = "wgpu-types";
            rename = "wgt";
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        devDependencies = [
          {
            name = "naga";
            packageId = "naga";
            features = [ "wgsl-in" ];
          }
        ];
        features = {
          "angle" = [ "wgc?/gles" ];
          "api_log_info" = [ "wgc/api_log_info" ];
          "default" = [ "wgsl" "dx12" "metal" "webgpu" ];
          "dx12" = [ "wgc?/dx12" ];
          "fragile-send-sync-non-atomic-wasm" = [ "hal/fragile-send-sync-non-atomic-wasm" "wgc/fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm" ];
          "glsl" = [ "naga/glsl-in" ];
          "hal" = [ "dep:hal" ];
          "metal" = [ "wgc?/metal" ];
          "naga" = [ "dep:naga" ];
          "naga-ir" = [ "naga" ];
          "replay" = [ "serde" "wgc/replay" ];
          "serde" = [ "dep:serde" ];
          "spirv" = [ "naga/spv-in" ];
          "strict_asserts" = [ "wgc?/strict_asserts" "wgt/strict_asserts" ];
          "trace" = [ "serde" "wgc/trace" ];
          "vulkan-portability" = [ "wgc?/vulkan" ];
          "webgl" = [ "hal" "wgc/gles" ];
          "webgpu" = [ "naga?/wgsl-out" ];
          "wgc" = [ "dep:wgc" ];
          "wgsl" = [ "wgc?/wgsl" ];
        };
        resolvedDefaultFeatures = [ "dx12" "fragile-send-sync-non-atomic-wasm" "hal" "metal" "naga" "naga-ir" "serde" "spirv" "trace" "webgl" "webgpu" "wgc" "wgsl" ];
      };
      "wgpu-core" = rec {
        crateName = "wgpu-core";
        version = "0.19.4";
        edition = "2021";
        sha256 = "0fmzd5rjga26yh96qi57244sv6y25d7pc94yk9f9xflrzhjlbf98";
        authors = [
          "gfx-rs developers"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
          }
          {
            name = "bit-vec";
            packageId = "bit-vec";
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "codespan-reporting";
            packageId = "codespan-reporting";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "naga";
            packageId = "naga";
            features = [ "clone" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "profiling";
            packageId = "profiling";
            usesDefaultFeatures = false;
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
            optional = true;
          }
          {
            name = "ron";
            packageId = "ron";
            optional = true;
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "serde_derive" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null)));
            features = [ "HtmlCanvasElement" "OffscreenCanvas" ];
          }
          {
            name = "wgpu-hal";
            packageId = "wgpu-hal";
            rename = "hal";
            usesDefaultFeatures = false;
          }
          {
            name = "wgpu-types";
            packageId = "wgpu-types";
            rename = "wgt";
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        features = {
          "default" = [ "link" ];
          "dx12" = [ "hal/dx12" ];
          "fragile-send-sync-non-atomic-wasm" = [ "hal/fragile-send-sync-non-atomic-wasm" "wgt/fragile-send-sync-non-atomic-wasm" ];
          "gles" = [ "hal/gles" ];
          "link" = [ "hal/link" ];
          "metal" = [ "hal/metal" ];
          "raw-window-handle" = [ "dep:raw-window-handle" ];
          "renderdoc" = [ "hal/renderdoc" ];
          "replay" = [ "serde" "wgt/replay" "arrayvec/serde" "naga/deserialize" ];
          "ron" = [ "dep:ron" ];
          "serde" = [ "dep:serde" ];
          "serial-pass" = [ "serde" "wgt/serde" "arrayvec/serde" ];
          "strict_asserts" = [ "wgt/strict_asserts" ];
          "trace" = [ "ron" "serde" "wgt/trace" "arrayvec/serde" "naga/serialize" ];
          "vulkan" = [ "hal/vulkan" ];
          "wgsl" = [ "naga/wgsl-in" ];
        };
        resolvedDefaultFeatures = [ "default" "dx12" "fragile-send-sync-non-atomic-wasm" "gles" "link" "metal" "raw-window-handle" "ron" "serde" "trace" "vulkan" "wgsl" ];
      };
      "wgpu-hal" = rec {
        crateName = "wgpu-hal";
        version = "0.19.4";
        edition = "2021";
        sha256 = "1hrr9qjhyc0fjfwp4gsvm8qk5wzi6ijnsm6qlm0spxvd6qj4j6pw";
        authors = [
          "gfx-rs developers"
        ];
        dependencies = [
          {
            name = "android_system_properties";
            packageId = "android_system_properties";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
          }
          {
            name = "ash";
            packageId = "ash";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "bit-set";
            packageId = "bit-set";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "block";
            packageId = "block";
            optional = true;
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "core-graphics-types";
            packageId = "core-graphics-types";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "d3d12";
            packageId = "d3d12";
            optional = true;
            target = { target, features }: (target."windows" or false);
            features = [ "libloading" ];
          }
          {
            name = "glow";
            packageId = "glow";
            optional = true;
          }
          {
            name = "glutin_wgl_sys";
            packageId = "glutin_wgl_sys";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "gpu-alloc";
            packageId = "gpu-alloc";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "gpu-allocator";
            packageId = "gpu-allocator";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
            features = [ "d3d12" "public-winapi" ];
          }
          {
            name = "gpu-descriptor";
            packageId = "gpu-descriptor";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "hassle-rs";
            packageId = "hassle-rs";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null)));
          }
          {
            name = "khronos-egl";
            packageId = "khronos-egl";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "dynamic" ];
          }
          {
            name = "khronos-egl";
            packageId = "khronos-egl";
            target = { target, features }: ("emscripten" == target."os" or null);
            features = [ "static" "no-pkg-config" ];
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "libloading";
            packageId = "libloading 0.8.3";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "libloading";
            packageId = "libloading 0.8.3";
            optional = true;
            target = { target, features }: ("emscripten" == target."os" or null);
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "metal";
            packageId = "metal";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "naga";
            packageId = "naga";
            features = [ "clone" ];
          }
          {
            name = "ndk-sys";
            packageId = "ndk-sys";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "objc";
            packageId = "objc";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "profiling";
            packageId = "profiling";
            usesDefaultFeatures = false;
          }
          {
            name = "range-alloc";
            packageId = "range-alloc";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
          }
          {
            name = "renderdoc-sys";
            packageId = "renderdoc-sys";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "union" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null)));
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null)));
            features = [ "Window" "HtmlCanvasElement" "WebGl2RenderingContext" "OffscreenCanvas" ];
          }
          {
            name = "wgpu-types";
            packageId = "wgpu-types";
            rename = "wgt";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "profileapi" "libloaderapi" "windef" "winuser" "dcomp" ];
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        devDependencies = [
          {
            name = "naga";
            packageId = "naga";
            features = [ "wgsl-in" ];
          }
        ];
        features = {
          "ash" = [ "dep:ash" ];
          "bit-set" = [ "dep:bit-set" ];
          "block" = [ "dep:block" ];
          "d3d12" = [ "dep:d3d12" ];
          "default" = [ "link" ];
          "dx12" = [ "naga/hlsl-out" "d3d12" "bit-set" "libloading" "range-alloc" "winapi/std" "winapi/winbase" "winapi/d3d12" "winapi/d3d12shader" "winapi/d3d12sdklayers" "winapi/dxgi1_6" ];
          "dxc_shader_compiler" = [ "hassle-rs" ];
          "fragile-send-sync-non-atomic-wasm" = [ "wgt/fragile-send-sync-non-atomic-wasm" ];
          "gles" = [ "naga/glsl-out" "glow" "glutin_wgl_sys" "khronos-egl" "libloading" ];
          "glow" = [ "dep:glow" ];
          "glutin_wgl_sys" = [ "dep:glutin_wgl_sys" ];
          "gpu-alloc" = [ "dep:gpu-alloc" ];
          "gpu-allocator" = [ "dep:gpu-allocator" ];
          "gpu-descriptor" = [ "dep:gpu-descriptor" ];
          "hassle-rs" = [ "dep:hassle-rs" ];
          "khronos-egl" = [ "dep:khronos-egl" ];
          "libloading" = [ "dep:libloading" ];
          "link" = [ "metal/link" ];
          "metal" = [ "naga/msl-out" "block" ];
          "range-alloc" = [ "dep:range-alloc" ];
          "renderdoc" = [ "libloading" "renderdoc-sys" ];
          "renderdoc-sys" = [ "dep:renderdoc-sys" ];
          "smallvec" = [ "dep:smallvec" ];
          "vulkan" = [ "naga/spv-out" "ash" "gpu-alloc" "gpu-descriptor" "libloading" "smallvec" ];
          "windows_rs" = [ "gpu-allocator" ];
        };
        resolvedDefaultFeatures = [ "ash" "bit-set" "block" "d3d12" "default" "dx12" "dxc_shader_compiler" "fragile-send-sync-non-atomic-wasm" "gles" "glow" "glutin_wgl_sys" "gpu-alloc" "gpu-allocator" "gpu-descriptor" "hassle-rs" "khronos-egl" "libloading" "link" "metal" "range-alloc" "renderdoc" "renderdoc-sys" "smallvec" "vulkan" "windows_rs" ];
      };
      "wgpu-types" = rec {
        crateName = "wgpu-types";
        version = "0.19.2";
        edition = "2021";
        sha256 = "01cqjr9qvp34bgjlnrj27wwh7mp7xghlwjbny5pv8y1zn2gzywdn";
        authors = [
          "gfx-rs developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "serde_derive" ];
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "ImageBitmap" "HtmlVideoElement" "HtmlCanvasElement" "OffscreenCanvas" ];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "serde_derive" ];
          }
        ];
        features = {
          "replay" = [ "serde" ];
          "serde" = [ "dep:serde" ];
          "trace" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "fragile-send-sync-non-atomic-wasm" "serde" "trace" ];
      };
      "widestring" = rec {
        crateName = "widestring";
        version = "1.1.0";
        edition = "2021";
        sha256 = "048kxd6iykzi5la9nikpc5hvpp77hmjf1sw43sl3z2dcdrmx66bj";
        features = {
          "debugger_visualizer" = [ "alloc" ];
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "winapi" = rec {
        crateName = "winapi";
        version = "0.3.9";
        edition = "2015";
        sha256 = "06gl025x418lchw1wxj64ycr7gha83m44cjr5sarhynd9xkrm0sw";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "cfg" "combaseapi" "consoleapi" "d3d12" "d3d12sdklayers" "d3d12shader" "d3dcommon" "d3dcompiler" "dcomp" "dxgi1_2" "dxgi1_3" "dxgi1_4" "dxgi1_5" "dxgi1_6" "dxgidebug" "dxgiformat" "errhandlingapi" "evntrace" "fileapi" "handleapi" "impl-debug" "impl-default" "in6addr" "inaddr" "iphlpapi" "knownfolders" "libloaderapi" "memoryapi" "minwinbase" "ntdef" "ntsecapi" "oleauto" "processenv" "processthreadsapi" "profileapi" "sddl" "securitybaseapi" "shlobj" "std" "synchapi" "sysinfoapi" "tcpmib" "winbase" "wincon" "windef" "winerror" "winioctl" "winsock2" "winuser" "ws2def" "ws2ipdef" "ws2tcpip" "wtypes" ];
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.8";
        edition = "2021";
        sha256 = "0svcgddd2rw06mj4r76gj655qsa1ikgz3d3gzax96fz7w62c6k2d";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Storage_FileSystem" "Win32_System_Console" "Win32_System_SystemInformation" ];
          }
        ];

      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "windows 0.48.0" = rec {
        crateName = "windows";
        version = "0.48.0";
        edition = "2018";
        sha256 = "03vh89ilnxdxdh0n9np4ns4m10fvm93h3b0cc05ipg3qq1mqi1p6";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-implement";
            packageId = "windows-implement";
            optional = true;
          }
          {
            name = "windows-interface";
            packageId = "windows-interface";
            optional = true;
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.48.5";
          }
        ];
        features = {
          "AI_MachineLearning" = [ "AI" ];
          "ApplicationModel_Activation" = [ "ApplicationModel" ];
          "ApplicationModel_AppExtensions" = [ "ApplicationModel" ];
          "ApplicationModel_AppService" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments_AppointmentsProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Appointments_DataProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Background" = [ "ApplicationModel" ];
          "ApplicationModel_Calls" = [ "ApplicationModel" ];
          "ApplicationModel_Calls_Background" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Calls_Provider" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Chat" = [ "ApplicationModel" ];
          "ApplicationModel_CommunicationBlocking" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts_DataProvider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_Contacts_Provider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_ConversationalAgent" = [ "ApplicationModel" ];
          "ApplicationModel_Core" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer_DragDrop" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_DataTransfer_DragDrop_Core" = [ "ApplicationModel_DataTransfer_DragDrop" ];
          "ApplicationModel_DataTransfer_ShareTarget" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_Email" = [ "ApplicationModel" ];
          "ApplicationModel_Email_DataProvider" = [ "ApplicationModel_Email" ];
          "ApplicationModel_ExtendedExecution" = [ "ApplicationModel" ];
          "ApplicationModel_ExtendedExecution_Foreground" = [ "ApplicationModel_ExtendedExecution" ];
          "ApplicationModel_Holographic" = [ "ApplicationModel" ];
          "ApplicationModel_LockScreen" = [ "ApplicationModel" ];
          "ApplicationModel_Payments" = [ "ApplicationModel" ];
          "ApplicationModel_Payments_Provider" = [ "ApplicationModel_Payments" ];
          "ApplicationModel_Preview" = [ "ApplicationModel" ];
          "ApplicationModel_Preview_Holographic" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_InkWorkspace" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_Notes" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Resources" = [ "ApplicationModel" ];
          "ApplicationModel_Resources_Core" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Resources_Management" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Search" = [ "ApplicationModel" ];
          "ApplicationModel_Search_Core" = [ "ApplicationModel_Search" ];
          "ApplicationModel_Store" = [ "ApplicationModel" ];
          "ApplicationModel_Store_LicenseManagement" = [ "ApplicationModel_Store" ];
          "ApplicationModel_Store_Preview" = [ "ApplicationModel_Store" ];
          "ApplicationModel_Store_Preview_InstallControl" = [ "ApplicationModel_Store_Preview" ];
          "ApplicationModel_UserActivities" = [ "ApplicationModel" ];
          "ApplicationModel_UserActivities_Core" = [ "ApplicationModel_UserActivities" ];
          "ApplicationModel_UserDataAccounts" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataAccounts_Provider" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataAccounts_SystemAccess" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataTasks" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataTasks_DataProvider" = [ "ApplicationModel_UserDataTasks" ];
          "ApplicationModel_VoiceCommands" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet_System" = [ "ApplicationModel_Wallet" ];
          "Data_Html" = [ "Data" ];
          "Data_Json" = [ "Data" ];
          "Data_Pdf" = [ "Data" ];
          "Data_Text" = [ "Data" ];
          "Data_Xml" = [ "Data" ];
          "Data_Xml_Dom" = [ "Data_Xml" ];
          "Data_Xml_Xsl" = [ "Data_Xml" ];
          "Devices_Adc" = [ "Devices" ];
          "Devices_Adc_Provider" = [ "Devices_Adc" ];
          "Devices_Background" = [ "Devices" ];
          "Devices_Bluetooth" = [ "Devices" ];
          "Devices_Bluetooth_Advertisement" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Background" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_GenericAttributeProfile" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Rfcomm" = [ "Devices_Bluetooth" ];
          "Devices_Custom" = [ "Devices" ];
          "Devices_Display" = [ "Devices" ];
          "Devices_Display_Core" = [ "Devices_Display" ];
          "Devices_Enumeration" = [ "Devices" ];
          "Devices_Enumeration_Pnp" = [ "Devices_Enumeration" ];
          "Devices_Geolocation" = [ "Devices" ];
          "Devices_Geolocation_Geofencing" = [ "Devices_Geolocation" ];
          "Devices_Geolocation_Provider" = [ "Devices_Geolocation" ];
          "Devices_Gpio" = [ "Devices" ];
          "Devices_Gpio_Provider" = [ "Devices_Gpio" ];
          "Devices_Haptics" = [ "Devices" ];
          "Devices_HumanInterfaceDevice" = [ "Devices" ];
          "Devices_I2c" = [ "Devices" ];
          "Devices_I2c_Provider" = [ "Devices_I2c" ];
          "Devices_Input" = [ "Devices" ];
          "Devices_Input_Preview" = [ "Devices_Input" ];
          "Devices_Lights" = [ "Devices" ];
          "Devices_Lights_Effects" = [ "Devices_Lights" ];
          "Devices_Midi" = [ "Devices" ];
          "Devices_PointOfService" = [ "Devices" ];
          "Devices_PointOfService_Provider" = [ "Devices_PointOfService" ];
          "Devices_Portable" = [ "Devices" ];
          "Devices_Power" = [ "Devices" ];
          "Devices_Printers" = [ "Devices" ];
          "Devices_Printers_Extensions" = [ "Devices_Printers" ];
          "Devices_Pwm" = [ "Devices" ];
          "Devices_Pwm_Provider" = [ "Devices_Pwm" ];
          "Devices_Radios" = [ "Devices" ];
          "Devices_Scanners" = [ "Devices" ];
          "Devices_Sensors" = [ "Devices" ];
          "Devices_Sensors_Custom" = [ "Devices_Sensors" ];
          "Devices_SerialCommunication" = [ "Devices" ];
          "Devices_SmartCards" = [ "Devices" ];
          "Devices_Sms" = [ "Devices" ];
          "Devices_Spi" = [ "Devices" ];
          "Devices_Spi_Provider" = [ "Devices_Spi" ];
          "Devices_Usb" = [ "Devices" ];
          "Devices_WiFi" = [ "Devices" ];
          "Devices_WiFiDirect" = [ "Devices" ];
          "Devices_WiFiDirect_Services" = [ "Devices_WiFiDirect" ];
          "Embedded_DeviceLockdown" = [ "Embedded" ];
          "Foundation_Collections" = [ "Foundation" ];
          "Foundation_Diagnostics" = [ "Foundation" ];
          "Foundation_Metadata" = [ "Foundation" ];
          "Foundation_Numerics" = [ "Foundation" ];
          "Gaming_Input" = [ "Gaming" ];
          "Gaming_Input_Custom" = [ "Gaming_Input" ];
          "Gaming_Input_ForceFeedback" = [ "Gaming_Input" ];
          "Gaming_Input_Preview" = [ "Gaming_Input" ];
          "Gaming_Preview" = [ "Gaming" ];
          "Gaming_Preview_GamesEnumeration" = [ "Gaming_Preview" ];
          "Gaming_UI" = [ "Gaming" ];
          "Gaming_XboxLive" = [ "Gaming" ];
          "Gaming_XboxLive_Storage" = [ "Gaming_XboxLive" ];
          "Globalization_Collation" = [ "Globalization" ];
          "Globalization_DateTimeFormatting" = [ "Globalization" ];
          "Globalization_Fonts" = [ "Globalization" ];
          "Globalization_NumberFormatting" = [ "Globalization" ];
          "Globalization_PhoneNumberFormatting" = [ "Globalization" ];
          "Graphics_Capture" = [ "Graphics" ];
          "Graphics_DirectX" = [ "Graphics" ];
          "Graphics_DirectX_Direct3D11" = [ "Graphics_DirectX" ];
          "Graphics_Display" = [ "Graphics" ];
          "Graphics_Display_Core" = [ "Graphics_Display" ];
          "Graphics_Effects" = [ "Graphics" ];
          "Graphics_Holographic" = [ "Graphics" ];
          "Graphics_Imaging" = [ "Graphics" ];
          "Graphics_Printing" = [ "Graphics" ];
          "Graphics_Printing3D" = [ "Graphics" ];
          "Graphics_Printing_OptionDetails" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintSupport" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintTicket" = [ "Graphics_Printing" ];
          "Graphics_Printing_Workflow" = [ "Graphics_Printing" ];
          "Management_Core" = [ "Management" ];
          "Management_Deployment" = [ "Management" ];
          "Management_Deployment_Preview" = [ "Management_Deployment" ];
          "Management_Policies" = [ "Management" ];
          "Management_Update" = [ "Management" ];
          "Management_Workplace" = [ "Management" ];
          "Media_AppBroadcasting" = [ "Media" ];
          "Media_AppRecording" = [ "Media" ];
          "Media_Audio" = [ "Media" ];
          "Media_Capture" = [ "Media" ];
          "Media_Capture_Core" = [ "Media_Capture" ];
          "Media_Capture_Frames" = [ "Media_Capture" ];
          "Media_Casting" = [ "Media" ];
          "Media_ClosedCaptioning" = [ "Media" ];
          "Media_ContentRestrictions" = [ "Media" ];
          "Media_Control" = [ "Media" ];
          "Media_Core" = [ "Media" ];
          "Media_Core_Preview" = [ "Media_Core" ];
          "Media_Devices" = [ "Media" ];
          "Media_Devices_Core" = [ "Media_Devices" ];
          "Media_DialProtocol" = [ "Media" ];
          "Media_Editing" = [ "Media" ];
          "Media_Effects" = [ "Media" ];
          "Media_FaceAnalysis" = [ "Media" ];
          "Media_Import" = [ "Media" ];
          "Media_MediaProperties" = [ "Media" ];
          "Media_Miracast" = [ "Media" ];
          "Media_Ocr" = [ "Media" ];
          "Media_PlayTo" = [ "Media" ];
          "Media_Playback" = [ "Media" ];
          "Media_Playlists" = [ "Media" ];
          "Media_Protection" = [ "Media" ];
          "Media_Protection_PlayReady" = [ "Media_Protection" ];
          "Media_Render" = [ "Media" ];
          "Media_SpeechRecognition" = [ "Media" ];
          "Media_SpeechSynthesis" = [ "Media" ];
          "Media_Streaming" = [ "Media" ];
          "Media_Streaming_Adaptive" = [ "Media_Streaming" ];
          "Media_Transcoding" = [ "Media" ];
          "Networking_BackgroundTransfer" = [ "Networking" ];
          "Networking_Connectivity" = [ "Networking" ];
          "Networking_NetworkOperators" = [ "Networking" ];
          "Networking_Proximity" = [ "Networking" ];
          "Networking_PushNotifications" = [ "Networking" ];
          "Networking_ServiceDiscovery" = [ "Networking" ];
          "Networking_ServiceDiscovery_Dnssd" = [ "Networking_ServiceDiscovery" ];
          "Networking_Sockets" = [ "Networking" ];
          "Networking_Vpn" = [ "Networking" ];
          "Networking_XboxLive" = [ "Networking" ];
          "Perception_Automation" = [ "Perception" ];
          "Perception_Automation_Core" = [ "Perception_Automation" ];
          "Perception_People" = [ "Perception" ];
          "Perception_Spatial" = [ "Perception" ];
          "Perception_Spatial_Preview" = [ "Perception_Spatial" ];
          "Perception_Spatial_Surfaces" = [ "Perception_Spatial" ];
          "Phone_ApplicationModel" = [ "Phone" ];
          "Phone_Devices" = [ "Phone" ];
          "Phone_Devices_Notification" = [ "Phone_Devices" ];
          "Phone_Devices_Power" = [ "Phone_Devices" ];
          "Phone_Management" = [ "Phone" ];
          "Phone_Management_Deployment" = [ "Phone_Management" ];
          "Phone_Media" = [ "Phone" ];
          "Phone_Media_Devices" = [ "Phone_Media" ];
          "Phone_Notification" = [ "Phone" ];
          "Phone_Notification_Management" = [ "Phone_Notification" ];
          "Phone_PersonalInformation" = [ "Phone" ];
          "Phone_PersonalInformation_Provisioning" = [ "Phone_PersonalInformation" ];
          "Phone_Speech" = [ "Phone" ];
          "Phone_Speech_Recognition" = [ "Phone_Speech" ];
          "Phone_StartScreen" = [ "Phone" ];
          "Phone_System" = [ "Phone" ];
          "Phone_System_Power" = [ "Phone_System" ];
          "Phone_System_Profile" = [ "Phone_System" ];
          "Phone_System_UserProfile" = [ "Phone_System" ];
          "Phone_System_UserProfile_GameServices" = [ "Phone_System_UserProfile" ];
          "Phone_System_UserProfile_GameServices_Core" = [ "Phone_System_UserProfile_GameServices" ];
          "Phone_UI" = [ "Phone" ];
          "Phone_UI_Input" = [ "Phone_UI" ];
          "Security_Authentication" = [ "Security" ];
          "Security_Authentication_Identity" = [ "Security_Authentication" ];
          "Security_Authentication_Identity_Core" = [ "Security_Authentication_Identity" ];
          "Security_Authentication_OnlineId" = [ "Security_Authentication" ];
          "Security_Authentication_Web" = [ "Security_Authentication" ];
          "Security_Authentication_Web_Core" = [ "Security_Authentication_Web" ];
          "Security_Authentication_Web_Provider" = [ "Security_Authentication_Web" ];
          "Security_Authorization" = [ "Security" ];
          "Security_Authorization_AppCapabilityAccess" = [ "Security_Authorization" ];
          "Security_Credentials" = [ "Security" ];
          "Security_Credentials_UI" = [ "Security_Credentials" ];
          "Security_Cryptography" = [ "Security" ];
          "Security_Cryptography_Certificates" = [ "Security_Cryptography" ];
          "Security_Cryptography_Core" = [ "Security_Cryptography" ];
          "Security_Cryptography_DataProtection" = [ "Security_Cryptography" ];
          "Security_DataProtection" = [ "Security" ];
          "Security_EnterpriseData" = [ "Security" ];
          "Security_ExchangeActiveSyncProvisioning" = [ "Security" ];
          "Security_Isolation" = [ "Security" ];
          "Services_Maps" = [ "Services" ];
          "Services_Maps_Guidance" = [ "Services_Maps" ];
          "Services_Maps_LocalSearch" = [ "Services_Maps" ];
          "Services_Maps_OfflineMaps" = [ "Services_Maps" ];
          "Services_Store" = [ "Services" ];
          "Services_TargetedContent" = [ "Services" ];
          "Storage_AccessCache" = [ "Storage" ];
          "Storage_BulkAccess" = [ "Storage" ];
          "Storage_Compression" = [ "Storage" ];
          "Storage_FileProperties" = [ "Storage" ];
          "Storage_Pickers" = [ "Storage" ];
          "Storage_Pickers_Provider" = [ "Storage_Pickers" ];
          "Storage_Provider" = [ "Storage" ];
          "Storage_Search" = [ "Storage" ];
          "Storage_Streams" = [ "Storage" ];
          "System_Diagnostics" = [ "System" ];
          "System_Diagnostics_DevicePortal" = [ "System_Diagnostics" ];
          "System_Diagnostics_Telemetry" = [ "System_Diagnostics" ];
          "System_Diagnostics_TraceReporting" = [ "System_Diagnostics" ];
          "System_Display" = [ "System" ];
          "System_Implementation" = [ "System" ];
          "System_Implementation_FileExplorer" = [ "System_Implementation" ];
          "System_Inventory" = [ "System" ];
          "System_Power" = [ "System" ];
          "System_Profile" = [ "System" ];
          "System_Profile_SystemManufacturers" = [ "System_Profile" ];
          "System_RemoteDesktop" = [ "System" ];
          "System_RemoteDesktop_Input" = [ "System_RemoteDesktop" ];
          "System_RemoteSystems" = [ "System" ];
          "System_Threading" = [ "System" ];
          "System_Threading_Core" = [ "System_Threading" ];
          "System_Update" = [ "System" ];
          "System_UserProfile" = [ "System" ];
          "UI_Accessibility" = [ "UI" ];
          "UI_ApplicationSettings" = [ "UI" ];
          "UI_Composition" = [ "UI" ];
          "UI_Composition_Core" = [ "UI_Composition" ];
          "UI_Composition_Desktop" = [ "UI_Composition" ];
          "UI_Composition_Diagnostics" = [ "UI_Composition" ];
          "UI_Composition_Effects" = [ "UI_Composition" ];
          "UI_Composition_Interactions" = [ "UI_Composition" ];
          "UI_Composition_Scenes" = [ "UI_Composition" ];
          "UI_Core" = [ "UI" ];
          "UI_Core_AnimationMetrics" = [ "UI_Core" ];
          "UI_Core_Preview" = [ "UI_Core" ];
          "UI_Input" = [ "UI" ];
          "UI_Input_Core" = [ "UI_Input" ];
          "UI_Input_Inking" = [ "UI_Input" ];
          "UI_Input_Inking_Analysis" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Core" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Preview" = [ "UI_Input_Inking" ];
          "UI_Input_Preview" = [ "UI_Input" ];
          "UI_Input_Preview_Injection" = [ "UI_Input_Preview" ];
          "UI_Input_Spatial" = [ "UI_Input" ];
          "UI_Notifications" = [ "UI" ];
          "UI_Notifications_Management" = [ "UI_Notifications" ];
          "UI_Popups" = [ "UI" ];
          "UI_Shell" = [ "UI" ];
          "UI_StartScreen" = [ "UI" ];
          "UI_Text" = [ "UI" ];
          "UI_Text_Core" = [ "UI_Text" ];
          "UI_UIAutomation" = [ "UI" ];
          "UI_UIAutomation_Core" = [ "UI_UIAutomation" ];
          "UI_ViewManagement" = [ "UI" ];
          "UI_ViewManagement_Core" = [ "UI_ViewManagement" ];
          "UI_WebUI" = [ "UI" ];
          "UI_WebUI_Core" = [ "UI_WebUI" ];
          "UI_WindowManagement" = [ "UI" ];
          "UI_WindowManagement_Preview" = [ "UI_WindowManagement" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Web_AtomPub" = [ "Web" ];
          "Web_Http" = [ "Web" ];
          "Web_Http_Diagnostics" = [ "Web_Http" ];
          "Web_Http_Filters" = [ "Web_Http" ];
          "Web_Http_Headers" = [ "Web_Http" ];
          "Web_Syndication" = [ "Web" ];
          "Web_UI" = [ "Web" ];
          "Web_UI_Interop" = [ "Web_UI" ];
          "Win32_AI" = [ "Win32" ];
          "Win32_AI_MachineLearning" = [ "Win32_AI" ];
          "Win32_AI_MachineLearning_DirectML" = [ "Win32_AI_MachineLearning" ];
          "Win32_AI_MachineLearning_WinML" = [ "Win32_AI_MachineLearning" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_CompositionSwapchain" = [ "Win32_Graphics" ];
          "Win32_Graphics_DXCore" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D_Common" = [ "Win32_Graphics_Direct2D" ];
          "Win32_Graphics_Direct3D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D10" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D_Dxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_Direct3D_Fxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_DirectComposition" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectDraw" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectManipulation" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectWrite" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi_Common" = [ "Win32_Graphics_Dxgi" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging_D2D" = [ "Win32_Graphics_Imaging" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectSound" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DirectShow" = [ "Win32_Media" ];
          "Win32_Media_DirectShow_Tv" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DirectShow_Xml" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaFoundation" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_PictureAcquisition" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ClrProfiling" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_ActiveScript" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_SideShow" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_TransactionServer" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WinRT" = [ "Win32_System" ];
          "Win32_System_WinRT_AllJoyn" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Composition" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_CoreInputView" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Direct3D11" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Display" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics_Capture" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Direct2D" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Imaging" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Holographic" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Isolation" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_ML" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Media" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Metadata" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Pdf" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Printing" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Shell" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Storage" = [ "Win32_System_WinRT" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
          "implement" = [ "windows-implement" "windows-interface" ];
          "windows-implement" = [ "dep:windows-implement" ];
          "windows-interface" = [ "dep:windows-interface" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_Graphics" "Win32_Graphics_Gdi" "Win32_System" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_UI" "Win32_UI_Accessibility" "Win32_UI_Input" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_WindowsAndMessaging" "default" "implement" "windows-implement" "windows-interface" ];
      };
      "windows 0.52.0" = rec {
        crateName = "windows";
        version = "0.52.0";
        edition = "2021";
        sha256 = "1gnh210qjlprpd1szaq04rjm1zqgdm9j7l9absg0kawi2rwm72p4";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-core";
            packageId = "windows-core 0.52.0";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.5";
          }
        ];
        features = {
          "AI_MachineLearning" = [ "AI" ];
          "ApplicationModel_Activation" = [ "ApplicationModel" ];
          "ApplicationModel_AppExtensions" = [ "ApplicationModel" ];
          "ApplicationModel_AppService" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments_AppointmentsProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Appointments_DataProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Background" = [ "ApplicationModel" ];
          "ApplicationModel_Calls" = [ "ApplicationModel" ];
          "ApplicationModel_Calls_Background" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Calls_Provider" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Chat" = [ "ApplicationModel" ];
          "ApplicationModel_CommunicationBlocking" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts_DataProvider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_Contacts_Provider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_ConversationalAgent" = [ "ApplicationModel" ];
          "ApplicationModel_Core" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer_DragDrop" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_DataTransfer_DragDrop_Core" = [ "ApplicationModel_DataTransfer_DragDrop" ];
          "ApplicationModel_DataTransfer_ShareTarget" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_Email" = [ "ApplicationModel" ];
          "ApplicationModel_Email_DataProvider" = [ "ApplicationModel_Email" ];
          "ApplicationModel_ExtendedExecution" = [ "ApplicationModel" ];
          "ApplicationModel_ExtendedExecution_Foreground" = [ "ApplicationModel_ExtendedExecution" ];
          "ApplicationModel_Holographic" = [ "ApplicationModel" ];
          "ApplicationModel_LockScreen" = [ "ApplicationModel" ];
          "ApplicationModel_Payments" = [ "ApplicationModel" ];
          "ApplicationModel_Payments_Provider" = [ "ApplicationModel_Payments" ];
          "ApplicationModel_Preview" = [ "ApplicationModel" ];
          "ApplicationModel_Preview_Holographic" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_InkWorkspace" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_Notes" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Resources" = [ "ApplicationModel" ];
          "ApplicationModel_Resources_Core" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Resources_Management" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Search" = [ "ApplicationModel" ];
          "ApplicationModel_Search_Core" = [ "ApplicationModel_Search" ];
          "ApplicationModel_Store" = [ "ApplicationModel" ];
          "ApplicationModel_Store_LicenseManagement" = [ "ApplicationModel_Store" ];
          "ApplicationModel_Store_Preview" = [ "ApplicationModel_Store" ];
          "ApplicationModel_Store_Preview_InstallControl" = [ "ApplicationModel_Store_Preview" ];
          "ApplicationModel_UserActivities" = [ "ApplicationModel" ];
          "ApplicationModel_UserActivities_Core" = [ "ApplicationModel_UserActivities" ];
          "ApplicationModel_UserDataAccounts" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataAccounts_Provider" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataAccounts_SystemAccess" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataTasks" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataTasks_DataProvider" = [ "ApplicationModel_UserDataTasks" ];
          "ApplicationModel_VoiceCommands" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet_System" = [ "ApplicationModel_Wallet" ];
          "Data_Html" = [ "Data" ];
          "Data_Json" = [ "Data" ];
          "Data_Pdf" = [ "Data" ];
          "Data_Text" = [ "Data" ];
          "Data_Xml" = [ "Data" ];
          "Data_Xml_Dom" = [ "Data_Xml" ];
          "Data_Xml_Xsl" = [ "Data_Xml" ];
          "Devices_Adc" = [ "Devices" ];
          "Devices_Adc_Provider" = [ "Devices_Adc" ];
          "Devices_Background" = [ "Devices" ];
          "Devices_Bluetooth" = [ "Devices" ];
          "Devices_Bluetooth_Advertisement" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Background" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_GenericAttributeProfile" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Rfcomm" = [ "Devices_Bluetooth" ];
          "Devices_Custom" = [ "Devices" ];
          "Devices_Display" = [ "Devices" ];
          "Devices_Display_Core" = [ "Devices_Display" ];
          "Devices_Enumeration" = [ "Devices" ];
          "Devices_Enumeration_Pnp" = [ "Devices_Enumeration" ];
          "Devices_Geolocation" = [ "Devices" ];
          "Devices_Geolocation_Geofencing" = [ "Devices_Geolocation" ];
          "Devices_Geolocation_Provider" = [ "Devices_Geolocation" ];
          "Devices_Gpio" = [ "Devices" ];
          "Devices_Gpio_Provider" = [ "Devices_Gpio" ];
          "Devices_Haptics" = [ "Devices" ];
          "Devices_HumanInterfaceDevice" = [ "Devices" ];
          "Devices_I2c" = [ "Devices" ];
          "Devices_I2c_Provider" = [ "Devices_I2c" ];
          "Devices_Input" = [ "Devices" ];
          "Devices_Input_Preview" = [ "Devices_Input" ];
          "Devices_Lights" = [ "Devices" ];
          "Devices_Lights_Effects" = [ "Devices_Lights" ];
          "Devices_Midi" = [ "Devices" ];
          "Devices_PointOfService" = [ "Devices" ];
          "Devices_PointOfService_Provider" = [ "Devices_PointOfService" ];
          "Devices_Portable" = [ "Devices" ];
          "Devices_Power" = [ "Devices" ];
          "Devices_Printers" = [ "Devices" ];
          "Devices_Printers_Extensions" = [ "Devices_Printers" ];
          "Devices_Pwm" = [ "Devices" ];
          "Devices_Pwm_Provider" = [ "Devices_Pwm" ];
          "Devices_Radios" = [ "Devices" ];
          "Devices_Scanners" = [ "Devices" ];
          "Devices_Sensors" = [ "Devices" ];
          "Devices_Sensors_Custom" = [ "Devices_Sensors" ];
          "Devices_SerialCommunication" = [ "Devices" ];
          "Devices_SmartCards" = [ "Devices" ];
          "Devices_Sms" = [ "Devices" ];
          "Devices_Spi" = [ "Devices" ];
          "Devices_Spi_Provider" = [ "Devices_Spi" ];
          "Devices_Usb" = [ "Devices" ];
          "Devices_WiFi" = [ "Devices" ];
          "Devices_WiFiDirect" = [ "Devices" ];
          "Devices_WiFiDirect_Services" = [ "Devices_WiFiDirect" ];
          "Embedded_DeviceLockdown" = [ "Embedded" ];
          "Foundation_Collections" = [ "Foundation" ];
          "Foundation_Diagnostics" = [ "Foundation" ];
          "Foundation_Metadata" = [ "Foundation" ];
          "Foundation_Numerics" = [ "Foundation" ];
          "Gaming_Input" = [ "Gaming" ];
          "Gaming_Input_Custom" = [ "Gaming_Input" ];
          "Gaming_Input_ForceFeedback" = [ "Gaming_Input" ];
          "Gaming_Input_Preview" = [ "Gaming_Input" ];
          "Gaming_Preview" = [ "Gaming" ];
          "Gaming_Preview_GamesEnumeration" = [ "Gaming_Preview" ];
          "Gaming_UI" = [ "Gaming" ];
          "Gaming_XboxLive" = [ "Gaming" ];
          "Gaming_XboxLive_Storage" = [ "Gaming_XboxLive" ];
          "Globalization_Collation" = [ "Globalization" ];
          "Globalization_DateTimeFormatting" = [ "Globalization" ];
          "Globalization_Fonts" = [ "Globalization" ];
          "Globalization_NumberFormatting" = [ "Globalization" ];
          "Globalization_PhoneNumberFormatting" = [ "Globalization" ];
          "Graphics_Capture" = [ "Graphics" ];
          "Graphics_DirectX" = [ "Graphics" ];
          "Graphics_DirectX_Direct3D11" = [ "Graphics_DirectX" ];
          "Graphics_Display" = [ "Graphics" ];
          "Graphics_Display_Core" = [ "Graphics_Display" ];
          "Graphics_Effects" = [ "Graphics" ];
          "Graphics_Holographic" = [ "Graphics" ];
          "Graphics_Imaging" = [ "Graphics" ];
          "Graphics_Printing" = [ "Graphics" ];
          "Graphics_Printing3D" = [ "Graphics" ];
          "Graphics_Printing_OptionDetails" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintSupport" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintTicket" = [ "Graphics_Printing" ];
          "Graphics_Printing_Workflow" = [ "Graphics_Printing" ];
          "Management_Core" = [ "Management" ];
          "Management_Deployment" = [ "Management" ];
          "Management_Deployment_Preview" = [ "Management_Deployment" ];
          "Management_Policies" = [ "Management" ];
          "Management_Update" = [ "Management" ];
          "Management_Workplace" = [ "Management" ];
          "Media_AppBroadcasting" = [ "Media" ];
          "Media_AppRecording" = [ "Media" ];
          "Media_Audio" = [ "Media" ];
          "Media_Capture" = [ "Media" ];
          "Media_Capture_Core" = [ "Media_Capture" ];
          "Media_Capture_Frames" = [ "Media_Capture" ];
          "Media_Casting" = [ "Media" ];
          "Media_ClosedCaptioning" = [ "Media" ];
          "Media_ContentRestrictions" = [ "Media" ];
          "Media_Control" = [ "Media" ];
          "Media_Core" = [ "Media" ];
          "Media_Core_Preview" = [ "Media_Core" ];
          "Media_Devices" = [ "Media" ];
          "Media_Devices_Core" = [ "Media_Devices" ];
          "Media_DialProtocol" = [ "Media" ];
          "Media_Editing" = [ "Media" ];
          "Media_Effects" = [ "Media" ];
          "Media_FaceAnalysis" = [ "Media" ];
          "Media_Import" = [ "Media" ];
          "Media_MediaProperties" = [ "Media" ];
          "Media_Miracast" = [ "Media" ];
          "Media_Ocr" = [ "Media" ];
          "Media_PlayTo" = [ "Media" ];
          "Media_Playback" = [ "Media" ];
          "Media_Playlists" = [ "Media" ];
          "Media_Protection" = [ "Media" ];
          "Media_Protection_PlayReady" = [ "Media_Protection" ];
          "Media_Render" = [ "Media" ];
          "Media_SpeechRecognition" = [ "Media" ];
          "Media_SpeechSynthesis" = [ "Media" ];
          "Media_Streaming" = [ "Media" ];
          "Media_Streaming_Adaptive" = [ "Media_Streaming" ];
          "Media_Transcoding" = [ "Media" ];
          "Networking_BackgroundTransfer" = [ "Networking" ];
          "Networking_Connectivity" = [ "Networking" ];
          "Networking_NetworkOperators" = [ "Networking" ];
          "Networking_Proximity" = [ "Networking" ];
          "Networking_PushNotifications" = [ "Networking" ];
          "Networking_ServiceDiscovery" = [ "Networking" ];
          "Networking_ServiceDiscovery_Dnssd" = [ "Networking_ServiceDiscovery" ];
          "Networking_Sockets" = [ "Networking" ];
          "Networking_Vpn" = [ "Networking" ];
          "Networking_XboxLive" = [ "Networking" ];
          "Perception_Automation" = [ "Perception" ];
          "Perception_Automation_Core" = [ "Perception_Automation" ];
          "Perception_People" = [ "Perception" ];
          "Perception_Spatial" = [ "Perception" ];
          "Perception_Spatial_Preview" = [ "Perception_Spatial" ];
          "Perception_Spatial_Surfaces" = [ "Perception_Spatial" ];
          "Phone_ApplicationModel" = [ "Phone" ];
          "Phone_Devices" = [ "Phone" ];
          "Phone_Devices_Notification" = [ "Phone_Devices" ];
          "Phone_Devices_Power" = [ "Phone_Devices" ];
          "Phone_Management" = [ "Phone" ];
          "Phone_Management_Deployment" = [ "Phone_Management" ];
          "Phone_Media" = [ "Phone" ];
          "Phone_Media_Devices" = [ "Phone_Media" ];
          "Phone_Notification" = [ "Phone" ];
          "Phone_Notification_Management" = [ "Phone_Notification" ];
          "Phone_PersonalInformation" = [ "Phone" ];
          "Phone_PersonalInformation_Provisioning" = [ "Phone_PersonalInformation" ];
          "Phone_Speech" = [ "Phone" ];
          "Phone_Speech_Recognition" = [ "Phone_Speech" ];
          "Phone_StartScreen" = [ "Phone" ];
          "Phone_System" = [ "Phone" ];
          "Phone_System_Power" = [ "Phone_System" ];
          "Phone_System_Profile" = [ "Phone_System" ];
          "Phone_System_UserProfile" = [ "Phone_System" ];
          "Phone_System_UserProfile_GameServices" = [ "Phone_System_UserProfile" ];
          "Phone_System_UserProfile_GameServices_Core" = [ "Phone_System_UserProfile_GameServices" ];
          "Phone_UI" = [ "Phone" ];
          "Phone_UI_Input" = [ "Phone_UI" ];
          "Security_Authentication" = [ "Security" ];
          "Security_Authentication_Identity" = [ "Security_Authentication" ];
          "Security_Authentication_Identity_Core" = [ "Security_Authentication_Identity" ];
          "Security_Authentication_OnlineId" = [ "Security_Authentication" ];
          "Security_Authentication_Web" = [ "Security_Authentication" ];
          "Security_Authentication_Web_Core" = [ "Security_Authentication_Web" ];
          "Security_Authentication_Web_Provider" = [ "Security_Authentication_Web" ];
          "Security_Authorization" = [ "Security" ];
          "Security_Authorization_AppCapabilityAccess" = [ "Security_Authorization" ];
          "Security_Credentials" = [ "Security" ];
          "Security_Credentials_UI" = [ "Security_Credentials" ];
          "Security_Cryptography" = [ "Security" ];
          "Security_Cryptography_Certificates" = [ "Security_Cryptography" ];
          "Security_Cryptography_Core" = [ "Security_Cryptography" ];
          "Security_Cryptography_DataProtection" = [ "Security_Cryptography" ];
          "Security_DataProtection" = [ "Security" ];
          "Security_EnterpriseData" = [ "Security" ];
          "Security_ExchangeActiveSyncProvisioning" = [ "Security" ];
          "Security_Isolation" = [ "Security" ];
          "Services_Maps" = [ "Services" ];
          "Services_Maps_Guidance" = [ "Services_Maps" ];
          "Services_Maps_LocalSearch" = [ "Services_Maps" ];
          "Services_Maps_OfflineMaps" = [ "Services_Maps" ];
          "Services_Store" = [ "Services" ];
          "Services_TargetedContent" = [ "Services" ];
          "Storage_AccessCache" = [ "Storage" ];
          "Storage_BulkAccess" = [ "Storage" ];
          "Storage_Compression" = [ "Storage" ];
          "Storage_FileProperties" = [ "Storage" ];
          "Storage_Pickers" = [ "Storage" ];
          "Storage_Pickers_Provider" = [ "Storage_Pickers" ];
          "Storage_Provider" = [ "Storage" ];
          "Storage_Search" = [ "Storage" ];
          "Storage_Streams" = [ "Storage" ];
          "System_Diagnostics" = [ "System" ];
          "System_Diagnostics_DevicePortal" = [ "System_Diagnostics" ];
          "System_Diagnostics_Telemetry" = [ "System_Diagnostics" ];
          "System_Diagnostics_TraceReporting" = [ "System_Diagnostics" ];
          "System_Display" = [ "System" ];
          "System_Implementation" = [ "System" ];
          "System_Implementation_FileExplorer" = [ "System_Implementation" ];
          "System_Inventory" = [ "System" ];
          "System_Power" = [ "System" ];
          "System_Profile" = [ "System" ];
          "System_Profile_SystemManufacturers" = [ "System_Profile" ];
          "System_RemoteDesktop" = [ "System" ];
          "System_RemoteDesktop_Input" = [ "System_RemoteDesktop" ];
          "System_RemoteSystems" = [ "System" ];
          "System_Threading" = [ "System" ];
          "System_Threading_Core" = [ "System_Threading" ];
          "System_Update" = [ "System" ];
          "System_UserProfile" = [ "System" ];
          "UI_Accessibility" = [ "UI" ];
          "UI_ApplicationSettings" = [ "UI" ];
          "UI_Composition" = [ "UI" ];
          "UI_Composition_Core" = [ "UI_Composition" ];
          "UI_Composition_Desktop" = [ "UI_Composition" ];
          "UI_Composition_Diagnostics" = [ "UI_Composition" ];
          "UI_Composition_Effects" = [ "UI_Composition" ];
          "UI_Composition_Interactions" = [ "UI_Composition" ];
          "UI_Composition_Scenes" = [ "UI_Composition" ];
          "UI_Core" = [ "UI" ];
          "UI_Core_AnimationMetrics" = [ "UI_Core" ];
          "UI_Core_Preview" = [ "UI_Core" ];
          "UI_Input" = [ "UI" ];
          "UI_Input_Core" = [ "UI_Input" ];
          "UI_Input_Inking" = [ "UI_Input" ];
          "UI_Input_Inking_Analysis" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Core" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Preview" = [ "UI_Input_Inking" ];
          "UI_Input_Preview" = [ "UI_Input" ];
          "UI_Input_Preview_Injection" = [ "UI_Input_Preview" ];
          "UI_Input_Spatial" = [ "UI_Input" ];
          "UI_Notifications" = [ "UI" ];
          "UI_Notifications_Management" = [ "UI_Notifications" ];
          "UI_Popups" = [ "UI" ];
          "UI_Shell" = [ "UI" ];
          "UI_StartScreen" = [ "UI" ];
          "UI_Text" = [ "UI" ];
          "UI_Text_Core" = [ "UI_Text" ];
          "UI_UIAutomation" = [ "UI" ];
          "UI_UIAutomation_Core" = [ "UI_UIAutomation" ];
          "UI_ViewManagement" = [ "UI" ];
          "UI_ViewManagement_Core" = [ "UI_ViewManagement" ];
          "UI_WebUI" = [ "UI" ];
          "UI_WebUI_Core" = [ "UI_WebUI" ];
          "UI_WindowManagement" = [ "UI" ];
          "UI_WindowManagement_Preview" = [ "UI_WindowManagement" ];
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Web_AtomPub" = [ "Web" ];
          "Web_Http" = [ "Web" ];
          "Web_Http_Diagnostics" = [ "Web_Http" ];
          "Web_Http_Filters" = [ "Web_Http" ];
          "Web_Http_Headers" = [ "Web_Http" ];
          "Web_Syndication" = [ "Web" ];
          "Web_UI" = [ "Web" ];
          "Web_UI_Interop" = [ "Web_UI" ];
          "Win32_AI" = [ "Win32" ];
          "Win32_AI_MachineLearning" = [ "Win32_AI" ];
          "Win32_AI_MachineLearning_DirectML" = [ "Win32_AI_MachineLearning" ];
          "Win32_AI_MachineLearning_WinML" = [ "Win32_AI_MachineLearning" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_CompositionSwapchain" = [ "Win32_Graphics" ];
          "Win32_Graphics_DXCore" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D_Common" = [ "Win32_Graphics_Direct2D" ];
          "Win32_Graphics_Direct3D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D10" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D_Dxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_Direct3D_Fxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_DirectComposition" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectDraw" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectManipulation" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectWrite" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi_Common" = [ "Win32_Graphics_Dxgi" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging_D2D" = [ "Win32_Graphics_Imaging" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectSound" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DirectShow" = [ "Win32_Media" ];
          "Win32_Media_DirectShow_Tv" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DirectShow_Xml" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaFoundation" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_PictureAcquisition" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ClrProfiling" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_ActiveScript" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_SideShow" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_TransactionServer" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WinRT" = [ "Win32_System" ];
          "Win32_System_WinRT_AllJoyn" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Composition" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_CoreInputView" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Direct3D11" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Display" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics_Capture" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Direct2D" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Imaging" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Holographic" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Isolation" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_ML" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Media" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Metadata" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Pdf" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Printing" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Shell" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Storage" = [ "Win32_System_WinRT" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
          "implement" = [ "windows-implement" "windows-interface" "windows-core/implement" ];
          "windows-implement" = [ "dep:windows-implement" ];
          "windows-interface" = [ "dep:windows-interface" ];
        };
        resolvedDefaultFeatures = [ "Wdk" "Wdk_System" "Wdk_System_SystemInformation" "Wdk_System_SystemServices" "Wdk_System_Threading" "Win32" "Win32_Foundation" "Win32_Graphics" "Win32_Graphics_Direct3D" "Win32_Graphics_Direct3D12" "Win32_Graphics_Dxgi" "Win32_Graphics_Dxgi_Common" "Win32_NetworkManagement" "Win32_NetworkManagement_IpHelper" "Win32_NetworkManagement_Ndis" "Win32_NetworkManagement_NetManagement" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Security_Authentication" "Win32_Security_Authentication_Identity" "Win32_Security_Authorization" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Com" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_IO" "Win32_System_Ioctl" "Win32_System_Kernel" "Win32_System_LibraryLoader" "Win32_System_Memory" "Win32_System_Ole" "Win32_System_Performance" "Win32_System_Power" "Win32_System_ProcessStatus" "Win32_System_Registry" "Win32_System_RemoteDesktop" "Win32_System_Rpc" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_Variant" "Win32_System_WindowsProgramming" "Win32_System_Wmi" "Win32_UI" "Win32_UI_Shell" "default" ];
      };
      "windows 0.54.0" = rec {
        crateName = "windows";
        version = "0.54.0";
        edition = "2021";
        sha256 = "0j8vd8sg2rbln6g3a608qg1a7r2lwxcga78mmxjjin5ybmrfallj";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-core";
            packageId = "windows-core 0.54.0";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.5";
          }
        ];
        features = {
          "AI" = [ "Foundation" ];
          "AI_MachineLearning" = [ "AI" ];
          "ApplicationModel" = [ "Foundation" ];
          "ApplicationModel_Activation" = [ "ApplicationModel" ];
          "ApplicationModel_AppExtensions" = [ "ApplicationModel" ];
          "ApplicationModel_AppService" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments_AppointmentsProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Appointments_DataProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Background" = [ "ApplicationModel" ];
          "ApplicationModel_Calls" = [ "ApplicationModel" ];
          "ApplicationModel_Calls_Background" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Calls_Provider" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Chat" = [ "ApplicationModel" ];
          "ApplicationModel_CommunicationBlocking" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts_DataProvider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_Contacts_Provider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_ConversationalAgent" = [ "ApplicationModel" ];
          "ApplicationModel_Core" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer_DragDrop" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_DataTransfer_DragDrop_Core" = [ "ApplicationModel_DataTransfer_DragDrop" ];
          "ApplicationModel_DataTransfer_ShareTarget" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_Email" = [ "ApplicationModel" ];
          "ApplicationModel_Email_DataProvider" = [ "ApplicationModel_Email" ];
          "ApplicationModel_ExtendedExecution" = [ "ApplicationModel" ];
          "ApplicationModel_ExtendedExecution_Foreground" = [ "ApplicationModel_ExtendedExecution" ];
          "ApplicationModel_Holographic" = [ "ApplicationModel" ];
          "ApplicationModel_LockScreen" = [ "ApplicationModel" ];
          "ApplicationModel_Payments" = [ "ApplicationModel" ];
          "ApplicationModel_Payments_Provider" = [ "ApplicationModel_Payments" ];
          "ApplicationModel_Preview" = [ "ApplicationModel" ];
          "ApplicationModel_Preview_Holographic" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_InkWorkspace" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_Notes" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Resources" = [ "ApplicationModel" ];
          "ApplicationModel_Resources_Core" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Resources_Management" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Search" = [ "ApplicationModel" ];
          "ApplicationModel_Search_Core" = [ "ApplicationModel_Search" ];
          "ApplicationModel_Store" = [ "ApplicationModel" ];
          "ApplicationModel_Store_LicenseManagement" = [ "ApplicationModel_Store" ];
          "ApplicationModel_Store_Preview" = [ "ApplicationModel_Store" ];
          "ApplicationModel_Store_Preview_InstallControl" = [ "ApplicationModel_Store_Preview" ];
          "ApplicationModel_UserActivities" = [ "ApplicationModel" ];
          "ApplicationModel_UserActivities_Core" = [ "ApplicationModel_UserActivities" ];
          "ApplicationModel_UserDataAccounts" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataAccounts_Provider" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataAccounts_SystemAccess" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataTasks" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataTasks_DataProvider" = [ "ApplicationModel_UserDataTasks" ];
          "ApplicationModel_VoiceCommands" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet_System" = [ "ApplicationModel_Wallet" ];
          "Data" = [ "Foundation" ];
          "Data_Html" = [ "Data" ];
          "Data_Json" = [ "Data" ];
          "Data_Pdf" = [ "Data" ];
          "Data_Text" = [ "Data" ];
          "Data_Xml" = [ "Data" ];
          "Data_Xml_Dom" = [ "Data_Xml" ];
          "Data_Xml_Xsl" = [ "Data_Xml" ];
          "Devices" = [ "Foundation" ];
          "Devices_Adc" = [ "Devices" ];
          "Devices_Adc_Provider" = [ "Devices_Adc" ];
          "Devices_Background" = [ "Devices" ];
          "Devices_Bluetooth" = [ "Devices" ];
          "Devices_Bluetooth_Advertisement" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Background" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_GenericAttributeProfile" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Rfcomm" = [ "Devices_Bluetooth" ];
          "Devices_Custom" = [ "Devices" ];
          "Devices_Display" = [ "Devices" ];
          "Devices_Display_Core" = [ "Devices_Display" ];
          "Devices_Enumeration" = [ "Devices" ];
          "Devices_Enumeration_Pnp" = [ "Devices_Enumeration" ];
          "Devices_Geolocation" = [ "Devices" ];
          "Devices_Geolocation_Geofencing" = [ "Devices_Geolocation" ];
          "Devices_Geolocation_Provider" = [ "Devices_Geolocation" ];
          "Devices_Gpio" = [ "Devices" ];
          "Devices_Gpio_Provider" = [ "Devices_Gpio" ];
          "Devices_Haptics" = [ "Devices" ];
          "Devices_HumanInterfaceDevice" = [ "Devices" ];
          "Devices_I2c" = [ "Devices" ];
          "Devices_I2c_Provider" = [ "Devices_I2c" ];
          "Devices_Input" = [ "Devices" ];
          "Devices_Input_Preview" = [ "Devices_Input" ];
          "Devices_Lights" = [ "Devices" ];
          "Devices_Lights_Effects" = [ "Devices_Lights" ];
          "Devices_Midi" = [ "Devices" ];
          "Devices_PointOfService" = [ "Devices" ];
          "Devices_PointOfService_Provider" = [ "Devices_PointOfService" ];
          "Devices_Portable" = [ "Devices" ];
          "Devices_Power" = [ "Devices" ];
          "Devices_Printers" = [ "Devices" ];
          "Devices_Printers_Extensions" = [ "Devices_Printers" ];
          "Devices_Pwm" = [ "Devices" ];
          "Devices_Pwm_Provider" = [ "Devices_Pwm" ];
          "Devices_Radios" = [ "Devices" ];
          "Devices_Scanners" = [ "Devices" ];
          "Devices_Sensors" = [ "Devices" ];
          "Devices_Sensors_Custom" = [ "Devices_Sensors" ];
          "Devices_SerialCommunication" = [ "Devices" ];
          "Devices_SmartCards" = [ "Devices" ];
          "Devices_Sms" = [ "Devices" ];
          "Devices_Spi" = [ "Devices" ];
          "Devices_Spi_Provider" = [ "Devices_Spi" ];
          "Devices_Usb" = [ "Devices" ];
          "Devices_WiFi" = [ "Devices" ];
          "Devices_WiFiDirect" = [ "Devices" ];
          "Devices_WiFiDirect_Services" = [ "Devices_WiFiDirect" ];
          "Embedded" = [ "Foundation" ];
          "Embedded_DeviceLockdown" = [ "Embedded" ];
          "Foundation_Collections" = [ "Foundation" ];
          "Foundation_Diagnostics" = [ "Foundation" ];
          "Foundation_Metadata" = [ "Foundation" ];
          "Foundation_Numerics" = [ "Foundation" ];
          "Gaming" = [ "Foundation" ];
          "Gaming_Input" = [ "Gaming" ];
          "Gaming_Input_Custom" = [ "Gaming_Input" ];
          "Gaming_Input_ForceFeedback" = [ "Gaming_Input" ];
          "Gaming_Input_Preview" = [ "Gaming_Input" ];
          "Gaming_Preview" = [ "Gaming" ];
          "Gaming_Preview_GamesEnumeration" = [ "Gaming_Preview" ];
          "Gaming_UI" = [ "Gaming" ];
          "Gaming_XboxLive" = [ "Gaming" ];
          "Gaming_XboxLive_Storage" = [ "Gaming_XboxLive" ];
          "Globalization" = [ "Foundation" ];
          "Globalization_Collation" = [ "Globalization" ];
          "Globalization_DateTimeFormatting" = [ "Globalization" ];
          "Globalization_Fonts" = [ "Globalization" ];
          "Globalization_NumberFormatting" = [ "Globalization" ];
          "Globalization_PhoneNumberFormatting" = [ "Globalization" ];
          "Graphics" = [ "Foundation" ];
          "Graphics_Capture" = [ "Graphics" ];
          "Graphics_DirectX" = [ "Graphics" ];
          "Graphics_DirectX_Direct3D11" = [ "Graphics_DirectX" ];
          "Graphics_Display" = [ "Graphics" ];
          "Graphics_Display_Core" = [ "Graphics_Display" ];
          "Graphics_Effects" = [ "Graphics" ];
          "Graphics_Holographic" = [ "Graphics" ];
          "Graphics_Imaging" = [ "Graphics" ];
          "Graphics_Printing" = [ "Graphics" ];
          "Graphics_Printing3D" = [ "Graphics" ];
          "Graphics_Printing_OptionDetails" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintSupport" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintTicket" = [ "Graphics_Printing" ];
          "Graphics_Printing_Workflow" = [ "Graphics_Printing" ];
          "Management" = [ "Foundation" ];
          "Management_Core" = [ "Management" ];
          "Management_Deployment" = [ "Management" ];
          "Management_Deployment_Preview" = [ "Management_Deployment" ];
          "Management_Policies" = [ "Management" ];
          "Management_Update" = [ "Management" ];
          "Management_Workplace" = [ "Management" ];
          "Media" = [ "Foundation" ];
          "Media_AppBroadcasting" = [ "Media" ];
          "Media_AppRecording" = [ "Media" ];
          "Media_Audio" = [ "Media" ];
          "Media_Capture" = [ "Media" ];
          "Media_Capture_Core" = [ "Media_Capture" ];
          "Media_Capture_Frames" = [ "Media_Capture" ];
          "Media_Casting" = [ "Media" ];
          "Media_ClosedCaptioning" = [ "Media" ];
          "Media_ContentRestrictions" = [ "Media" ];
          "Media_Control" = [ "Media" ];
          "Media_Core" = [ "Media" ];
          "Media_Core_Preview" = [ "Media_Core" ];
          "Media_Devices" = [ "Media" ];
          "Media_Devices_Core" = [ "Media_Devices" ];
          "Media_DialProtocol" = [ "Media" ];
          "Media_Editing" = [ "Media" ];
          "Media_Effects" = [ "Media" ];
          "Media_FaceAnalysis" = [ "Media" ];
          "Media_Import" = [ "Media" ];
          "Media_MediaProperties" = [ "Media" ];
          "Media_Miracast" = [ "Media" ];
          "Media_Ocr" = [ "Media" ];
          "Media_PlayTo" = [ "Media" ];
          "Media_Playback" = [ "Media" ];
          "Media_Playlists" = [ "Media" ];
          "Media_Protection" = [ "Media" ];
          "Media_Protection_PlayReady" = [ "Media_Protection" ];
          "Media_Render" = [ "Media" ];
          "Media_SpeechRecognition" = [ "Media" ];
          "Media_SpeechSynthesis" = [ "Media" ];
          "Media_Streaming" = [ "Media" ];
          "Media_Streaming_Adaptive" = [ "Media_Streaming" ];
          "Media_Transcoding" = [ "Media" ];
          "Networking" = [ "Foundation" ];
          "Networking_BackgroundTransfer" = [ "Networking" ];
          "Networking_Connectivity" = [ "Networking" ];
          "Networking_NetworkOperators" = [ "Networking" ];
          "Networking_Proximity" = [ "Networking" ];
          "Networking_PushNotifications" = [ "Networking" ];
          "Networking_ServiceDiscovery" = [ "Networking" ];
          "Networking_ServiceDiscovery_Dnssd" = [ "Networking_ServiceDiscovery" ];
          "Networking_Sockets" = [ "Networking" ];
          "Networking_Vpn" = [ "Networking" ];
          "Networking_XboxLive" = [ "Networking" ];
          "Perception" = [ "Foundation" ];
          "Perception_Automation" = [ "Perception" ];
          "Perception_Automation_Core" = [ "Perception_Automation" ];
          "Perception_People" = [ "Perception" ];
          "Perception_Spatial" = [ "Perception" ];
          "Perception_Spatial_Preview" = [ "Perception_Spatial" ];
          "Perception_Spatial_Surfaces" = [ "Perception_Spatial" ];
          "Phone" = [ "Foundation" ];
          "Phone_ApplicationModel" = [ "Phone" ];
          "Phone_Devices" = [ "Phone" ];
          "Phone_Devices_Notification" = [ "Phone_Devices" ];
          "Phone_Devices_Power" = [ "Phone_Devices" ];
          "Phone_Management" = [ "Phone" ];
          "Phone_Management_Deployment" = [ "Phone_Management" ];
          "Phone_Media" = [ "Phone" ];
          "Phone_Media_Devices" = [ "Phone_Media" ];
          "Phone_Notification" = [ "Phone" ];
          "Phone_Notification_Management" = [ "Phone_Notification" ];
          "Phone_PersonalInformation" = [ "Phone" ];
          "Phone_PersonalInformation_Provisioning" = [ "Phone_PersonalInformation" ];
          "Phone_Speech" = [ "Phone" ];
          "Phone_Speech_Recognition" = [ "Phone_Speech" ];
          "Phone_StartScreen" = [ "Phone" ];
          "Phone_System" = [ "Phone" ];
          "Phone_System_Power" = [ "Phone_System" ];
          "Phone_System_Profile" = [ "Phone_System" ];
          "Phone_System_UserProfile" = [ "Phone_System" ];
          "Phone_System_UserProfile_GameServices" = [ "Phone_System_UserProfile" ];
          "Phone_System_UserProfile_GameServices_Core" = [ "Phone_System_UserProfile_GameServices" ];
          "Phone_UI" = [ "Phone" ];
          "Phone_UI_Input" = [ "Phone_UI" ];
          "Security" = [ "Foundation" ];
          "Security_Authentication" = [ "Security" ];
          "Security_Authentication_Identity" = [ "Security_Authentication" ];
          "Security_Authentication_Identity_Core" = [ "Security_Authentication_Identity" ];
          "Security_Authentication_OnlineId" = [ "Security_Authentication" ];
          "Security_Authentication_Web" = [ "Security_Authentication" ];
          "Security_Authentication_Web_Core" = [ "Security_Authentication_Web" ];
          "Security_Authentication_Web_Provider" = [ "Security_Authentication_Web" ];
          "Security_Authorization" = [ "Security" ];
          "Security_Authorization_AppCapabilityAccess" = [ "Security_Authorization" ];
          "Security_Credentials" = [ "Security" ];
          "Security_Credentials_UI" = [ "Security_Credentials" ];
          "Security_Cryptography" = [ "Security" ];
          "Security_Cryptography_Certificates" = [ "Security_Cryptography" ];
          "Security_Cryptography_Core" = [ "Security_Cryptography" ];
          "Security_Cryptography_DataProtection" = [ "Security_Cryptography" ];
          "Security_DataProtection" = [ "Security" ];
          "Security_EnterpriseData" = [ "Security" ];
          "Security_ExchangeActiveSyncProvisioning" = [ "Security" ];
          "Security_Isolation" = [ "Security" ];
          "Services" = [ "Foundation" ];
          "Services_Maps" = [ "Services" ];
          "Services_Maps_Guidance" = [ "Services_Maps" ];
          "Services_Maps_LocalSearch" = [ "Services_Maps" ];
          "Services_Maps_OfflineMaps" = [ "Services_Maps" ];
          "Services_Store" = [ "Services" ];
          "Services_TargetedContent" = [ "Services" ];
          "Storage" = [ "Foundation" ];
          "Storage_AccessCache" = [ "Storage" ];
          "Storage_BulkAccess" = [ "Storage" ];
          "Storage_Compression" = [ "Storage" ];
          "Storage_FileProperties" = [ "Storage" ];
          "Storage_Pickers" = [ "Storage" ];
          "Storage_Pickers_Provider" = [ "Storage_Pickers" ];
          "Storage_Provider" = [ "Storage" ];
          "Storage_Search" = [ "Storage" ];
          "Storage_Streams" = [ "Storage" ];
          "System" = [ "Foundation" ];
          "System_Diagnostics" = [ "System" ];
          "System_Diagnostics_DevicePortal" = [ "System_Diagnostics" ];
          "System_Diagnostics_Telemetry" = [ "System_Diagnostics" ];
          "System_Diagnostics_TraceReporting" = [ "System_Diagnostics" ];
          "System_Display" = [ "System" ];
          "System_Implementation" = [ "System" ];
          "System_Implementation_FileExplorer" = [ "System_Implementation" ];
          "System_Inventory" = [ "System" ];
          "System_Power" = [ "System" ];
          "System_Profile" = [ "System" ];
          "System_Profile_SystemManufacturers" = [ "System_Profile" ];
          "System_RemoteDesktop" = [ "System" ];
          "System_RemoteDesktop_Input" = [ "System_RemoteDesktop" ];
          "System_RemoteDesktop_Provider" = [ "System_RemoteDesktop" ];
          "System_RemoteSystems" = [ "System" ];
          "System_Threading" = [ "System" ];
          "System_Threading_Core" = [ "System_Threading" ];
          "System_Update" = [ "System" ];
          "System_UserProfile" = [ "System" ];
          "UI" = [ "Foundation" ];
          "UI_Accessibility" = [ "UI" ];
          "UI_ApplicationSettings" = [ "UI" ];
          "UI_Composition" = [ "UI" ];
          "UI_Composition_Core" = [ "UI_Composition" ];
          "UI_Composition_Desktop" = [ "UI_Composition" ];
          "UI_Composition_Diagnostics" = [ "UI_Composition" ];
          "UI_Composition_Effects" = [ "UI_Composition" ];
          "UI_Composition_Interactions" = [ "UI_Composition" ];
          "UI_Composition_Scenes" = [ "UI_Composition" ];
          "UI_Core" = [ "UI" ];
          "UI_Core_AnimationMetrics" = [ "UI_Core" ];
          "UI_Core_Preview" = [ "UI_Core" ];
          "UI_Input" = [ "UI" ];
          "UI_Input_Core" = [ "UI_Input" ];
          "UI_Input_Inking" = [ "UI_Input" ];
          "UI_Input_Inking_Analysis" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Core" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Preview" = [ "UI_Input_Inking" ];
          "UI_Input_Preview" = [ "UI_Input" ];
          "UI_Input_Preview_Injection" = [ "UI_Input_Preview" ];
          "UI_Input_Spatial" = [ "UI_Input" ];
          "UI_Notifications" = [ "UI" ];
          "UI_Notifications_Management" = [ "UI_Notifications" ];
          "UI_Notifications_Preview" = [ "UI_Notifications" ];
          "UI_Popups" = [ "UI" ];
          "UI_Shell" = [ "UI" ];
          "UI_StartScreen" = [ "UI" ];
          "UI_Text" = [ "UI" ];
          "UI_Text_Core" = [ "UI_Text" ];
          "UI_UIAutomation" = [ "UI" ];
          "UI_UIAutomation_Core" = [ "UI_UIAutomation" ];
          "UI_ViewManagement" = [ "UI" ];
          "UI_ViewManagement_Core" = [ "UI_ViewManagement" ];
          "UI_WebUI" = [ "UI" ];
          "UI_WebUI_Core" = [ "UI_WebUI" ];
          "UI_WindowManagement" = [ "UI" ];
          "UI_WindowManagement_Preview" = [ "UI_WindowManagement" ];
          "Wdk" = [ "Win32_Foundation" ];
          "Wdk_Devices" = [ "Wdk" ];
          "Wdk_Devices_HumanInterfaceDevice" = [ "Wdk_Devices" ];
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_NetworkManagement" = [ "Wdk" ];
          "Wdk_NetworkManagement_Ndis" = [ "Wdk_NetworkManagement" ];
          "Wdk_NetworkManagement_WindowsFilteringPlatform" = [ "Wdk_NetworkManagement" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Web" = [ "Foundation" ];
          "Web_AtomPub" = [ "Web" ];
          "Web_Http" = [ "Web" ];
          "Web_Http_Diagnostics" = [ "Web_Http" ];
          "Web_Http_Filters" = [ "Web_Http" ];
          "Web_Http_Headers" = [ "Web_Http" ];
          "Web_Syndication" = [ "Web" ];
          "Web_UI" = [ "Web" ];
          "Web_UI_Interop" = [ "Web_UI" ];
          "Win32" = [ "Win32_Foundation" ];
          "Win32_AI" = [ "Win32" ];
          "Win32_AI_MachineLearning" = [ "Win32_AI" ];
          "Win32_AI_MachineLearning_DirectML" = [ "Win32_AI_MachineLearning" ];
          "Win32_AI_MachineLearning_WinML" = [ "Win32_AI_MachineLearning" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_CompositionSwapchain" = [ "Win32_Graphics" ];
          "Win32_Graphics_DXCore" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D_Common" = [ "Win32_Graphics_Direct2D" ];
          "Win32_Graphics_Direct3D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D10" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D_Dxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_Direct3D_Fxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_DirectComposition" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectDraw" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectManipulation" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectWrite" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi_Common" = [ "Win32_Graphics_Dxgi" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging_D2D" = [ "Win32_Graphics_Imaging" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectSound" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DirectShow" = [ "Win32_Media" ];
          "Win32_Media_DirectShow_Tv" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DirectShow_Xml" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaFoundation" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_PictureAcquisition" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ClrProfiling" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_ActiveScript" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_TraceLogging" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_SideShow" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_TransactionServer" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WinRT" = [ "Win32_System" ];
          "Win32_System_WinRT_AllJoyn" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Composition" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_CoreInputView" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Direct3D11" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Display" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics_Capture" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Direct2D" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Imaging" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Holographic" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Isolation" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_ML" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Media" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Metadata" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Pdf" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Printing" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Shell" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Storage" = [ "Win32_System_WinRT" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
          "implement" = [ "windows-implement" "windows-interface" "windows-core/implement" ];
          "windows-implement" = [ "dep:windows-implement" ];
          "windows-interface" = [ "dep:windows-interface" ];
        };
        resolvedDefaultFeatures = [ "Devices" "Devices_Power" "Foundation" "Foundation_Collections" "Gaming" "Gaming_Input" "Gaming_Input_ForceFeedback" "System" "System_Power" "Win32" "Win32_Devices" "Win32_Devices_Properties" "Win32_Foundation" "Win32_Media" "Win32_Media_Audio" "Win32_Media_KernelStreaming" "Win32_Media_Multimedia" "Win32_Security" "Win32_System" "Win32_System_Com" "Win32_System_Com_StructuredStorage" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_Variant" "Win32_UI" "Win32_UI_Shell" "Win32_UI_Shell_PropertiesSystem" "default" ];
      };
      "windows-core 0.52.0" = rec {
        crateName = "windows-core";
        version = "0.52.0";
        edition = "2021";
        sha256 = "1nc3qv7sy24x0nlnb32f7alzpd6f72l4p24vl65vydbyil669ark";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.5";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "windows-core 0.54.0" = rec {
        crateName = "windows-core";
        version = "0.54.0";
        edition = "2021";
        sha256 = "0r8x2sgl4qq1h23ldf4z7cj213k0bz7479m8a156h79mi6f1nrhj";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-result";
            packageId = "windows-result";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.5";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "windows-implement" = rec {
        crateName = "windows-implement";
        version = "0.48.0";
        edition = "2018";
        sha256 = "1764n853zd7bb0wn94i0qxfs6kdy7wrz7v9qhdn7x7hvk64fabjy";
        procMacro = true;
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            usesDefaultFeatures = false;
            features = [ "parsing" "proc-macro" "printing" "full" "derive" ];
          }
        ];

      };
      "windows-interface" = rec {
        crateName = "windows-interface";
        version = "0.48.0";
        edition = "2018";
        sha256 = "1iqcilw0hfyzwhk12xfmcy40r10406sgf4xmdansijlv1kr8vyz6";
        procMacro = true;
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            usesDefaultFeatures = false;
            features = [ "parsing" "proc-macro" "printing" "full" "derive" ];
          }
        ];

      };
      "windows-result" = rec {
        crateName = "windows-result";
        version = "0.1.1";
        edition = "2021";
        sha256 = "0fw1j5birb2nhp2s2wcg0fwyv7hbvp548bld1mh2xn3jrjlhv7vl";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.5";
          }
        ];

      };
      "windows-sys 0.45.0" = rec {
        crateName = "windows-sys";
        version = "0.45.0";
        edition = "2018";
        sha256 = "1l36bcqm4g89pknfp8r9rl1w4bn017q6a8qlx8viv0xjxzjkna3m";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.42.2";
            target = { target, features }: (!(target."windows_raw_dylib" or false));
          }
        ];
        features = {
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Globalization" "default" ];
      };
      "windows-sys 0.48.0" = rec {
        crateName = "windows-sys";
        version = "0.48.0";
        edition = "2018";
        sha256 = "1aan23v5gs7gya1lc46hqn9mdh8yph3fhxmhxlw36pn6pqc28zb7";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.48.5";
          }
        ];
        features = {
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ClrProfiling" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_ActiveScript" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Devices" "Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_NetworkManagement" "Win32_NetworkManagement_IpHelper" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Com" "Win32_System_Com_StructuredStorage" "Win32_System_IO" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_Pipes" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging" "default" ];
      };
      "windows-sys 0.52.0" = rec {
        crateName = "windows-sys";
        version = "0.52.0";
        edition = "2021";
        sha256 = "0gd3v4ji88490zgb6b5mq5zgbvwv7zx1ibn8v3x83rwcdbryaar8";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.5";
          }
        ];
        features = {
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Wdk" "Wdk_Foundation" "Wdk_Storage" "Wdk_Storage_FileSystem" "Win32" "Win32_Foundation" "Win32_NetworkManagement" "Win32_NetworkManagement_IpHelper" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Console" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_IO" "Win32_System_LibraryLoader" "Win32_System_SystemInformation" "Win32_System_Threading" "Win32_System_WindowsProgramming" "default" ];
      };
      "windows-targets 0.42.2" = rec {
        crateName = "windows-targets";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0wfhnib2fisxlx8c507dbmh97kgij4r6kcxdi0f9nk6l1k080lcf";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-pc-windows-msvc");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-uwp-windows-msvc");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-pc-windows-gnu");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-uwp-windows-gnu");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-pc-windows-msvc");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-uwp-windows-msvc");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-gnu");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-uwp-windows-gnu");
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-msvc");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.42.2";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-uwp-windows-msvc");
          }
        ];

      };
      "windows-targets 0.48.5" = rec {
        crateName = "windows-targets";
        version = "0.48.5";
        edition = "2018";
        sha256 = "034ljxqshifs1lan89xwpcy1hp0lhdh4b5n0d2z4fwjx2piacbws";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.48.5";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.48.5";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.48.5";
            target = { target, features }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.48.5";
            target = { target, features }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.48.5";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.48.5";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.48.5";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows-targets 0.52.5" = rec {
        crateName = "windows-targets";
        version = "0.52.5";
        edition = "2021";
        sha256 = "1sz7jrnkygmmlj1ia8fk85wbyil450kq5qkh5qh9sh2rcnj161vg";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.52.5";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.52.5";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.52.5";
            target = { target, features }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnullvm";
            packageId = "windows_i686_gnullvm";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "i686-pc-windows-gnullvm");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.52.5";
            target = { target, features }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.52.5";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.52.5";
            target = { target, features }: (pkgs.rust.lib.toRustTarget stdenv.hostPlatform == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.52.5";
            target = { target, features }: ((("x86_64" == target."arch" or null) || ("arm64ec" == target."arch" or null)) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows_aarch64_gnullvm 0.42.2" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.42.2";
        edition = "2018";
        sha256 = "1y4q0qmvl0lvp7syxvfykafvmwal5hrjb4fmv04bqs0bawc52yjr";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_gnullvm 0.48.5" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1n05v7qblg1ci3i567inc7xrkmywczxrs1z3lj3rkkxw18py6f1b";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_gnullvm 0.52.5" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.52.5";
        edition = "2021";
        sha256 = "0qrjimbj67nnyn7zqy15mzzmqg0mn5gsr2yciqjxm3cb3vbyx23h";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.42.2" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0hsdikjl5sa1fva5qskpwlxzpc5q9l909fpl1w6yy1hglrj8i3p0";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.48.5" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1g5l4ry968p73g6bg6jgyvy9lb8fyhcs54067yzxpcpkf44k2dfw";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.52.5" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.52.5";
        edition = "2021";
        sha256 = "1dmga8kqlmln2ibckk6mxc9n59vdg8ziqa2zr8awcl720hazv1cr";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.42.2" = rec {
        crateName = "windows_i686_gnu";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0kx866dfrby88lqs9v1vgmrkk1z6af9lhaghh5maj7d4imyr47f6";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.48.5" = rec {
        crateName = "windows_i686_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0gklnglwd9ilqx7ac3cn8hbhkraqisd0n83jxzf9837nvvkiand7";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.52.5" = rec {
        crateName = "windows_i686_gnu";
        version = "0.52.5";
        edition = "2021";
        sha256 = "0w4np3l6qwlra9s2xpflqrs60qk1pz6ahhn91rr74lvdy4y0gfl8";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnullvm" = rec {
        crateName = "windows_i686_gnullvm";
        version = "0.52.5";
        edition = "2021";
        sha256 = "1s9f4gff0cixd86mw3n63rpmsm4pmr4ffndl6s7qa2h35492dx47";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.42.2" = rec {
        crateName = "windows_i686_msvc";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0q0h9m2aq1pygc199pa5jgc952qhcnf0zn688454i7v4xjv41n24";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.48.5" = rec {
        crateName = "windows_i686_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "01m4rik437dl9rdf0ndnm2syh10hizvq0dajdkv2fjqcywrw4mcg";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.52.5" = rec {
        crateName = "windows_i686_msvc";
        version = "0.52.5";
        edition = "2021";
        sha256 = "1gw7fklxywgpnwbwg43alb4hm0qjmx72hqrlwy5nanrxs7rjng6v";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.42.2" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0dnbf2xnp3xrvy8v9mgs3var4zq9v9yh9kv79035rdgyp2w15scd";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.48.5" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "13kiqqcvz2vnyxzydjh73hwgigsdr2z1xpzx313kxll34nyhmm2k";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.52.5" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.52.5";
        edition = "2021";
        sha256 = "1n8p2mcf3lw6300k77a0knksssmgwb9hynl793mhkzyydgvlchjf";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.42.2" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.42.2";
        edition = "2018";
        sha256 = "18wl9r8qbsl475j39zvawlidp1bsbinliwfymr43fibdld31pm16";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.48.5" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1k24810wfbgz8k48c2yknqjmiigmql6kk3knmddkv8k8g1v54yqb";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.52.5" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.52.5";
        edition = "2021";
        sha256 = "15n56jrh4s5bz66zimavr1rmcaw6wa306myrvmbc6rydhbj9h8l5";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.42.2" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.42.2";
        edition = "2018";
        sha256 = "1w5r0q0yzx827d10dpjza2ww0j8iajqhmb54s735hhaj66imvv4s";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.48.5" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0f4mdp895kkjh9zv8dxvn4pc10xr7839lf5pa9l0193i2pkgr57d";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.52.5" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.52.5";
        edition = "2021";
        sha256 = "1w1bn24ap8dp9i85s8mlg8cim2bl2368bd6qyvm0xzqvzmdpxi5y";
        authors = [
          "Microsoft"
        ];

      };
      "winit" = rec {
        crateName = "winit";
        version = "0.29.15";
        edition = "2021";
        sha256 = "1jp5j96hcr6xif7asgck522791fqmlmhd3wwy3x5fmk3babasn8d";
        authors = [
          "The winit contributors"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            optional = true;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
            features = [ "no-rng" ];
          }
          {
            name = "android-activity";
            packageId = "android-activity";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "atomic-waker";
            packageId = "atomic-waker";
            target = { target, features }: (builtins.elem "wasm" target."family");
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
          }
          {
            name = "calloop";
            packageId = "calloop";
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
            target = { target, features }: (("ios" == target."os" or null) || ("macos" == target."os" or null));
          }
          {
            name = "core-graphics";
            packageId = "core-graphics";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "cursor-icon";
            packageId = "cursor-icon";
          }
          {
            name = "icrate";
            packageId = "icrate";
            target = { target, features }: ("ios" == target."os" or null);
            features = [ "dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSSet" ];
          }
          {
            name = "icrate";
            packageId = "icrate";
            target = { target, features }: ("macos" == target."os" or null);
            features = [ "dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSAttributedString" "Foundation_NSMutableAttributedString" "Foundation_NSData" "Foundation_NSDictionary" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSNumber" ];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: (builtins.elem "wasm" target."family");
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "memmap2";
            packageId = "memmap2";
            optional = true;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
          }
          {
            name = "ndk";
            packageId = "ndk";
            usesDefaultFeatures = false;
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "ndk-sys";
            packageId = "ndk-sys";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "objc2";
            packageId = "objc2 0.4.1";
            target = { target, features }: (("ios" == target."os" or null) || ("macos" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "orbclient";
            packageId = "orbclient";
            usesDefaultFeatures = false;
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            optional = true;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle";
            rename = "rwh_06";
            optional = true;
            features = [ "std" ];
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.3.5";
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.34";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
            features = [ "std" "system" "thread" "process" ];
          }
          {
            name = "sctk-adwaita";
            packageId = "sctk-adwaita";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
          }
          {
            name = "smithay-client-toolkit";
            packageId = "smithay-client-toolkit";
            rename = "sctk";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
            features = [ "calloop" ];
          }
          {
            name = "smol_str";
            packageId = "smol_str";
          }
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
            target = { target, features }: ("windows" == target."os" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: (builtins.elem "wasm" target."family");
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: (builtins.elem "wasm" target."family");
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
            features = [ "client_system" ];
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            optional = true;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
          }
          {
            name = "wayland-protocols";
            packageId = "wayland-protocols";
            optional = true;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
            features = [ "staging" ];
          }
          {
            name = "wayland-protocols-plasma";
            packageId = "wayland-protocols-plasma";
            optional = true;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
            features = [ "client" ];
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            rename = "web_sys";
            target = { target, features }: (builtins.elem "wasm" target."family");
            features = [ "AbortController" "AbortSignal" "console" "CssStyleDeclaration" "Document" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "IntersectionObserver" "IntersectionObserverEntry" "KeyboardEvent" "MediaQueryList" "MessageChannel" "MessagePort" "Node" "PageTransitionEvent" "PointerEvent" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "VisibilityState" "Window" "WheelEvent" ];
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = { target, features }: (builtins.elem "wasm" target."family");
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging" ];
          }
          {
            name = "x11-dl";
            packageId = "x11-dl";
            optional = true;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
          }
          {
            name = "x11rb";
            packageId = "x11rb";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
            features = [ "allow-unsafe-code" "dl-libxcb" "randr" "resource_manager" "xinput" "xkb" ];
          }
          {
            name = "xkbcommon-dl";
            packageId = "xkbcommon-dl";
            target = { target, features }: ((target."unix" or false) && (!(("redox" == target."os" or null) || (builtins.elem "wasm" target."family") || ("android" == target."os" or null) || ("ios" == target."os" or null) || ("macos" == target."os" or null))));
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        devDependencies = [
          {
            name = "web-sys";
            packageId = "web-sys";
            target = {target, features}: (builtins.elem "wasm" target."family");
            features = [ "CanvasRenderingContext2d" ];
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "android-game-activity" = [ "android-activity/game-activity" ];
          "android-native-activity" = [ "android-activity/native-activity" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "rwh_06" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita" ];
          "memmap2" = [ "dep:memmap2" ];
          "mint" = [ "dep:mint" ];
          "percent-encoding" = [ "dep:percent-encoding" ];
          "rwh_04" = [ "dep:rwh_04" "ndk/rwh_04" ];
          "rwh_05" = [ "dep:rwh_05" "ndk/rwh_05" ];
          "rwh_06" = [ "dep:rwh_06" "ndk/rwh_06" ];
          "sctk" = [ "dep:sctk" ];
          "sctk-adwaita" = [ "dep:sctk-adwaita" ];
          "serde" = [ "dep:serde" "cursor-icon/serde" "smol_str/serde" ];
          "wayland" = [ "wayland-client" "wayland-backend" "wayland-protocols" "wayland-protocols-plasma" "sctk" "ahash" "memmap2" ];
          "wayland-backend" = [ "dep:wayland-backend" ];
          "wayland-client" = [ "dep:wayland-client" ];
          "wayland-csd-adwaita" = [ "sctk-adwaita" "sctk-adwaita/ab_glyph" ];
          "wayland-csd-adwaita-crossfont" = [ "sctk-adwaita" "sctk-adwaita/crossfont" ];
          "wayland-csd-adwaita-notitle" = [ "sctk-adwaita" ];
          "wayland-dlopen" = [ "wayland-backend/dlopen" ];
          "wayland-protocols" = [ "dep:wayland-protocols" ];
          "wayland-protocols-plasma" = [ "dep:wayland-protocols-plasma" ];
          "x11" = [ "x11-dl" "bytemuck" "percent-encoding" "xkbcommon-dl/x11" "x11rb" ];
          "x11-dl" = [ "dep:x11-dl" ];
          "x11rb" = [ "dep:x11rb" ];
        };
        resolvedDefaultFeatures = [ "ahash" "android-native-activity" "bytemuck" "memmap2" "percent-encoding" "rwh_06" "sctk" "sctk-adwaita" "wayland" "wayland-backend" "wayland-client" "wayland-csd-adwaita" "wayland-protocols" "wayland-protocols-plasma" "x11" "x11-dl" "x11rb" ];
      };
      "winnow 0.5.40" = rec {
        crateName = "winnow";
        version = "0.5.40";
        edition = "2021";
        sha256 = "0xk8maai7gyxda673mmw3pj1hdizy5fpi7287vaywykkk19sk4zm";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = [ "dep:anstream" "dep:anstyle" "dep:is-terminal" "dep:terminal_size" ];
          "default" = [ "std" ];
          "simd" = [ "dep:memchr" ];
          "std" = [ "alloc" "memchr?/std" ];
          "unstable-doc" = [ "alloc" "std" "simd" "unstable-recover" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "winnow 0.6.8" = rec {
        crateName = "winnow";
        version = "0.6.8";
        edition = "2021";
        sha256 = "13b1kxlgqglp4787nrn4p4bpz4xfxn096v437sr73056jyf2xif3";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = [ "std" "dep:anstream" "dep:anstyle" "dep:is-terminal" "dep:terminal_size" ];
          "default" = [ "std" ];
          "simd" = [ "dep:memchr" ];
          "std" = [ "alloc" "memchr?/std" ];
          "unstable-doc" = [ "alloc" "std" "simd" "unstable-recover" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "x11-dl" = rec {
        crateName = "x11-dl";
        version = "2.21.0";
        edition = "2021";
        sha256 = "0vsiq62xpcfm0kn9zjw5c9iycvccxl22jya8wnk18lyxzqj5jwrq";
        authors = [
          "daggerbot <daggerbot@gmail.com>"
          "Erle Pereira <erle@erlepereira.com>"
          "AltF02 <contact@altf2.dev>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];

      };
      "x11rb" = rec {
        crateName = "x11rb";
        version = "0.13.1";
        edition = "2021";
        sha256 = "04jyfm0xmc538v09pzsyr2w801yadsgvyl2p0p76hzzffg5gz4ax";
        authors = [
          "Uli Schlachter <psychon@znc.in>"
          "Eduardo Sánchez Muñoz <eduardosm-dev@e64.io>"
          "notgull <jtnunley01@gmail.com>"
        ];
        dependencies = [
          {
            name = "as-raw-xcb-connection";
            packageId = "as-raw-xcb-connection";
            optional = true;
          }
          {
            name = "gethostname";
            packageId = "gethostname";
            target = { target, features }: (!(target."unix" or false));
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
          }
          {
            name = "libloading";
            packageId = "libloading 0.8.3";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.34";
            usesDefaultFeatures = false;
            features = [ "std" "event" "fs" "net" "system" ];
          }
          {
            name = "x11rb-protocol";
            packageId = "x11rb-protocol";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "gethostname";
            packageId = "gethostname";
          }
        ];
        features = {
          "all-extensions" = [ "x11rb-protocol/all-extensions" "composite" "damage" "dbe" "dpms" "dri2" "dri3" "glx" "present" "randr" "record" "render" "res" "screensaver" "shape" "shm" "sync" "xevie" "xf86dri" "xf86vidmode" "xfixes" "xinerama" "xinput" "xkb" "xprint" "xselinux" "xtest" "xv" "xvmc" ];
          "allow-unsafe-code" = [ "libc" "as-raw-xcb-connection" ];
          "as-raw-xcb-connection" = [ "dep:as-raw-xcb-connection" ];
          "composite" = [ "x11rb-protocol/composite" "xfixes" ];
          "cursor" = [ "render" "resource_manager" ];
          "damage" = [ "x11rb-protocol/damage" "xfixes" ];
          "dbe" = [ "x11rb-protocol/dbe" ];
          "dl-libxcb" = [ "allow-unsafe-code" "libloading" "once_cell" ];
          "dpms" = [ "x11rb-protocol/dpms" ];
          "dri2" = [ "x11rb-protocol/dri2" ];
          "dri3" = [ "x11rb-protocol/dri3" ];
          "extra-traits" = [ "x11rb-protocol/extra-traits" ];
          "glx" = [ "x11rb-protocol/glx" ];
          "libc" = [ "dep:libc" ];
          "libloading" = [ "dep:libloading" ];
          "once_cell" = [ "dep:once_cell" ];
          "present" = [ "x11rb-protocol/present" "randr" "xfixes" "sync" ];
          "randr" = [ "x11rb-protocol/randr" "render" ];
          "record" = [ "x11rb-protocol/record" ];
          "render" = [ "x11rb-protocol/render" ];
          "request-parsing" = [ "x11rb-protocol/request-parsing" ];
          "res" = [ "x11rb-protocol/res" ];
          "resource_manager" = [ "x11rb-protocol/resource_manager" ];
          "screensaver" = [ "x11rb-protocol/screensaver" ];
          "shape" = [ "x11rb-protocol/shape" ];
          "shm" = [ "x11rb-protocol/shm" ];
          "sync" = [ "x11rb-protocol/sync" ];
          "tracing" = [ "dep:tracing" ];
          "xevie" = [ "x11rb-protocol/xevie" ];
          "xf86dri" = [ "x11rb-protocol/xf86dri" ];
          "xf86vidmode" = [ "x11rb-protocol/xf86vidmode" ];
          "xfixes" = [ "x11rb-protocol/xfixes" "render" "shape" ];
          "xinerama" = [ "x11rb-protocol/xinerama" ];
          "xinput" = [ "x11rb-protocol/xinput" "xfixes" ];
          "xkb" = [ "x11rb-protocol/xkb" ];
          "xprint" = [ "x11rb-protocol/xprint" ];
          "xselinux" = [ "x11rb-protocol/xselinux" ];
          "xtest" = [ "x11rb-protocol/xtest" ];
          "xv" = [ "x11rb-protocol/xv" "shm" ];
          "xvmc" = [ "x11rb-protocol/xvmc" "xv" ];
        };
        resolvedDefaultFeatures = [ "allow-unsafe-code" "as-raw-xcb-connection" "dl-libxcb" "libc" "libloading" "once_cell" "randr" "render" "resource_manager" "shape" "xfixes" "xinput" "xkb" ];
      };
      "x11rb-protocol" = rec {
        crateName = "x11rb-protocol";
        version = "0.13.1";
        edition = "2021";
        sha256 = "0gfbxf2k7kbk577j3rjhfx7hm70kmwln6da7xyc4l2za0d2pq47c";
        authors = [
          "Uli Schlachter <psychon@znc.in>"
          "Eduardo Sánchez Muñoz <eduardosm-dev@e64.io>"
          "notgull <jtnunley01@gmail.com>"
        ];
        features = {
          "all-extensions" = [ "composite" "damage" "dbe" "dpms" "dri2" "dri3" "glx" "present" "randr" "record" "render" "res" "screensaver" "shape" "shm" "sync" "xevie" "xf86dri" "xf86vidmode" "xfixes" "xinerama" "xinput" "xkb" "xprint" "xselinux" "xtest" "xv" "xvmc" ];
          "composite" = [ "xfixes" ];
          "damage" = [ "xfixes" ];
          "default" = [ "std" ];
          "present" = [ "randr" "xfixes" "sync" ];
          "randr" = [ "render" ];
          "resource_manager" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "xfixes" = [ "render" "shape" ];
          "xinput" = [ "xfixes" ];
          "xv" = [ "shm" ];
          "xvmc" = [ "xv" ];
        };
        resolvedDefaultFeatures = [ "randr" "render" "resource_manager" "shape" "std" "xfixes" "xinput" "xkb" ];
      };
      "xcursor" = rec {
        crateName = "xcursor";
        version = "0.3.5";
        edition = "2018";
        sha256 = "0499ff2gy9hfb9dvndn5zyc7gzz9lhc5fly3s3yfsiak99xws33a";
        authors = [
          "Samuele Esposito"
        ];

      };
      "xdg-home" = rec {
        crateName = "xdg-home";
        version = "1.1.0";
        edition = "2021";
        sha256 = "13mkcfgngnc1fpdg5737hvhjkp95bc9w2ngqdjnri0ybqcjs7r91";
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "combaseapi" "knownfolders" "shlobj" "winerror" ];
          }
        ];

      };
      "xi-unicode" = rec {
        crateName = "xi-unicode";
        version = "0.3.0";
        edition = "2018";
        sha256 = "12mvjgrhr7557cib69wm4q5s4srba27pg2df9l1zihrxgnbh0wx6";
        authors = [
          "Raph Levien <raph.levien@gmail.com>"
        ];

      };
      "xkbcommon-dl" = rec {
        crateName = "xkbcommon-dl";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1iai0r3b5skd9vbr8z5b0qixiz8jblzfm778ddm8ba596a0dwffh";
        authors = [
          "Francesca Frangipane <francesca@comfysoft.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.5.0";
          }
          {
            name = "dlib";
            packageId = "dlib";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "xkeysym";
            packageId = "xkeysym";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "x11" ];
      };
      "xkeysym" = rec {
        crateName = "xkeysym";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0886dn1rlkiazcp5n6ayqfg0ibpiny62dlbiyr9v4l32nxl8wjh5";
        authors = [
          "John Nunley <jtnunley01@gmail.com>"
        ];
        features = {
          "bytemuck" = [ "dep:bytemuck" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "xml-rs" = rec {
        crateName = "xml-rs";
        version = "0.8.20";
        edition = "2021";
        crateBin = [];
        sha256 = "14s1czpj83zhgr4pizxa4j07layw9wmlqhkq0k3wz5q5ixwph6br";
        libName = "xml";
        authors = [
          "Vladimir Matveev <vmatveev@citrine.cc>"
        ];

      };
      "xshell" = rec {
        crateName = "xshell";
        version = "0.2.6";
        edition = "2021";
        sha256 = "0dv4igym5whcr8fws0afmhq414a1c38x7a2ln38yyfg7xa3apc3d";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        dependencies = [
          {
            name = "xshell-macros";
            packageId = "xshell-macros";
          }
        ];

      };
      "xshell-macros" = rec {
        crateName = "xshell-macros";
        version = "0.2.6";
        edition = "2021";
        sha256 = "0lnqicgd9r2mh8p9yz4yidiskip9cp3wqfg4dvqf4xpc7272whlx";
        procMacro = true;
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];

      };
      "zbus" = rec {
        crateName = "zbus";
        version = "3.15.2";
        edition = "2018";
        sha256 = "1ri5gklhh3kl9gywym95679xs7n3sw2j3ky80jcd8siacc5ifpb7";
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "async-broadcast";
            packageId = "async-broadcast";
          }
          {
            name = "async-executor";
            packageId = "async-executor";
            optional = true;
          }
          {
            name = "async-fs";
            packageId = "async-fs 1.6.0";
            optional = true;
          }
          {
            name = "async-io";
            packageId = "async-io 1.13.0";
            optional = true;
          }
          {
            name = "async-lock";
            packageId = "async-lock 2.8.0";
            optional = true;
          }
          {
            name = "async-process";
            packageId = "async-process";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "async-recursion";
            packageId = "async-recursion";
          }
          {
            name = "async-task";
            packageId = "async-task";
            optional = true;
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "blocking";
            packageId = "blocking";
            optional = true;
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "derivative";
            packageId = "derivative";
          }
          {
            name = "enumflags2";
            packageId = "enumflags2";
            features = [ "serde" ];
          }
          {
            name = "event-listener";
            packageId = "event-listener 2.5.3";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "sink" "std" ];
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "nix";
            packageId = "nix 0.26.4";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
            features = [ "socket" "uio" "user" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "ordered-stream";
            packageId = "ordered-stream";
          }
          {
            name = "rand";
            packageId = "rand";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_repr";
            packageId = "serde_repr";
          }
          {
            name = "sha1";
            packageId = "sha1";
            features = [ "std" ];
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "uds_windows";
            packageId = "uds_windows";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "handleapi" "iphlpapi" "memoryapi" "processthreadsapi" "sddl" "securitybaseapi" "synchapi" "tcpmib" "winbase" "winerror" "winsock2" ];
          }
          {
            name = "xdg-home";
            packageId = "xdg-home";
          }
          {
            name = "zbus_macros";
            packageId = "zbus_macros";
          }
          {
            name = "zbus_names";
            packageId = "zbus_names";
          }
          {
            name = "zvariant";
            packageId = "zvariant";
            usesDefaultFeatures = false;
            features = [ "enumflags2" ];
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
          }
        ];
        features = {
          "async-executor" = [ "dep:async-executor" ];
          "async-fs" = [ "dep:async-fs" ];
          "async-io" = [ "dep:async-io" "async-executor" "async-task" "async-lock" "async-fs" "blocking" "futures-util/io" ];
          "async-lock" = [ "dep:async-lock" ];
          "async-task" = [ "dep:async-task" ];
          "blocking" = [ "dep:blocking" ];
          "chrono" = [ "zvariant/chrono" ];
          "default" = [ "async-io" ];
          "gvariant" = [ "zvariant/gvariant" ];
          "quick-xml" = [ "dep:quick-xml" ];
          "serde-xml-rs" = [ "dep:serde-xml-rs" ];
          "time" = [ "zvariant/time" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-vsock" = [ "dep:tokio-vsock" "tokio" ];
          "url" = [ "zvariant/url" ];
          "uuid" = [ "zvariant/uuid" ];
          "vsock" = [ "dep:vsock" "dep:async-io" ];
          "xml" = [ "serde-xml-rs" ];
        };
        resolvedDefaultFeatures = [ "async-executor" "async-fs" "async-io" "async-lock" "async-task" "blocking" ];
      };
      "zbus_macros" = rec {
        crateName = "zbus_macros";
        version = "3.15.2";
        edition = "2018";
        sha256 = "19g0d7d4b8l8ycw498sz8pwkplv300j31i9hnihq0zl81xxljcbi";
        procMacro = true;
        authors = [
          "Marc-André Lureau <marcandre.lureau@redhat.com>"
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 1.3.1";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "extra-traits" "fold" "full" ];
          }
          {
            name = "zvariant_utils";
            packageId = "zvariant_utils";
          }
        ];

      };
      "zbus_names" = rec {
        crateName = "zbus_names";
        version = "2.6.1";
        edition = "2018";
        sha256 = "13achs6jbrp4l0jy5m6nn7v89clfgb63qhldkg5ddgjh6y6p6za3";
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "zvariant";
            packageId = "zvariant";
            usesDefaultFeatures = false;
            features = [ "enumflags2" ];
          }
        ];

      };
      "zerocopy" = rec {
        crateName = "zerocopy";
        version = "0.7.34";
        edition = "2018";
        sha256 = "11xhrwixm78m6ca1jdxf584wdwvpgg7q00vg21fhwl0psvyf71xf";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
        ];
        dependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            optional = true;
          }
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
          }
        ];
        features = {
          "__internal_use_only_features_that_work_on_stable" = [ "alloc" "derive" "simd" ];
          "byteorder" = [ "dep:byteorder" ];
          "default" = [ "byteorder" ];
          "derive" = [ "zerocopy-derive" ];
          "simd-nightly" = [ "simd" ];
          "zerocopy-derive" = [ "dep:zerocopy-derive" ];
        };
        resolvedDefaultFeatures = [ "simd" ];
      };
      "zerocopy-derive" = rec {
        crateName = "zerocopy-derive";
        version = "0.7.34";
        edition = "2018";
        sha256 = "0fqvglw01w3hp7xj9gdk1800x9j7v58s9w8ijiyiz2a7krb39s8m";
        procMacro = true;
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.61";
          }
        ];

      };
      "zune-core" = rec {
        crateName = "zune-core";
        version = "0.4.12";
        edition = "2021";
        sha256 = "0jj1ra86klzlcj9aha9als9d1dzs7pqv3azs1j3n96822wn3lhiz";
        features = {
          "log" = [ "dep:log" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "zune-inflate" = rec {
        crateName = "zune-inflate";
        version = "0.2.54";
        edition = "2021";
        sha256 = "00kg24jh3zqa3i6rg6yksnb71bch9yi1casqydl00s7nw8pk7avk";
        dependencies = [
          {
            name = "simd-adler32";
            packageId = "simd-adler32";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "zlib" "gzip" "std" ];
          "simd-adler32" = [ "dep:simd-adler32" ];
          "std" = [ "simd-adler32/std" ];
          "zlib" = [ "simd-adler32" ];
        };
        resolvedDefaultFeatures = [ "simd-adler32" "zlib" ];
      };
      "zune-jpeg" = rec {
        crateName = "zune-jpeg";
        version = "0.4.11";
        edition = "2021";
        sha256 = "0j74rzx82w9zwfqvzrg7k67l77qp3g577w33scrn3zd1l926p1pc";type = [ "cdylib" "rlib" ];
        authors = [
          "caleb <etemesicaleb@gmail.com>"
        ];
        dependencies = [
          {
            name = "zune-core";
            packageId = "zune-core";
          }
        ];
        features = {
          "default" = [ "x86" "neon" "std" ];
          "log" = [ "zune-core/log" ];
          "std" = [ "zune-core/std" ];
        };
        resolvedDefaultFeatures = [ "default" "neon" "std" "x86" ];
      };
      "zvariant" = rec {
        crateName = "zvariant";
        version = "3.15.2";
        edition = "2018";
        sha256 = "1nxj9x187jl32fd32zvq8hfn6lyq3kjadb2q7f6kb6x0igl2pvsf";
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "enumflags2";
            packageId = "enumflags2";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "zvariant_derive";
            packageId = "zvariant_derive";
          }
        ];
        features = {
          "arrayvec" = [ "dep:arrayvec" ];
          "chrono" = [ "dep:chrono" ];
          "default" = [ "gvariant" ];
          "enumflags2" = [ "dep:enumflags2" ];
          "ostree-tests" = [ "gvariant" ];
          "serde_bytes" = [ "dep:serde_bytes" ];
          "time" = [ "dep:time" ];
          "url" = [ "dep:url" ];
          "uuid" = [ "dep:uuid" ];
        };
        resolvedDefaultFeatures = [ "enumflags2" ];
      };
      "zvariant_derive" = rec {
        crateName = "zvariant_derive";
        version = "3.15.2";
        edition = "2018";
        sha256 = "1nbydrkawjwxan12vy79qsrn7gwc483mpfzqs685ybyppv04vhip";
        procMacro = true;
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 1.3.1";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "extra-traits" "full" ];
          }
          {
            name = "zvariant_utils";
            packageId = "zvariant_utils";
          }
        ];

      };
      "zvariant_utils" = rec {
        crateName = "zvariant_utils";
        version = "1.0.1";
        edition = "2018";
        sha256 = "00625h3240rixvfhq6yhws1d4bwf3vrf74v8s69b97aq27cg0d3j";
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
          "turbocooler <turbocooler@cocaine.ninja>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "extra-traits" "full" ];
          }
        ];

      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
    This corresponds roughly to what buildRustCrate is setting.
  */
  makeDefaultTarget = platform: {
    unix = platform.isUnix;
    windows = platform.isWindows;
    fuchsia = true;
    test = false;

    /* We are choosing an arbitrary rust version to grab `lib` from,
      which is unfortunate, but `lib` has been version-agnostic the
      whole time so this is good enough for now.
    */
    os = pkgs.rust.lib.toTargetOs platform;
    arch = pkgs.rust.lib.toTargetArch platform;
    family = pkgs.rust.lib.toTargetFamily platform;
    vendor = pkgs.rust.lib.toTargetVendor platform;
    env = "gnu";
    endian =
      if platform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString platform.parsed.cpu.bits;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
    of crate given as the second argument.

    testCrateFlags: list of flags to pass to the test exectuable
    testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs, testPreRun, testPostRun }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    assert builtins.typeOf testPreRun == "string";
    assert builtins.typeOf testPostRun == "string";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test =
        let
          drv = testCrate.override
            (
              _: {
                buildTests = true;
              }
            );
          # If the user hasn't set any pre/post commands, we don't want to
          # insert empty lines. This means that any existing users of crate2nix
          # don't get a spurious rebuild unless they set these explicitly.
          testCommand = pkgs.lib.concatStringsSep "\n"
            (pkgs.lib.filter (s: s != "") [
              testPreRun
              "$f $testCrateFlags 2>&1 | tee -a $out"
              testPostRun
            ]);
        in
        pkgs.runCommand "run-tests-${testCrate.name}"
          {
            inherit testCrateFlags;
            buildInputs = testInputs;
          } ''
          set -e

          export RUST_BACKTRACE=1

          # recreate a file hierarchy as when running tests with cargo

          # the source for test data
          # It's necessary to locate the source in $NIX_BUILD_TOP/source/
          # instead of $NIX_BUILD_TOP/
          # because we compiled those test binaries in the former and not the latter.
          # So all paths will expect source tree to be there and not in the build top directly.
          # For example: $NIX_BUILD_TOP := /build in general, if you ask yourself.
          # NOTE: There could be edge cases if `crate.sourceRoot` does exist but
          # it's very hard to reason about them.
          # Open a bug if you run into this!
          mkdir -p source/
          cd source/

          ${pkgs.buildPackages.xorg.lndir}/bin/lndir ${crate.src}

          # build outputs
          testRoot=target/debug
          mkdir -p $testRoot

          # executables of the crate
          # we copy to prevent std::env::current_exe() to resolve to a store location
          for i in ${crate}/bin/*; do
            cp "$i" "$testRoot"
          done
          chmod +w -R .

          # test harness executables are suffixed with a hash, like cargo does
          # this allows to prevent name collision with the main
          # executables of the crate
          hash=$(basename $out)
          for file in ${drv}/tests/*; do
            f=$testRoot/$(basename $file)-$hash
            cp $file $f
            ${testCommand}
          done
        '';
    in
    pkgs.runCommand "${crate.name}-linked"
      {
        inherit (crate) outputs crateName;
        passthru = (crate.passthru or { }) // {
          inherit test;
        };
      }
      (lib.optionalString (stdenv.buildPlatform.canExecute stdenv.hostPlatform) ''
        echo tested by ${test}
      '' + ''
        ${lib.concatMapStringsSep "\n" (output: "ln -s ${crate.${output}} ${"$"}${output}") crate.outputs}
      '');

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateForPkgsFunc ? null
    , runTests ? false
    , testCrateFlags ? [ ]
    , testInputs ? [ ]
      # Any command to run immediatelly before a test is executed.
    , testPreRun ? ""
      # Any command run immediatelly after a test is executed.
    , testPostRun ? ""
    }:
    lib.makeOverridable
      (
        { features
        , crateOverrides
        , runTests
        , testCrateFlags
        , testInputs
        , testPreRun
        , testPostRun
        }:
        let
          buildRustCrateForPkgsFuncOverriden =
            if buildRustCrateForPkgsFunc != null
            then buildRustCrateForPkgsFunc
            else
              (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrateForPkgs
                else
                  pkgs: (buildRustCrateForPkgs pkgs).override {
                    defaultCrateOverrides = crateOverrides;
                  }
              );
          builtRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = false;
          };
          builtTestRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = true;
          };
          drv = builtRustCrates.crates.${packageId};
          testDrv = builtTestRustCrates.crates.${packageId};
          derivation =
            if runTests then
              crateWithTest
                {
                  crate = drv;
                  testCrate = testDrv;
                  inherit testCrateFlags testInputs testPreRun testPostRun;
                }
            else drv;
        in
        derivation
      )
      { inherit features crateOverrides runTests testCrateFlags testInputs testPreRun testPostRun; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateForPkgsFunc
    for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateForPkgsFunc
    , runTests
    , makeTarget ? makeDefaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs (makeTarget stdenv.hostPlatform));
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures
          (
            args // {
              inherit rootPackageId;
              target = makeTarget stdenv.hostPlatform // { test = runTests; };
            }
          );
        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageIdByPkgs = mkBuiltByPackageIdByPkgs pkgs;
        mkBuiltByPackageIdByPkgs = pkgs:
          let
            self = {
              crates = lib.mapAttrs (packageId: value: buildByPackageIdForPkgsImpl self pkgs packageId) crateConfigs;
              target = makeTarget pkgs.stdenv.hostPlatform;
              build = mkBuiltByPackageIdByPkgs pkgs.buildPackages;
            };
          in
          self;
        buildByPackageIdForPkgsImpl = self: pkgs: packageId:
          let
            features = mergedFeatures."${packageId}" or [ ];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or [ ]);
            dependencies =
              dependencyDerivations {
                inherit features;
                inherit (self) target;
                buildByPackageId = depPackageId:
                  # proc_macro crates must be compiled for the build architecture
                  if crateConfigs.${depPackageId}.procMacro or false
                  then self.build.crates.${depPackageId}
                  else self.crates.${depPackageId};
                dependencies =
                  (crateConfig.dependencies or [ ])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit features;
                inherit (self.build) target;
                buildByPackageId = depPackageId:
                  self.build.crates.${depPackageId};
                dependencies = crateConfig.buildDependencies or [ ];
              };
            dependenciesWithRenames =
              let
                buildDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self) target;
                  dependencies = crateConfig.dependencies or [ ] ++ devDependencies;
                };
                hostDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self.build) target;
                  dependencies = crateConfig.buildDependencies or [ ];
                };
              in
              lib.filter (d: d ? "rename") (hostDeps ++ buildDeps);
            # Crate renames have the form:
            #
            # {
            #    crate_name = [
            #       { version = "1.2.3"; rename = "crate_name01"; }
            #    ];
            #    # ...
            # }
            crateRenames =
              let
                grouped =
                  lib.groupBy
                    (dependency: dependency.name)
                    dependenciesWithRenames;
                versionAndRename = dep:
                  let
                    package = crateConfigs."${dep.packageId}";
                  in
                  { inherit (dep) rename; inherit (package) version; };
              in
              lib.mapAttrs (name: builtins.map versionAndRename) grouped;
          in
          buildRustCrateForPkgsFunc pkgs
            (
              crateConfig // {
                # https://github.com/NixOS/nixpkgs/issues/218712
                dontStrip = stdenv.hostPlatform.isDarwin;
                src = crateConfig.src or (
                  pkgs.fetchurl rec {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 =
                      assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                      crateConfig.sha256;
                  }
                );
                extraRustcOpts = lib.lists.optional (targetFeatures != [ ]) "-C target-feature=${lib.concatMapStringsSep "," (x: "+${x}") targetFeatures}";
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
      builtByPackageIdByPkgs;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { buildByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: buildByPackageId dependency.packageId;
      in
      map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
    be serialized as JSON.
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: sanitizeForJson) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? makeDefaultTarget stdenv.hostPlatform }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateForPkgsFunc = _: lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson
          (
            buildRustCrateWithFeatures {
              buildRustCrateForPkgsFunc = _: crate: {
                "01_crateName" = crate.crateName or false;
                "02_features" = crate.features or [ ];
                "03_dependencies" = crate.dependencies or [ ];
              };
              inherit packageId;
            }
          );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
    { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
    features.

    This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) { } [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or [ ]) != (v."cargo".resolved_default_features or [ ])
          )
          combined;
      in
      builtins.toJSON {
        inherit onlyInCargo onlyInCrate2Nix differentFeatures;
      };

  /* Returns an attrset mapping packageId to the list of enabled features.

    If multiple paths to a dependency enable different features, the
    corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? { }
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or { }) features;
        enabledFeatures = enableFeatures (crateConfig.dependencies or [ ]) expandedFeatures;
        depWithResolvedFeatures = dependency:
          let
            inherit (dependency) packageId;
            features = dependencyFeatures enabledFeatures dependency;
          in
          { inherit packageId features; };
        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = enabledFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
          foldOverCache
            (
              cache: { packageId, features }:
                let
                  cacheFeatures = cache.${packageId} or [ ];
                  combinedFeatures = sortedUnique (cacheFeatures ++ features);
                in
                if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                then cache
                else
                  mergePackageFeatures {
                    features = combinedFeatures;
                    featuresByPackageId = cache;
                    inherit crateConfigs packageId target runTests rootPackageId;
                  }
            );
        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [ ];
            combinedFeatures = sortedUnique (cacheFeatures ++ enabledFeatures);
          in
          featuresByPackageId // {
            "${packageId}" = combinedFeatures;
          };
        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep"
            (
              crateConfig.dependencies or [ ]
              ++ lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig.devDependencies or [ ])
            );
        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or [ ]);
      in
      cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
        let
          targetFunc = dep.target or (features: true);
        in
        targetFunc { inherit features target; }
        && (
          !(dep.optional or false)
          || builtins.any (doesFeatureEnableDependency dep) features
        )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = dependency: feature:
    let
      name = dependency.rename or dependency.name;
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
    feature == name || feature == "dep:" + name || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
    rules in featureMap.

    featureMap is an attribute set which maps feature names to lists of further
    feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeaturesNoCycle = oldSeen: inputFeatures:
        if inputFeatures != [ ]
        then
          let
            # The feature we're currently expanding.
            feature = builtins.head inputFeatures;
            # All the features we've seen/expanded so far, including the one
            # we're currently processing.
            seen = oldSeen // { ${feature} = 1; };
            # Expand the feature but be careful to not re-introduce a feature
            # that we've already seen: this can easily cause a cycle, see issue
            # #209.
            enables = builtins.filter (f: !(seen ? "${f}")) (featureMap."${feature}" or [ ]);
          in
          [ feature ] ++ (expandFeaturesNoCycle seen (builtins.tail inputFeatures ++ enables))
        # No more features left, nothing to expand to.
        else [ ];
      outFeatures = expandFeaturesNoCycle { } inputFeatures;
    in
    sortedUnique outFeatures;

  /* This function adds optional dependencies as features if they are enabled
    indirectly by dependency features. This function mimics Cargo's behavior
    described in a note at:
    https://doc.rust-lang.org/nightly/cargo/reference/features.html#dependency-features
  */
  enableFeatures = dependencies: features:
    assert (builtins.isList features);
    assert (builtins.isList dependencies);
    let
      additionalFeatures = lib.concatMap
        (
          dependency:
            assert (builtins.isAttrs dependency);
            let
              enabled = builtins.any (doesFeatureEnableDependency dependency) features;
            in
            if (dependency.optional or false) && enabled
            then [ (dependency.rename or dependency.name) ]
            else [ ]
        )
        dependencies;
    in
    sortedUnique (features ++ additionalFeatures);

  /*
    Returns the actual features for the given dependency.

    features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil =
        if dependency.usesDefaultFeatures or true
        then [ "default" ]
        else [ ];
      explicitFeatures = dependency.features or [ ];
      additionalDependencyFeatures =
        let
          name = dependency.rename or dependency.name;
          stripPrefixMatch = prefix: s:
            if lib.hasPrefix prefix s
            then lib.removePrefix prefix s
            else null;
          extractFeature = feature: lib.findFirst
            (f: f != null)
            null
            (map (prefix: stripPrefixMatch prefix feature) [
              (name + "/")
              (name + "?/")
            ]);
          dependencyFeatures = lib.filter (f: f != null) (map extractFeature features);
        in
        dependencyFeatures;
    in
    defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) { } features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
    builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #
  };
}

