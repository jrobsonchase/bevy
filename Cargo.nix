# This file was @generated by cargo2nix 0.9.0.
# It is not intended to be manually edited.

args@{
  release ? true,
  rootFeatures ? [
    "bevy_app/default"
    "bevy_derive/default"
    "bevy_ecs/default"
    "bevy_ecs_macros/default"
    "bevy_reflect/default"
    "bevy_reflect_derive/default"
    "bevy_utils/default"
    "bevy_tasks/default"
    "bevy_asset/default"
    "bevy_diagnostic/default"
    "bevy_core/default"
    "bevy_math/default"
    "bevy_log/default"
    "bevy_audio/default"
    "bevy_dylib/default"
    "bevy_internal/default"
    "bevy_dynamic_plugin/default"
    "bevy_gilrs/default"
    "bevy_input/default"
    "bevy_gltf/default"
    "bevy_pbr/default"
    "bevy_render/default"
    "bevy_transform/default"
    "bevy_window/default"
    "bevy_scene/default"
    "bevy_sprite/default"
    "bevy_text/default"
    "bevy_ui/default"
    "bevy_wgpu/default"
    "bevy_winit/default"
    "bevy-ios-example/default"
    "bevy/default"
    "ci/default"
  ],
  rustPackages,
  buildRustPackages,
  hostPlatform,
  hostPlatformCpu ? null,
  hostPlatformFeatures ? [],
  mkRustCrate,
  rustLib,
  lib,
  workspaceSrc,
}:
let
  workspaceSrc = if args.workspaceSrc == null then ./. else args.workspaceSrc;
in let
  inherit (rustLib) fetchCratesIo fetchCrateLocal fetchCrateGit fetchCrateAlternativeRegistry expandFeatures decideProfile genDrvsByProfile;
  profilesByName = {
  };
  rootFeatures' = expandFeatures rootFeatures;
  overridableMkRustCrate = f:
    let
      drvs = genDrvsByProfile profilesByName ({ profile, profileName }: mkRustCrate ({ inherit release profile hostPlatformCpu hostPlatformFeatures; } // (f profileName)));
    in { compileMode ? null, profileName ? decideProfile compileMode release }:
      let drv = drvs.${profileName}; in if compileMode == null then drv else drv.override { inherit compileMode; };
in
{
  cargo2nixVersion = "0.9.0";
  workspace = {
    bevy_app = rustPackages.unknown.bevy_app."0.5.0";
    bevy_derive = rustPackages.unknown.bevy_derive."0.5.0";
    bevy_ecs = rustPackages.unknown.bevy_ecs."0.5.0";
    bevy_ecs_macros = rustPackages.unknown.bevy_ecs_macros."0.5.0";
    bevy_reflect = rustPackages.unknown.bevy_reflect."0.5.0";
    bevy_reflect_derive = rustPackages.unknown.bevy_reflect_derive."0.5.0";
    bevy_utils = rustPackages.unknown.bevy_utils."0.5.0";
    bevy_tasks = rustPackages.unknown.bevy_tasks."0.5.0";
    bevy_asset = rustPackages.unknown.bevy_asset."0.5.0";
    bevy_diagnostic = rustPackages.unknown.bevy_diagnostic."0.5.0";
    bevy_core = rustPackages.unknown.bevy_core."0.5.0";
    bevy_math = rustPackages.unknown.bevy_math."0.5.0";
    bevy_log = rustPackages.unknown.bevy_log."0.5.0";
    bevy_audio = rustPackages.unknown.bevy_audio."0.5.0";
    bevy_dylib = rustPackages.unknown.bevy_dylib."0.5.0";
    bevy_internal = rustPackages.unknown.bevy_internal."0.5.0";
    bevy_dynamic_plugin = rustPackages.unknown.bevy_dynamic_plugin."0.5.0";
    bevy_gilrs = rustPackages.unknown.bevy_gilrs."0.5.0";
    bevy_input = rustPackages.unknown.bevy_input."0.5.0";
    bevy_gltf = rustPackages.unknown.bevy_gltf."0.5.0";
    bevy_pbr = rustPackages.unknown.bevy_pbr."0.5.0";
    bevy_render = rustPackages.unknown.bevy_render."0.5.0";
    bevy_transform = rustPackages.unknown.bevy_transform."0.5.0";
    bevy_window = rustPackages.unknown.bevy_window."0.5.0";
    bevy_scene = rustPackages.unknown.bevy_scene."0.5.0";
    bevy_sprite = rustPackages.unknown.bevy_sprite."0.5.0";
    bevy_text = rustPackages.unknown.bevy_text."0.5.0";
    bevy_ui = rustPackages.unknown.bevy_ui."0.5.0";
    bevy_wgpu = rustPackages.unknown.bevy_wgpu."0.5.0";
    bevy_winit = rustPackages.unknown.bevy_winit."0.5.0";
    bevy-ios-example = rustPackages.unknown.bevy-ios-example."0.1.0";
    bevy = rustPackages.unknown.bevy."0.5.0";
    ci = rustPackages.unknown.ci."0.1.0";
  };
  "registry+https://github.com/rust-lang/crates.io-index".Inflector."0.11.4" = overridableMkRustCrate (profileName: rec {
    name = "Inflector";
    version = "0.11.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fe438c63458706e03479442743baae6c88256498e6431708f6dfc520a26515d3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ab_glyph."0.2.11" = overridableMkRustCrate (profileName: rec {
    name = "ab_glyph";
    version = "0.2.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "af0ac006645f86f20f6c6fa4dcaef920bf803df819123626f9440e35835e7d80"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      ab_glyph_rasterizer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph_rasterizer."0.1.4" { inherit profileName; };
      owned_ttf_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".owned_ttf_parser."0.12.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ab_glyph_rasterizer."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "ab_glyph_rasterizer";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d9fe5e32de01730eb1f6b7f5b51c17e03e2325bf40a74f754f04f130043affff"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".adler32."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "adler32";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "aae1277d39aeec15cb388266ecc24b11c80469deae6067e17a1a7aa9e5c1f234"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ahash."0.4.7" = overridableMkRustCrate (profileName: rec {
    name = "ahash";
    version = "0.4.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "739f4a8db6605981345c5654f3a85b056ce52f37a39d34da03f25bf2151ea16e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ahash."0.7.4" = overridableMkRustCrate (profileName: rec {
    name = "ahash";
    version = "0.7.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "43bb833f0bf979d8475d38fbf09ed3b8a55e1885fe93ad3f93239fc6a4f17b98"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "solaris" || hostPlatform.parsed.kernel.name == "illumos" || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.kernel.name == "cloudabi" || hostPlatform.parsed.kernel.name == "haiku" || hostPlatform.parsed.kernel.name == "vxworks" || hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" then "getrandom" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.3" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "solaris" || hostPlatform.parsed.kernel.name == "illumos" || hostPlatform.parsed.kernel.name == "fuchsia" || hostPlatform.parsed.kernel.name == "redox" || hostPlatform.parsed.kernel.name == "cloudabi" || hostPlatform.parsed.kernel.name == "haiku" || hostPlatform.parsed.kernel.name == "vxworks" || hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi" then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.8.0" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.3" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".aho-corasick."0.7.18" = overridableMkRustCrate (profileName: rec {
    name = "aho-corasick";
    version = "0.7.18";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1e37cfd5e7657ada45f742d6e99ca5788580b5c529dc78faf11ece6dc702656f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".alsa."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "alsa";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "75c4da790adcb2ce5e758c064b4f3ec17a30349f9961d3e5e6c9688b052a9e18"; };
    dependencies = {
      alsa_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".alsa-sys."0.3.1" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.20.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".alsa-sys."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "alsa-sys";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "db8fee663d06c4e303404ef5f40488a53e062f89ba8bfed81f42325aafad1527"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
    buildDependencies = {
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.20" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".andrew."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "andrew";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8c4afb09dd642feec8408e33f92f3ffc4052946f6b20f32fb99c1f58cd4fa7cf"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      rusttype = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rusttype."0.9.2" { inherit profileName; };
      walkdir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.2" { inherit profileName; };
      xdg = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xdg."2.2.0" { inherit profileName; };
      xml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xml-rs."0.8.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".android_log-sys."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "android_log-sys";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b8052e2d8aabbb8d556d6abbcce2a22b9590996c5f849b9c7ce4544a2e3b984e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".android_log-sys."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "android_log-sys";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "85965b6739a430150bdd138e2374a98af0c3ee0d030b3bb7fc3bddff58d0102e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".android_logger."0.8.6" = overridableMkRustCrate (profileName: rec {
    name = "android_logger";
    version = "0.8.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8cbd542dd180566fad88fd2729a53a62a734843c626638006a9d63ec0688484e"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "regex" ]
    ];
    dependencies = {
      android_log_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".android_log-sys."0.1.2" { inherit profileName; };
      env_logger = rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.7.1" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "ansi_term";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.44" = overridableMkRustCrate (profileName: rec {
    name = "anyhow";
    version = "1.0.44";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "61604a8f862e1d5c3229fdd78f8b02c68dcf73a4c4b05fd636d12240aaa242c1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".approx."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "approx";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "072df7202e63b127ab55acfe16ce97013d5b97bf160489336d3f1840fd78e99e"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "arrayvec";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ash."0.31.0" = overridableMkRustCrate (profileName: rec {
    name = "ash";
    version = "0.31.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c69a8137596e84c22d57f3da1b5de1d4230b1742a710091c85f4d7ce50f00f38"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "libloading" ]
    ];
    dependencies = {
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.6.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-channel."1.6.1" = overridableMkRustCrate (profileName: rec {
    name = "async-channel";
    version = "1.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2114d64672151c0c5eaa5e131ec84a74f06e1e559830dabba01ca30605d66319"; };
    dependencies = {
      concurrent_queue = rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."1.2.2" { inherit profileName; };
      event_listener = rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.1" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.17" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-executor."1.4.1" = overridableMkRustCrate (profileName: rec {
    name = "async-executor";
    version = "1.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "871f9bb5e0a22eeb7e8cf16641feb87c9dc67032ccf8ff49e772eb9941d3a965"; };
    dependencies = {
      async_task = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-task."4.0.3" { inherit profileName; };
      concurrent_queue = rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."1.2.2" { inherit profileName; };
      fastrand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."1.5.0" { inherit profileName; };
      futures_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.12.0" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.8.0" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".async-task."4.0.3" = overridableMkRustCrate (profileName: rec {
    name = "async-task";
    version = "4.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e91831deabf0d6d7ec49552e489aed63b7456a7a3c46cff62adad428110b0af0"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".autocfg."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "autocfg";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base-x."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "base-x";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a4521f3e3d031370679b3b140beb36dfe4801b09ac77e30c61941f97df3ef28b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" = overridableMkRustCrate (profileName: rec {
    name = "base64";
    version = "0.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "904dfeac50f3cdaba28fc6f57fdcddb75f49ed61346676a78c4ffe55877802fd"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "unknown".bevy."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal workspaceSrc;
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default") "bevy_audio")
      (lib.optional (rootFeatures' ? "bevy/bevy_dylib" || rootFeatures' ? "bevy/dynamic") "bevy_dylib")
      (lib.optional (rootFeatures' ? "bevy/bevy_dynamic_plugin" || rootFeatures' ? "bevy/default") "bevy_dynamic_plugin")
      (lib.optional (rootFeatures' ? "bevy/bevy_gilrs" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy-ios-example") "bevy_gilrs")
      (lib.optional (rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy-ios-example") "bevy_gltf")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy-ios-example") "bevy_wgpu")
      (lib.optional (rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy-ios-example") "bevy_winit")
      (lib.optional (rootFeatures' ? "bevy/bmp") "bmp")
      (lib.optional (rootFeatures' ? "bevy/dds") "dds")
      (lib.optional (rootFeatures' ? "bevy/default") "default")
      (lib.optional (rootFeatures' ? "bevy/dynamic") "dynamic")
      (lib.optional (rootFeatures' ? "bevy/flac") "flac")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy-ios-example") "hdr")
      (lib.optional (rootFeatures' ? "bevy/jpeg") "jpeg")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/mp3") "mp3")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy-ios-example") "png")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy-ios-example") "render")
      (lib.optional (rootFeatures' ? "bevy/serialize") "serialize")
      (lib.optional (rootFeatures' ? "bevy/subpixel_glyph_atlas") "subpixel_glyph_atlas")
      (lib.optional (rootFeatures' ? "bevy/tga") "tga")
      (lib.optional (rootFeatures' ? "bevy/trace") "trace")
      (lib.optional (rootFeatures' ? "bevy/trace_chrome") "trace_chrome")
      (lib.optional (rootFeatures' ? "bevy/vorbis") "vorbis")
      (lib.optional (rootFeatures' ? "bevy/wav") "wav")
      (lib.optional (rootFeatures' ? "bevy/wayland") "wayland")
      (lib.optional (rootFeatures' ? "bevy/wgpu_trace") "wgpu_trace")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/x11") "x11")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy/bevy_dylib" || rootFeatures' ? "bevy/dynamic" then "bevy_dylib" else null } = rustPackages."unknown".bevy_dylib."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" then "bevy_internal" else null } = rustPackages."unknown".bevy_internal."0.5.0" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example") && hostPlatform.parsed.cpu.name == "wasm32" then "syn" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
    devDependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.44" { inherit profileName; };
      rand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.4" { inherit profileName; };
      ron = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ron."0.6.5" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bevy-glsl-to-spirv."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "bevy-glsl-to-spirv";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0d5f2f58f0aec3c50a20799792c3705e80dd7df327e79791cacec197e84e5e61"; };
  });
  
  "unknown".bevy-ios-example."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy-ios-example";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/examples/ios");
    dependencies = {
      bevy = rustPackages."unknown".bevy."0.5.0" { inherit profileName; };
    };
  });
  
  "unknown".bevy_app."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_app";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_app");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy_app/bevy_reflect" || rootFeatures' ? "bevy_app/default" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "bevy_reflect")
      (lib.optional (rootFeatures' ? "bevy_app/default" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "default")
      (lib.optional (rootFeatures' ? "bevy/trace" || rootFeatures' ? "bevy_app/trace" || rootFeatures' ? "bevy_internal/trace") "trace")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "bevy_derive" else null } = buildRustPackages."unknown".bevy_derive."0.5.0" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "bevy_ecs" else null } = rustPackages."unknown".bevy_ecs."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy_app/bevy_reflect" || rootFeatures' ? "bevy_app/default" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "bevy_reflect" else null } = rustPackages."unknown".bevy_reflect."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "bevy_utils" else null } = rustPackages."unknown".bevy_utils."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") && hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "unknown".bevy_asset."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_asset";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_asset");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy_asset/default" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "default")
      (lib.optional (rootFeatures' ? "bevy_asset/default" || rootFeatures' ? "bevy_asset/filesystem_watcher" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "filesystem_watcher")
      (lib.optional (rootFeatures' ? "bevy_asset/default" || rootFeatures' ? "bevy_asset/filesystem_watcher" || rootFeatures' ? "bevy_asset/notify" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "notify")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "anyhow" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.44" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "bevy_app" else null } = rustPackages."unknown".bevy_app."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "bevy_diagnostic" else null } = rustPackages."unknown".bevy_diagnostic."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "bevy_ecs" else null } = rustPackages."unknown".bevy_ecs."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "bevy_log" else null } = rustPackages."unknown".bevy_log."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "bevy_reflect" else null } = rustPackages."unknown".bevy_reflect."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "bevy_tasks" else null } = rustPackages."unknown".bevy_tasks."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "bevy_utils" else null } = rustPackages."unknown".bevy_utils."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "crossbeam_channel" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "downcast_rs" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") && hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") && hostPlatform.parsed.kernel.name == "android" then "ndk_glue" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy_asset/default" || rootFeatures' ? "bevy_asset/filesystem_watcher" || rootFeatures' ? "bevy_asset/notify" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "notify" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".notify."5.0.0-pre.13" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "rand" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.4" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "ron" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ron."0.6.5" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.29" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.19" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") && hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "unknown".bevy_audio."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_audio";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_audio");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy_audio/flac" || rootFeatures' ? "bevy_internal/flac") "flac")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy_audio/mp3" || rootFeatures' ? "bevy_internal/mp3") "mp3")
      (lib.optional (rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy_audio/vorbis" || rootFeatures' ? "bevy_internal/vorbis") "vorbis")
      (lib.optional (rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_audio/wav" || rootFeatures' ? "bevy_internal/wav") "wav")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio" then "anyhow" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.44" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio" then "bevy_app" else null } = rustPackages."unknown".bevy_app."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio" then "bevy_asset" else null } = rustPackages."unknown".bevy_asset."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio" then "bevy_ecs" else null } = rustPackages."unknown".bevy_ecs."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio" then "bevy_reflect" else null } = rustPackages."unknown".bevy_reflect."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio" then "bevy_utils" else null } = rustPackages."unknown".bevy_utils."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio" then "rodio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rodio."0.13.1" { inherit profileName; };
    };
  });
  
  "unknown".bevy_core."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_core";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_core");
    dependencies = {
      bevy_app = rustPackages."unknown".bevy_app."0.5.0" { inherit profileName; };
      bevy_derive = buildRustPackages."unknown".bevy_derive."0.5.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."unknown".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_math = rustPackages."unknown".bevy_math."0.5.0" { inherit profileName; };
      bevy_reflect = rustPackages."unknown".bevy_reflect."0.5.0" { inherit profileName; };
      bevy_tasks = rustPackages."unknown".bevy_tasks."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."unknown".bevy_utils."0.5.0" { inherit profileName; };
    };
  });
  
  "unknown".bevy_derive."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_derive";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_derive");
    dependencies = {
      inflector = rustPackages."registry+https://github.com/rust-lang/crates.io-index".Inflector."0.11.4" { inherit profileName; };
      find_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".find-crate."0.6.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "unknown".bevy_diagnostic."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_diagnostic";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_diagnostic");
    dependencies = {
      bevy_app = rustPackages."unknown".bevy_app."0.5.0" { inherit profileName; };
      bevy_core = rustPackages."unknown".bevy_core."0.5.0" { inherit profileName; };
      bevy_ecs = rustPackages."unknown".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_log = rustPackages."unknown".bevy_log."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."unknown".bevy_utils."0.5.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
    };
  });
  
  "unknown".bevy_dylib."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_dylib";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_dylib");
    dependencies = {
      bevy_internal = rustPackages."unknown".bevy_internal."0.5.0" { inherit profileName; };
    };
  });
  
  "unknown".bevy_dynamic_plugin."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_dynamic_plugin";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_dynamic_plugin");
    dependencies = {
      bevy_app = rustPackages."unknown".bevy_app."0.5.0" { inherit profileName; };
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.0" { inherit profileName; };
    };
  });
  
  "unknown".bevy_ecs."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_ecs";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_ecs");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy_ecs/bevy_reflect" || rootFeatures' ? "bevy_ecs/default" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "bevy_reflect")
      (lib.optional (rootFeatures' ? "bevy_ecs/default" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "default")
      (lib.optional (rootFeatures' ? "bevy/trace" || rootFeatures' ? "bevy_ecs/trace" || rootFeatures' ? "bevy_internal/trace") "trace")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "async_channel" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-channel."1.6.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "bevy_ecs_macros" else null } = buildRustPackages."unknown".bevy_ecs_macros."0.5.0" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "bevy_ecs/bevy_reflect" || rootFeatures' ? "bevy_ecs/default" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "bevy_reflect" else null } = rustPackages."unknown".bevy_reflect."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "bevy_tasks" else null } = rustPackages."unknown".bevy_tasks."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "bevy_utils" else null } = rustPackages."unknown".bevy_utils."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "downcast_rs" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "fixedbitset" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.4.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "fxhash" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "rand" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.4" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.29" { inherit profileName; };
    };
  });
  
  "unknown".bevy_ecs_macros."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_ecs_macros";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_ecs/macros");
    dependencies = {
      find_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".find-crate."0.6.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "unknown".bevy_gilrs."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_gilrs";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_gilrs");
    dependencies = {
      bevy_app = rustPackages."unknown".bevy_app."0.5.0" { inherit profileName; };
      bevy_ecs = rustPackages."unknown".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_input = rustPackages."unknown".bevy_input."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."unknown".bevy_utils."0.5.0" { inherit profileName; };
      gilrs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gilrs."0.8.1" { inherit profileName; };
    };
  });
  
  "unknown".bevy_gltf."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_gltf";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_gltf");
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.44" { inherit profileName; };
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" { inherit profileName; };
      bevy_app = rustPackages."unknown".bevy_app."0.5.0" { inherit profileName; };
      bevy_asset = rustPackages."unknown".bevy_asset."0.5.0" { inherit profileName; };
      bevy_core = rustPackages."unknown".bevy_core."0.5.0" { inherit profileName; };
      bevy_ecs = rustPackages."unknown".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_math = rustPackages."unknown".bevy_math."0.5.0" { inherit profileName; };
      bevy_pbr = rustPackages."unknown".bevy_pbr."0.5.0" { inherit profileName; };
      bevy_reflect = rustPackages."unknown".bevy_reflect."0.5.0" { inherit profileName; };
      bevy_render = rustPackages."unknown".bevy_render."0.5.0" { inherit profileName; };
      bevy_scene = rustPackages."unknown".bevy_scene."0.5.0" { inherit profileName; };
      bevy_transform = rustPackages."unknown".bevy_transform."0.5.0" { inherit profileName; };
      gltf = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gltf."0.15.2" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.29" { inherit profileName; };
    };
  });
  
  "unknown".bevy_input."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_input";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_input");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy_input/default" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_winit") "default")
      (lib.optional (rootFeatures' ? "bevy/serialize" || rootFeatures' ? "bevy_input/serde" || rootFeatures' ? "bevy_input/serialize" || rootFeatures' ? "bevy_internal/serialize") "serde")
      (lib.optional (rootFeatures' ? "bevy/serialize" || rootFeatures' ? "bevy_input/serialize" || rootFeatures' ? "bevy_internal/serialize") "serialize")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_winit" then "bevy_app" else null } = rustPackages."unknown".bevy_app."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_winit" then "bevy_ecs" else null } = rustPackages."unknown".bevy_ecs."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_winit" then "bevy_math" else null } = rustPackages."unknown".bevy_math."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_winit" then "bevy_utils" else null } = rustPackages."unknown".bevy_utils."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/serialize" || rootFeatures' ? "bevy_input/serde" || rootFeatures' ? "bevy_input/serialize" || rootFeatures' ? "bevy_internal/serialize" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
    };
  });
  
  "unknown".bevy_internal."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_internal";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_internal");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav") "bevy_audio")
      (lib.optional (rootFeatures' ? "bevy/bevy_dynamic_plugin" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy_internal/bevy_dynamic_plugin") "bevy_dynamic_plugin")
      (lib.optional (rootFeatures' ? "bevy/bevy_gilrs" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy_internal/bevy_gilrs" || rootFeatures' ? "bevy-ios-example") "bevy_gilrs")
      (lib.optional (rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy-ios-example") "bevy_gltf")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy-ios-example") "bevy_pbr")
      (lib.optional (rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy-ios-example") "bevy_render")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy-ios-example") "bevy_sprite")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy-ios-example") "bevy_text")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy-ios-example") "bevy_ui")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example") "bevy_wgpu")
      (lib.optional (rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy-ios-example") "bevy_winit")
      (lib.optional (rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy_internal/bmp") "bmp")
      (lib.optional (rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy_internal/dds") "dds")
      (lib.optional (rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy_internal/flac") "flac")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy-ios-example") "hdr")
      (lib.optional (rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy_internal/jpeg") "jpeg")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy_internal/mp3") "mp3")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy-ios-example") "png")
      (lib.optional (rootFeatures' ? "bevy/serialize" || rootFeatures' ? "bevy_internal/serialize") "serialize")
      (lib.optional (rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas") "subpixel_glyph_atlas")
      (lib.optional (rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy_internal/tga") "tga")
      (lib.optional (rootFeatures' ? "bevy/trace" || rootFeatures' ? "bevy_internal/trace") "trace")
      (lib.optional (rootFeatures' ? "bevy/trace_chrome" || rootFeatures' ? "bevy_internal/trace_chrome") "trace_chrome")
      (lib.optional (rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy_internal/vorbis") "vorbis")
      (lib.optional (rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/wav") "wav")
      (lib.optional (rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy_internal/wayland") "wayland")
      (lib.optional (rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/wgpu_trace") "wgpu_trace")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/x11") "x11")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal" then "bevy_app" else null } = rustPackages."unknown".bevy_app."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal" then "bevy_asset" else null } = rustPackages."unknown".bevy_asset."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" then "bevy_audio" else null } = rustPackages."unknown".bevy_audio."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal" then "bevy_core" else null } = rustPackages."unknown".bevy_core."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal" then "bevy_derive" else null } = buildRustPackages."unknown".bevy_derive."0.5.0" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal" then "bevy_diagnostic" else null } = rustPackages."unknown".bevy_diagnostic."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_dynamic_plugin" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy_internal/bevy_dynamic_plugin" then "bevy_dynamic_plugin" else null } = rustPackages."unknown".bevy_dynamic_plugin."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal" then "bevy_ecs" else null } = rustPackages."unknown".bevy_ecs."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gilrs" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy_internal/bevy_gilrs" || rootFeatures' ? "bevy-ios-example" then "bevy_gilrs" else null } = rustPackages."unknown".bevy_gilrs."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy-ios-example" then "bevy_gltf" else null } = rustPackages."unknown".bevy_gltf."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal" then "bevy_input" else null } = rustPackages."unknown".bevy_input."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal" then "bevy_log" else null } = rustPackages."unknown".bevy_log."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal" then "bevy_math" else null } = rustPackages."unknown".bevy_math."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy-ios-example" then "bevy_pbr" else null } = rustPackages."unknown".bevy_pbr."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal" then "bevy_reflect" else null } = rustPackages."unknown".bevy_reflect."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy-ios-example" then "bevy_render" else null } = rustPackages."unknown".bevy_render."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal" then "bevy_scene" else null } = rustPackages."unknown".bevy_scene."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy-ios-example" then "bevy_sprite" else null } = rustPackages."unknown".bevy_sprite."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal" then "bevy_tasks" else null } = rustPackages."unknown".bevy_tasks."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy-ios-example" then "bevy_text" else null } = rustPackages."unknown".bevy_text."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal" then "bevy_transform" else null } = rustPackages."unknown".bevy_transform."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy-ios-example" then "bevy_ui" else null } = rustPackages."unknown".bevy_ui."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal" then "bevy_utils" else null } = rustPackages."unknown".bevy_utils."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" then "bevy_wgpu" else null } = rustPackages."unknown".bevy_wgpu."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal" then "bevy_window" else null } = rustPackages."unknown".bevy_window."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy-ios-example" then "bevy_winit" else null } = rustPackages."unknown".bevy_winit."0.5.0" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal") && hostPlatform.parsed.kernel.name == "android" then "ndk_glue" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.2.1" { inherit profileName; };
    };
  });
  
  "unknown".bevy_log."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_log";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_log");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy/trace_chrome" || rootFeatures' ? "bevy_internal/trace_chrome" || rootFeatures' ? "bevy_log/tracing-chrome") "tracing-chrome")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") && hostPlatform.parsed.kernel.name == "android" then "android_log_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".android_log-sys."0.2.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit" then "bevy_app" else null } = rustPackages."unknown".bevy_app."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit" then "bevy_utils" else null } = rustPackages."unknown".bevy_utils."0.5.0" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") && hostPlatform.parsed.cpu.name == "wasm32" then "console_error_panic_hook" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".console_error_panic_hook."0.1.6" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/trace_chrome" || rootFeatures' ? "bevy_internal/trace_chrome" || rootFeatures' ? "bevy_log/tracing-chrome" then "tracing_chrome" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-chrome."0.3.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit" then "tracing_subscriber" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.2.24" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") && hostPlatform.parsed.cpu.name == "wasm32" then "tracing_wasm" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-wasm."0.2.0" { inherit profileName; };
    };
  });
  
  "unknown".bevy_math."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_math";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_math");
    dependencies = {
      bevy_reflect = rustPackages."unknown".bevy_reflect."0.5.0" { inherit profileName; };
      glam = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glam."0.13.1" { inherit profileName; };
    };
  });
  
  "unknown".bevy_pbr."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_pbr";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_pbr");
    dependencies = {
      bevy_app = rustPackages."unknown".bevy_app."0.5.0" { inherit profileName; };
      bevy_asset = rustPackages."unknown".bevy_asset."0.5.0" { inherit profileName; };
      bevy_core = rustPackages."unknown".bevy_core."0.5.0" { inherit profileName; };
      bevy_derive = buildRustPackages."unknown".bevy_derive."0.5.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."unknown".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_math = rustPackages."unknown".bevy_math."0.5.0" { inherit profileName; };
      bevy_reflect = rustPackages."unknown".bevy_reflect."0.5.0" { inherit profileName; };
      bevy_render = rustPackages."unknown".bevy_render."0.5.0" { inherit profileName; };
      bevy_transform = rustPackages."unknown".bevy_transform."0.5.0" { inherit profileName; };
      bevy_window = rustPackages."unknown".bevy_window."0.5.0" { inherit profileName; };
    };
  });
  
  "unknown".bevy_reflect."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_reflect";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_reflect");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy_reflect/bevy" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "bevy")
      (lib.optional (rootFeatures' ? "bevy_reflect/bevy" || rootFeatures' ? "bevy_reflect/glam" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "glam")
      (lib.optional (rootFeatures' ? "bevy_reflect/bevy" || rootFeatures' ? "bevy_reflect/smallvec" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "smallvec")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy_ecs/bevy_reflect" || rootFeatures' ? "bevy_ecs/default" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "bevy_reflect_derive" else null } = buildRustPackages."unknown".bevy_reflect_derive."0.5.0" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "bevy_ecs/bevy_reflect" || rootFeatures' ? "bevy_ecs/default" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "bevy_utils" else null } = rustPackages."unknown".bevy_utils."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy_ecs/bevy_reflect" || rootFeatures' ? "bevy_ecs/default" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "downcast_rs" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy_ecs/bevy_reflect" || rootFeatures' ? "bevy_ecs/default" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "erased_serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".erased-serde."0.3.16" { inherit profileName; };
      ${ if rootFeatures' ? "bevy_reflect/bevy" || rootFeatures' ? "bevy_reflect/glam" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "glam" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glam."0.13.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy_ecs/bevy_reflect" || rootFeatures' ? "bevy_ecs/default" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      ${ if rootFeatures' ? "bevy_ecs/bevy_reflect" || rootFeatures' ? "bevy_ecs/default" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
      ${ if rootFeatures' ? "bevy_reflect/bevy" || rootFeatures' ? "bevy_reflect/smallvec" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "smallvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.6.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy_ecs/bevy_reflect" || rootFeatures' ? "bevy_ecs/default" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.29" { inherit profileName; };
    };
    devDependencies = {
      ron = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ron."0.6.5" { inherit profileName; };
    };
  });
  
  "unknown".bevy_reflect_derive."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_reflect_derive";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_reflect/bevy_reflect_derive");
    dependencies = {
      find_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".find-crate."0.6.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
      uuid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."0.8.2" { inherit profileName; };
    };
  });
  
  "unknown".bevy_render."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_render";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_render");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_render/bmp") "bmp")
      (lib.optional (rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_render/dds") "dds")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_render/hdr" || rootFeatures' ? "bevy-ios-example") "hdr")
      (lib.optional (rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_render/jpeg") "jpeg")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_render/png" || rootFeatures' ? "bevy-ios-example") "png")
      (lib.optional (rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_render/tga") "tga")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "anyhow" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.44" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") && !(hostPlatform.parsed.kernel.name == "ios") && !(hostPlatform.parsed.cpu.name == "wasm32") && !(hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.kernel.name == "darwin") then "bevy_glsl_to_spirv" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bevy-glsl-to-spirv."0.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "bevy_app" else null } = rustPackages."unknown".bevy_app."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "bevy_asset" else null } = rustPackages."unknown".bevy_asset."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "bevy_core" else null } = rustPackages."unknown".bevy_core."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "bevy_derive" else null } = buildRustPackages."unknown".bevy_derive."0.5.0" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "bevy_ecs" else null } = rustPackages."unknown".bevy_ecs."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "bevy_math" else null } = rustPackages."unknown".bevy_math."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "bevy_reflect" else null } = rustPackages."unknown".bevy_reflect."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "bevy_transform" else null } = rustPackages."unknown".bevy_transform."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "bevy_utils" else null } = rustPackages."unknown".bevy_utils."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "bevy_window" else null } = rustPackages."unknown".bevy_window."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "downcast_rs" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "hex" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "hexasphere" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hexasphere."3.4.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "image" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".image."0.23.14" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "once_cell" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.8.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") && (hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.kernel.name == "darwin") then "shaderc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".shaderc."0.7.3" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "smallvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.6.1" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") && !(hostPlatform.parsed.cpu.name == "wasm32") then "spirv_reflect" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv-reflect."0.2.3" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.29" { inherit profileName; };
    };
  });
  
  "unknown".bevy_scene."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_scene";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_scene");
    dependencies = {
      anyhow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.44" { inherit profileName; };
      bevy_app = rustPackages."unknown".bevy_app."0.5.0" { inherit profileName; };
      bevy_asset = rustPackages."unknown".bevy_asset."0.5.0" { inherit profileName; };
      bevy_ecs = rustPackages."unknown".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_reflect = rustPackages."unknown".bevy_reflect."0.5.0" { inherit profileName; };
      bevy_transform = rustPackages."unknown".bevy_transform."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."unknown".bevy_utils."0.5.0" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      ron = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ron."0.6.5" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.29" { inherit profileName; };
      uuid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."0.8.2" { inherit profileName; };
    };
  });
  
  "unknown".bevy_sprite."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_sprite";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_sprite");
    dependencies = {
      bevy_app = rustPackages."unknown".bevy_app."0.5.0" { inherit profileName; };
      bevy_asset = rustPackages."unknown".bevy_asset."0.5.0" { inherit profileName; };
      bevy_core = rustPackages."unknown".bevy_core."0.5.0" { inherit profileName; };
      bevy_ecs = rustPackages."unknown".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_log = rustPackages."unknown".bevy_log."0.5.0" { inherit profileName; };
      bevy_math = rustPackages."unknown".bevy_math."0.5.0" { inherit profileName; };
      bevy_reflect = rustPackages."unknown".bevy_reflect."0.5.0" { inherit profileName; };
      bevy_render = rustPackages."unknown".bevy_render."0.5.0" { inherit profileName; };
      bevy_transform = rustPackages."unknown".bevy_transform."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."unknown".bevy_utils."0.5.0" { inherit profileName; };
      bevy_window = rustPackages."unknown".bevy_window."0.5.0" { inherit profileName; };
      guillotiere = rustPackages."registry+https://github.com/rust-lang/crates.io-index".guillotiere."0.6.2" { inherit profileName; };
      rectangle_pack = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rectangle-pack."0.3.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.29" { inherit profileName; };
    };
  });
  
  "unknown".bevy_tasks."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_tasks";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_tasks");
    dependencies = {
      async_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-channel."1.6.1" { inherit profileName; };
      async_executor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-executor."1.4.1" { inherit profileName; };
      event_listener = rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.1" { inherit profileName; };
      futures_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.12.0" { inherit profileName; };
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.11" { inherit profileName; };
      num_cpus = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.19" { inherit profileName; };
    };
  });
  
  "unknown".bevy_text."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_text";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_text");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_text/subpixel_glyph_atlas") "subpixel_glyph_atlas")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" then "ab_glyph" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph."0.2.11" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" then "anyhow" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.44" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" then "bevy_app" else null } = rustPackages."unknown".bevy_app."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" then "bevy_asset" else null } = rustPackages."unknown".bevy_asset."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" then "bevy_core" else null } = rustPackages."unknown".bevy_core."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" then "bevy_ecs" else null } = rustPackages."unknown".bevy_ecs."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" then "bevy_math" else null } = rustPackages."unknown".bevy_math."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" then "bevy_reflect" else null } = rustPackages."unknown".bevy_reflect."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" then "bevy_render" else null } = rustPackages."unknown".bevy_render."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" then "bevy_sprite" else null } = rustPackages."unknown".bevy_sprite."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" then "bevy_transform" else null } = rustPackages."unknown".bevy_transform."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" then "bevy_utils" else null } = rustPackages."unknown".bevy_utils."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" then "bevy_window" else null } = rustPackages."unknown".bevy_window."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" then "glyph_brush_layout" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glyph_brush_layout."0.2.3" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.29" { inherit profileName; };
    };
  });
  
  "unknown".bevy_transform."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_transform";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_transform");
    dependencies = {
      bevy_app = rustPackages."unknown".bevy_app."0.5.0" { inherit profileName; };
      bevy_ecs = rustPackages."unknown".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_math = rustPackages."unknown".bevy_math."0.5.0" { inherit profileName; };
      bevy_reflect = rustPackages."unknown".bevy_reflect."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."unknown".bevy_utils."0.5.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.6.1" { inherit profileName; };
    };
  });
  
  "unknown".bevy_ui."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_ui";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_ui");
    dependencies = {
      bevy_app = rustPackages."unknown".bevy_app."0.5.0" { inherit profileName; };
      bevy_asset = rustPackages."unknown".bevy_asset."0.5.0" { inherit profileName; };
      bevy_core = rustPackages."unknown".bevy_core."0.5.0" { inherit profileName; };
      bevy_derive = buildRustPackages."unknown".bevy_derive."0.5.0" { profileName = "__noProfile"; };
      bevy_ecs = rustPackages."unknown".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_input = rustPackages."unknown".bevy_input."0.5.0" { inherit profileName; };
      bevy_log = rustPackages."unknown".bevy_log."0.5.0" { inherit profileName; };
      bevy_math = rustPackages."unknown".bevy_math."0.5.0" { inherit profileName; };
      bevy_reflect = rustPackages."unknown".bevy_reflect."0.5.0" { inherit profileName; };
      bevy_render = rustPackages."unknown".bevy_render."0.5.0" { inherit profileName; };
      bevy_sprite = rustPackages."unknown".bevy_sprite."0.5.0" { inherit profileName; };
      bevy_text = rustPackages."unknown".bevy_text."0.5.0" { inherit profileName; };
      bevy_transform = rustPackages."unknown".bevy_transform."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."unknown".bevy_utils."0.5.0" { inherit profileName; };
      bevy_window = rustPackages."unknown".bevy_window."0.5.0" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.6.1" { inherit profileName; };
      stretch = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stretch."0.3.2" { inherit profileName; };
    };
  });
  
  "unknown".bevy_utils."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_utils";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_utils");
    dependencies = {
      ahash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.7.4" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "getrandom" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.3" { inherit profileName; };
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.11" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.28" { inherit profileName; };
      uuid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."0.8.2" { inherit profileName; };
    };
  });
  
  "unknown".bevy_wgpu."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_wgpu";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_wgpu");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example") "bevy_winit")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example") "default")
      (lib.optional (rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_wgpu/trace") "trace")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "bevy_app" else null } = rustPackages."unknown".bevy_app."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "bevy_asset" else null } = rustPackages."unknown".bevy_asset."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "bevy_core" else null } = rustPackages."unknown".bevy_core."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "bevy_diagnostic" else null } = rustPackages."unknown".bevy_diagnostic."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "bevy_ecs" else null } = rustPackages."unknown".bevy_ecs."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "bevy_render" else null } = rustPackages."unknown".bevy_render."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "bevy_utils" else null } = rustPackages."unknown".bevy_utils."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "bevy_window" else null } = rustPackages."unknown".bevy_window."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" then "bevy_winit" else null } = rustPackages."unknown".bevy_winit."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "crossbeam_channel" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "crossbeam_utils" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.5" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "futures_lite" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.12.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "wgpu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu."0.7.1" { inherit profileName; };
    };
  });
  
  "unknown".bevy_window."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_window";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_window");
    dependencies = {
      bevy_app = rustPackages."unknown".bevy_app."0.5.0" { inherit profileName; };
      bevy_ecs = rustPackages."unknown".bevy_ecs."0.5.0" { inherit profileName; };
      bevy_math = rustPackages."unknown".bevy_math."0.5.0" { inherit profileName; };
      bevy_utils = rustPackages."unknown".bevy_utils."0.5.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "unknown".bevy_winit."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "bevy_winit";
    version = "0.5.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/crates/bevy_winit");
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_winit/wayland") "wayland")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_winit/x11") "x11")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit" then "bevy_app" else null } = rustPackages."unknown".bevy_app."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit" then "bevy_ecs" else null } = rustPackages."unknown".bevy_ecs."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit" then "bevy_input" else null } = rustPackages."unknown".bevy_input."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit" then "bevy_log" else null } = rustPackages."unknown".bevy_log."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit" then "bevy_math" else null } = rustPackages."unknown".bevy_math."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit" then "bevy_utils" else null } = rustPackages."unknown".bevy_utils."0.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit" then "bevy_window" else null } = rustPackages."unknown".bevy_window."0.5.0" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") && hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit" then "winit" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winit."0.24.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bindgen."0.56.0" = overridableMkRustCrate (profileName: rec {
    name = "bindgen";
    version = "0.56.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2da379dbebc0b76ef63ca68d8fc6e71c0f13e59432e0987e508c1820e6ab5239"; };
    features = builtins.concatLists [
      [ "runtime" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      cexpr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cexpr."0.4.0" { inherit profileName; };
      clang_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".clang-sys."1.2.2" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      lazycell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazycell."1.3.0" { inherit profileName; };
      peeking_take_while = rustPackages."registry+https://github.com/rust-lang/crates.io-index".peeking_take_while."0.1.2" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      rustc_hash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" { inherit profileName; };
      shlex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".shlex."0.1.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bit-set."0.5.2" = overridableMkRustCrate (profileName: rec {
    name = "bit-set";
    version = "0.5.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6e11e16035ea35e4e5997b393eacbf6f63983188f7a2ad25bfb13465f5ad59de"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      bit_vec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-vec."0.6.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bit-vec."0.6.3" = overridableMkRustCrate (profileName: rec {
    name = "bit-vec";
    version = "0.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" = overridableMkRustCrate (profileName: rec {
    name = "bitflags";
    version = "1.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "block";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0d8c1fef690941d3e7788d328517591fecc684c084084702d6ff1641e993699a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.7.1" = overridableMkRustCrate (profileName: rec {
    name = "bumpalo";
    version = "3.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d9df67f7bf9ef8498769f994239c45613ef0c5899415fb58e9add412d2c1a538"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.7.2" = overridableMkRustCrate (profileName: rec {
    name = "bytemuck";
    version = "1.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "72957246c41db82b8ef88a5486143830adeb8227ef9837740bdec67724cf2c5b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" = overridableMkRustCrate (profileName: rec {
    name = "byteorder";
    version = "1.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "bytes";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c4872d67bab6358e59559027aa3b9157c53d9358c51423c17554809a8858e0f8"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cache-padded."1.1.1" = overridableMkRustCrate (profileName: rec {
    name = "cache-padded";
    version = "1.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "631ae5198c9be5e753e5cc215e1bd73c2b466a3565173db433f52bb9d3e66dba"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".calloop."0.6.5" = overridableMkRustCrate (profileName: rec {
    name = "calloop";
    version = "0.6.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0b036167e76041694579972c28cf4877b4f92da222560ddb49008937b6a6727c"; };
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.18.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cc."1.0.70" = overridableMkRustCrate (profileName: rec {
    name = "cc";
    version = "1.0.70";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d26a6ce4b6a484fa3edb70f7efa6fc430fd2b87285fe8b84304fd0936faa0dc0"; };
    features = builtins.concatLists [
      [ "jobserver" ]
      [ "parallel" ]
    ];
    dependencies = {
      jobserver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.24" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cesu8."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "cesu8";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6d43a04d8753f35258c91f8ec639f792891f748a1edbd759cf1dcea3382ad83c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cexpr."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "cexpr";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f4aedb84272dbe89af497cf81375129abda4fc0a9e7c5d317498c15cc30c0d27"; };
    dependencies = {
      nom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."5.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" = overridableMkRustCrate (profileName: rec {
    name = "cfg-if";
    version = "0.1.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "cfg-if";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cfg_aliases."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "cfg_aliases";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fd16c4719339c4530435d38e511904438d07cce7950afa3718a84ac36c10e89e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.19" = overridableMkRustCrate (profileName: rec {
    name = "chrono";
    version = "0.4.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "670ad68c9088c2a963aaa298cb369688cf3f9465ce5e2d4ca10e6e0098a1ce73"; };
    features = builtins.concatLists [
      [ "clock" ]
      [ "libc" ]
      [ "std" ]
      [ "winapi" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      num_integer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.44" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "unknown".ci."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "ci";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal (workspaceSrc + "/tools/ci");
    dependencies = {
      xshell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xshell."0.1.17" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".clang-sys."1.2.2" = overridableMkRustCrate (profileName: rec {
    name = "clang-sys";
    version = "1.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "10612c0ec0e0a1ff0e97980647cb058a6e7aedb913d01d009c406b8b7d0b26ee"; };
    features = builtins.concatLists [
      [ "clang_3_5" ]
      [ "clang_3_6" ]
      [ "clang_3_7" ]
      [ "clang_3_8" ]
      [ "clang_3_9" ]
      [ "clang_4_0" ]
      [ "clang_5_0" ]
      [ "clang_6_0" ]
      [ "libloading" ]
      [ "runtime" ]
    ];
    dependencies = {
      glob = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.0" { inherit profileName; };
    };
    buildDependencies = {
      glob = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".claxon."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "claxon";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4bfbf56724aa9eca8afa4fcfadeb479e722935bb2a0900c2d37e0cc477af0688"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cmake."0.1.45" = overridableMkRustCrate (profileName: rec {
    name = "cmake";
    version = "0.1.45";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eb6210b637171dfba4cda12e579ac6dc73f5165ad56133e5d72ef3131f320855"; };
    dependencies = {
      cc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.70" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cocoa."0.24.0" = overridableMkRustCrate (profileName: rec {
    name = "cocoa";
    version = "0.24.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6f63902e9223530efb4e26ccd0cf55ec30d592d3b42e21a28defc42a9586e832"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      block = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; };
      cocoa_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cocoa-foundation."0.1.0" { inherit profileName; };
      core_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.1" { inherit profileName; };
      core_graphics = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.22.2" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      objc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cocoa-foundation."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "cocoa-foundation";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ade49b65d560ca58c403a479bb396592b155c0185eada742ee323d1d68d6318"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      block = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; };
      core_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.1" { inherit profileName; };
      core_graphics_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.1" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      objc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".color_quant."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "color_quant";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3d7b894f5411737b7867f4827955924d7c254fc9f4d91a6aad6b097804b1018b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".combine."4.6.1" = overridableMkRustCrate (profileName: rec {
    name = "combine";
    version = "4.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a909e4d93292cd8e9c42e189f61681eff9d67b6541f96b8a1a737f23737bd001"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "bytes" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      bytes = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.1.0" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."1.2.2" = overridableMkRustCrate (profileName: rec {
    name = "concurrent-queue";
    version = "1.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "30ed07550be01594c6026cff2a1d7fe9c8f683caa798e12b68694ac9e88286a3"; };
    dependencies = {
      cache_padded = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cache-padded."1.1.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".console_error_panic_hook."0.1.6" = overridableMkRustCrate (profileName: rec {
    name = "console_error_panic_hook";
    version = "0.1.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b8d976903543e0c48546a91908f21588a680a8c8f984df9a5d69feccb2b2a211"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".copyless."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "copyless";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a2df960f5d869b2dd8532793fde43eb5427cceb126c929747a26823ab0eeb536"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.6.4" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation";
    version = "0.6.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "25b9e03f145fd4f2bf705e07b900cd41fc636598fe5dc452fd0db1441c3f496d"; };
    dependencies = {
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.6.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "57d24c7a13c43e870e37c1556b74555437870a04514f7685f5b354e090567171"; };
    dependencies = {
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.7.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0a89e2ae426ea83155dccf10c0fa6b1463ef6d5fcb44cee0b224a408fa640a62"; };
    dependencies = {
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation-sys";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e7ca8a5221364ef15ce201e8ed2f609fc312682a8f4e0e3d4aa5879764e0fa3b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation-sys";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b3a71ab494c0b5b860bdc8407ae08978052417070c2ced38573a9157ad75b8ac"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "core-foundation-sys";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ea221b5284a47e40033bf9b66f35f984ec0ea2931eb03505246cd27a963f981b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.19.2" = overridableMkRustCrate (profileName: rec {
    name = "core-graphics";
    version = "0.19.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b3889374e6ea6ab25dba90bb5d96202f61108058361f6dc72e8b03e6f8bbe923"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      core_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.7.0" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.22.2" = overridableMkRustCrate (profileName: rec {
    name = "core-graphics";
    version = "0.22.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "269f35f69b542b80e736a20a89a05215c0ce80c2c03c514abb2e318b78379d86"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      core_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.1" { inherit profileName; };
      core_graphics_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.1" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "core-graphics-types";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3a68b68b3446082644c91ac778bf50cd4104bfb002b5a6a7c44cca5a2c70788b"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      core_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.1" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".core-video-sys."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "core-video-sys";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "34ecad23610ad9757664d644e369246edde1803fcb43ed72876565098a5d3828"; };
    features = builtins.concatLists [
      [ "core-graphics" ]
      [ "display_link" ]
      [ "opengl" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.7.0" { inherit profileName; };
      core_graphics = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.19.2" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      objc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".coreaudio-rs."0.10.0" = overridableMkRustCrate (profileName: rec {
    name = "coreaudio-rs";
    version = "0.10.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "11894b20ebfe1ff903cbdc52259693389eea03b94918a2def2c30c3bf227ad88"; };
    features = builtins.concatLists [
      [ "audio_toolbox" ]
      [ "audio_unit" ]
      [ "core_audio" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      coreaudio_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".coreaudio-sys."0.2.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".coreaudio-sys."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "coreaudio-sys";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2b7e3347be6a09b46aba228d6608386739fb70beff4f61e07422da87b0bb31fa"; };
    features = builtins.concatLists [
      [ "audio_toolbox" ]
      [ "audio_unit" ]
      [ "core_audio" ]
    ];
    buildDependencies = {
      bindgen = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bindgen."0.56.0" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".cpal."0.13.4" = overridableMkRustCrate (profileName: rec {
    name = "cpal";
    version = "0.13.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "98f45f0a21f617cd2c788889ef710b63f075c949259593ea09c826f1e47a2418"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" then "alsa" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".alsa."0.5.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "core_foundation_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.2" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin" then "coreaudio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".coreaudio-rs."0.10.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "jni" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni."0.19.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "mach" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mach."0.3.2" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "ndk" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.3.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "ndk_glue" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.3.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" then "nix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.20.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "android" then "oboe" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".oboe."0.4.4" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "emscripten" then "stdweb" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stdweb."0.1.3" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.29" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.2.1" = overridableMkRustCrate (profileName: rec {
    name = "crc32fast";
    version = "1.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "81156fece84ab6a9f2afdb109ce3ae577e42b1228441eded99bd77f627953b1a"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-channel";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "06ed27e177f16d65f0f0c22a213e17c696ace5dd64b14258b52f9417ccb52db4"; };
    features = builtins.concatLists [
      [ "crossbeam-utils" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      crossbeam_utils = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.5" = overridableMkRustCrate (profileName: rec {
    name = "crossbeam-utils";
    version = "0.8.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d82cfc11ce7f2c3faef78d8a684447b40d503d9681acebed6cb728d45940c4db"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "default")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "lazy_static")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".d3d12."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "d3d12";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d0a60cceb22c7c53035f8980524fdc7f17cf49681a3c154e6757d30afbec6ec4"; };
    features = builtins.concatLists [
      [ "libloading" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.6.7" { inherit profileName; };
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "darling";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0d706e75d87e35569db781a9b5e2416cff1236a47ed380831f959382ccd5f858"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "suggestions" ]
    ];
    dependencies = {
      darling_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_core."0.10.2" { inherit profileName; };
      darling_macro = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_macro."0.10.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling_core."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "darling_core";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f0c960ae2da4de88a91b2d920c2a7233b400bc33cb28453a2987822d8392519b"; };
    features = builtins.concatLists [
      [ "strsim" ]
      [ "suggestions" ]
    ];
    dependencies = {
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      ident_case = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ident_case."1.0.1" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      strsim = rustPackages."registry+https://github.com/rust-lang/crates.io-index".strsim."0.9.3" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".darling_macro."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "darling_macro";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d9b5a2f4ac4969822c62224815d069952656cadc7084fdca9751e6d959189b72"; };
    dependencies = {
      darling_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling_core."0.10.2" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".deflate."0.8.6" = overridableMkRustCrate (profileName: rec {
    name = "deflate";
    version = "0.8.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "73770f8e1fe7d64df17ca66ad28994a0a623ea497fa69486e14984e715c5d174"; };
    dependencies = {
      adler32 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".adler32."1.2.0" { inherit profileName; };
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".derivative."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "derivative";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fcc3dd5e9e9c0b295d6e1e4d811fb6f157d5ffd784b8d202fc62eac8035a770b"; };
    features = builtins.concatLists [
      [ "use_core" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".discard."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "discard";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "212d0f5754cb6769937f4501cc0e67f4f4483c8d2c3e1e922ee9edbe4ab4c7c0"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dispatch."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "dispatch";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bd0c93bb4b0c6d9b77f4435b0ae98c24d17f1c45b2ff844c6151a07256ca923b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dlib."0.4.2" = overridableMkRustCrate (profileName: rec {
    name = "dlib";
    version = "0.4.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b11f15d1e3268f140f68d390637d5e76d849782d971ae7063e0da69fe9709a76"; };
    dependencies = {
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.6.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".dlib."0.5.0" = overridableMkRustCrate (profileName: rec {
    name = "dlib";
    version = "0.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac1b7517328c04c2aa68422fc60a41b92208182142ed04a25879c26c8f878794"; };
    dependencies = {
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "downcast-rs";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9ea835d29036a4087793836fa931b08837ad5e957da9e23886b29586fb9b6650"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".env_logger."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "env_logger";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "44533bbbb3bb3c1fa17d9f2e4e38bbbaf8396ba82193c4cb1b6445d711445d36"; };
    features = builtins.concatLists [
      [ "regex" ]
    ];
    dependencies = {
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".erased-serde."0.3.16" = overridableMkRustCrate (profileName: rec {
    name = "erased-serde";
    version = "0.3.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3de9ad4541d99dc22b59134e7ff8dc3d6c988c89ecd7324bf10a8362b07a2afa"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".euclid."0.22.6" = overridableMkRustCrate (profileName: rec {
    name = "euclid";
    version = "0.22.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "da96828553a086d7b18dcebfc579bd9628b016f86590d7453c115e490fa74b80"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".event-listener."2.5.1" = overridableMkRustCrate (profileName: rec {
    name = "event-listener";
    version = "2.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f7531096570974c3a9dcf9e4b8e1cede1ec26cf5046219fb3b9d897503b9be59"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fastrand."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "fastrand";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b394ed3d285a429378d3b384b9eb1285267e7df4b166df24b7a6939a04dc392e"; };
    dependencies = {
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "instant" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.11" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".filetime."0.2.15" = overridableMkRustCrate (profileName: rec {
    name = "filetime";
    version = "0.2.15";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "975ccf83d8d9d0d84682850a38c8169027be83368805971cc4f238c2b245bc98"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.10" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".find-crate."0.6.3" = overridableMkRustCrate (profileName: rec {
    name = "find-crate";
    version = "0.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "59a98bbaacea1c0eb6a0876280051b892eb73594fd90cf3b20e9c817029c57d2"; };
    dependencies = {
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "fixedbitset";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "37ab347416e802de484e4d03c7316c48f1ecb56574dfd4a46a80f173ce1de04d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "fixedbitset";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "398ea4fabe40b9b0d885340a2a991a44c8a645624075ad966d21f88688e2b69e"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" = overridableMkRustCrate (profileName: rec {
    name = "fnv";
    version = "1.0.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1"; };
    dependencies = {
      foreign_types_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.1.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".foreign-types-shared."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "foreign-types-shared";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fsevent-sys."4.0.0" = overridableMkRustCrate (profileName: rec {
    name = "fsevent-sys";
    version = "4.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c0e564d24da983c053beff1bb7178e237501206840a3e6bf4e267b9e8ae734a"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fuchsia-zircon."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "fuchsia-zircon";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      fuchsia_zircon_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fuchsia-zircon-sys."0.3.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fuchsia-zircon-sys."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "fuchsia-zircon-sys";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.17" = overridableMkRustCrate (profileName: rec {
    name = "futures-core";
    version = "0.3.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "88d1c26957f23603395cd326b0ffe64124b818f4449552f960d815cfba83a53d"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.17" = overridableMkRustCrate (profileName: rec {
    name = "futures-io";
    version = "0.3.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "522de2a0fe3e380f1bc577ba0474108faf3f6b18321dbf60b3b9c39a75073377"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".futures-lite."1.12.0" = overridableMkRustCrate (profileName: rec {
    name = "futures-lite";
    version = "1.12.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7694489acd39452c77daa48516b894c153f192c3578d5a839b62c58099fcbf48"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "fastrand" ]
      [ "futures-io" ]
      [ "memchr" ]
      [ "parking" ]
      [ "std" ]
      [ "waker-fn" ]
    ];
    dependencies = {
      fastrand = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."1.5.0" { inherit profileName; };
      futures_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.17" { inherit profileName; };
      futures_io = rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.17" { inherit profileName; };
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      parking = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking."2.0.0" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.7" { inherit profileName; };
      waker_fn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".waker-fn."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "fxhash";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c"; };
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "getrandom";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7fcd999463524c52659517fe2cea98493cfe485d10565e7b0fb07dbba7ad2753"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "js")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "js-sys")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "std")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "wasm-bindgen")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") && hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") && hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") && hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.10.2+wasi-snapshot-preview1" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") && hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gfx-auxil."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "gfx-auxil";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e7b33ecf067f2117668d91c9b0f2e5f223ebd1ffec314caa2f3de27bb580186d"; };
    features = builtins.concatLists [
      [ "spirv_cross" ]
    ];
    dependencies = {
      fxhash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" { inherit profileName; };
      hal = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-hal."0.7.0" { inherit profileName; };
      spirv_cross = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv_cross."0.23.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gfx-backend-dx11."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "gfx-backend-dx11";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f851d03c2e8f117e3702bf41201a4fafa447d5cb1276d5375870ae7573d069dd"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      auxil = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-auxil."0.8.0" { inherit profileName; };
      hal = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-hal."0.7.0" { inherit profileName; };
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.6.7" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      range_alloc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".range-alloc."0.1.2" { inherit profileName; };
      raw_window_handle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.6.1" { inherit profileName; };
      spirv_cross = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv_cross."0.23.1" { inherit profileName; };
      thunderdome = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thunderdome."0.3.0" { inherit profileName; };
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
      wio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wio."0.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gfx-backend-dx12."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "gfx-backend-dx12";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5032d716a2a5f4dafb4675a794c5dc32081af8fbc7303c93ad93ff5413c6559f"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      bit_set = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-set."0.5.2" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      native = rustPackages."registry+https://github.com/rust-lang/crates.io-index".d3d12."0.3.2" { inherit profileName; };
      auxil = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-auxil."0.8.0" { inherit profileName; };
      hal = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-hal."0.7.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      range_alloc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".range-alloc."0.1.2" { inherit profileName; };
      raw_window_handle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.6.1" { inherit profileName; };
      spirv_cross = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv_cross."0.23.1" { inherit profileName; };
      thunderdome = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thunderdome."0.3.0" { inherit profileName; };
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gfx-backend-empty."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "gfx-backend-empty";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9f07ef26a65954cfdd7b4c587f485100d1bb3b0bd6a51b02d817d6c87cca7a91"; };
    dependencies = {
      gfx_hal = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-hal."0.7.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      raw_window_handle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gfx-backend-gl."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "gfx-backend-gl";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c6717c50ab601efe4a669bfb44db615e3888695ac8263222aeaa702642b9fbc2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "naga" ]
    ];
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      auxil = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-auxil."0.8.0" { inherit profileName; };
      hal = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-hal."0.7.0" { inherit profileName; };
      glow = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glow."0.7.2" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "egl" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".khronos-egl."3.0.2" { inherit profileName; };
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "libloading" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.6.7" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      naga = rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.3.2" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      raw_window_handle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" { inherit profileName; };
      spirv_cross = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv_cross."0.23.1" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gfx-backend-metal."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "gfx-backend-metal";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8dc54b456ece69ef49f8893269ebf24ac70969ed34ba2719c3f3abcc8fbff14e"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "naga" ]
    ];
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      block = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; };
      cocoa_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cocoa-foundation."0.1.0" { inherit profileName; };
      copyless = rustPackages."registry+https://github.com/rust-lang/crates.io-index".copyless."0.1.5" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      auxil = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-auxil."0.8.0" { inherit profileName; };
      hal = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-hal."0.7.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      metal = rustPackages."registry+https://github.com/rust-lang/crates.io-index".metal."0.21.0" { inherit profileName; };
      naga = rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.3.2" { inherit profileName; };
      objc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      range_alloc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".range-alloc."0.1.2" { inherit profileName; };
      raw_window_handle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" { inherit profileName; };
      spirv_cross = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv_cross."0.23.1" { inherit profileName; };
      storage_map = rustPackages."registry+https://github.com/rust-lang/crates.io-index".storage-map."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gfx-backend-vulkan."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "gfx-backend-vulkan";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dabe88b1a5c91e0f969b441cc57e70364858066e4ba937deeb62065654ef9bd9"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "naga" ]
    ];
    dependencies = {
      arrayvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      ash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ash."0.31.0" { inherit profileName; };
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "core_graphics_types" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics-types."0.1.1" { inherit profileName; };
      hal = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-hal."0.7.0" { inherit profileName; };
      inplace_it = rustPackages."registry+https://github.com/rust-lang/crates.io-index".inplace_it."0.3.3" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      naga = rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.3.2" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "objc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
      parking_lot = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      raw_window_handle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.6.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gfx-hal."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "gfx-hal";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c1d9cc8d3b573dda62d0baca4f02e0209786e22c562caff001d77c389008781d"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      naga = rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.3.2" { inherit profileName; };
      raw_window_handle = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.29" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gilrs."0.8.1" = overridableMkRustCrate (profileName: rec {
    name = "gilrs";
    version = "0.8.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0e986f911d937f4395dfc2a39618dcef452773d32dcdbe0828c623f76588f749"; };
    dependencies = {
      fnv = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" { inherit profileName; };
      gilrs_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gilrs-core."0.3.1" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      uuid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."0.8.2" { inherit profileName; };
      vec_map = rustPackages."registry+https://github.com/rust-lang/crates.io-index".vec_map."0.8.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gilrs-core."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "gilrs-core";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9a5e5bb97bf9a0d9519a28cf38839cf1d6d9bb572b48e3c67202271fec2ed5e7"; };
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "core_foundation" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.6.4" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "io_kit_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".io-kit-sys."0.1.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" then "libudev_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libudev-sys."0.1.4" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" then "nix" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.20.1" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "rusty_xinput" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rusty-xinput."1.2.0" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "stdweb" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stdweb."0.4.20" { inherit profileName; };
      uuid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."0.8.2" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "darwin" then "vec_map" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".vec_map."0.8.2" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glam."0.13.1" = overridableMkRustCrate (profileName: rec {
    name = "glam";
    version = "0.13.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "70155b56080764b8b758e91e4c63d06da0262c0c939f2cd991cd1382087147df"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "serde" ]
      [ "std" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "spirv" then "spirv_std" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv-std."0.4.0-alpha.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glam."0.15.2" = overridableMkRustCrate (profileName: rec {
    name = "glam";
    version = "0.15.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3abb554f8ee44336b72d522e0a7fe86a29e09f839a36022fa869a7dfe941a54b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glob."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "glob";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9b919933a397b79c37e33b77bb2aa3dc8eb6e165ad809e58ff75bc7db2e34574"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glow."0.7.2" = overridableMkRustCrate (profileName: rec {
    name = "glow";
    version = "0.7.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "072136d2c3783f3a92f131acb227bc806d3886278e2a4dc1e9990ec89ef9e70b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "js-sys" ]
      [ "wasm-bindgen" ]
      [ "web-sys" ]
      [ "web_sys" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "slotmap" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slotmap."0.4.3" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gltf."0.15.2" = overridableMkRustCrate (profileName: rec {
    name = "gltf";
    version = "0.15.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d6fb0d1d772daf10ea74528c3aeb12215f6d5b820adf2ecfc93a6578d6779c3c"; };
    features = builtins.concatLists [
      [ "KHR_materials_unlit" ]
      [ "names" ]
      [ "utils" ]
    ];
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      gltf_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gltf-json."0.15.2" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gltf-derive."0.15.2" = overridableMkRustCrate (profileName: rec {
    name = "gltf-derive";
    version = "0.15.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f6636de7bf52227363554f1ca2d9cd180fc666129ddd0933097e1f227dfa7293"; };
    dependencies = {
      inflections = rustPackages."registry+https://github.com/rust-lang/crates.io-index".inflections."1.1.1" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gltf-json."0.15.2" = overridableMkRustCrate (profileName: rec {
    name = "gltf-json";
    version = "0.15.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e3fc3deb81e6fa04bf808f6be7c3983229552a95b77f687ad96af00f6d3e7d6c"; };
    features = builtins.concatLists [
      [ "KHR_materials_unlit" ]
      [ "default" ]
      [ "names" ]
    ];
    dependencies = {
      gltf_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".gltf-derive."0.15.2" { profileName = "__noProfile"; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.130" { profileName = "__noProfile"; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.68" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".glyph_brush_layout."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "glyph_brush_layout";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cc32c2334f00ca5ac3695c5009ae35da21da8c62d255b5b96d56e2597a637a38"; };
    dependencies = {
      ab_glyph = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph."0.2.11" { inherit profileName; };
      approx = rustPackages."registry+https://github.com/rust-lang/crates.io-index".approx."0.5.0" { inherit profileName; };
      xi_unicode = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xi-unicode."0.3.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-alloc."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "gpu-alloc";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "739e1e53f1e4b5093342e753bcb868e53d28e0c69da9c9ce9632455bfa37ba30"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      [ "tracing" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      gpu_alloc_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-alloc-types."0.2.0" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.28" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-alloc-types."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "gpu-alloc-types";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "54804d0d6bc9d7f26db4eaec1ad10def69b599315f487d32c334a80d1efe67a5"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-descriptor."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "gpu-descriptor";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e8a70f1e87a3840ed6a3e99e02c2b861e4dbdf26f0d07e38f42ea5aff46cfce2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      [ "tracing" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      gpu_descriptor_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-descriptor-types."0.1.1" { inherit profileName; };
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.9.1" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.28" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".gpu-descriptor-types."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "gpu-descriptor-types";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "363e3677e55ad168fef68cf9de3a4a310b53124c5e784c53a1d70e92d23f2126"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".guillotiere."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "guillotiere";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b62d5865c036cb1393e23c50693df631d3f5d7bcca4c04fe4cc0fd592e74a782"; };
    dependencies = {
      euclid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".euclid."0.22.6" { inherit profileName; };
      svg_fmt = rustPackages."registry+https://github.com/rust-lang/crates.io-index".svg_fmt."0.4.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.9.1" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.9.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d7afe4a420e3fe79967a00898cc1f4db7c8a49a9333a29f8a4bd76a253d5cd04"; };
    features = builtins.concatLists [
      [ "ahash" ]
      [ "default" ]
      [ "inline-more" ]
    ];
    dependencies = {
      ahash = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.4.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "hashbrown";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ab5ef0d4909ef3724cc8cce6ccc8572c5c817592e9285f5464f8e86f8bd3726e"; };
    features = builtins.concatLists [
      [ "raw" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".heck."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "heck";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c"; };
    dependencies = {
      unicode_segmentation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-segmentation."1.8.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.1.19" = overridableMkRustCrate (profileName: rec {
    name = "hermit-abi";
    version = "0.1.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "hex";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hexasphere."3.4.0" = overridableMkRustCrate (profileName: rec {
    name = "hexasphere";
    version = "3.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "497fa99092cc737fe649ae39194b515fbc15ae27ebd437c9e3d9c8210341e0fc"; };
    dependencies = {
      glam = rustPackages."registry+https://github.com/rust-lang/crates.io-index".glam."0.15.2" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".hound."3.4.0" = overridableMkRustCrate (profileName: rec {
    name = "hound";
    version = "3.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8a164bb2ceaeff4f42542bdb847c41517c78a60f5649671b2a07312b6e117549"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ident_case."1.0.1" = overridableMkRustCrate (profileName: rec {
    name = "ident_case";
    version = "1.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".image."0.23.14" = overridableMkRustCrate (profileName: rec {
    name = "image";
    version = "0.23.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "24ffcb7e7244a9bf19d35bf2883b9c080c4ced3c07a9895572178cdb8f13f6a1"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_render/bmp") "bmp")
      (lib.optional (rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_render/dds") "dds")
      (lib.optional (rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_render/dds") "dxt")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_render/hdr" || rootFeatures' ? "bevy-ios-example") "hdr")
      (lib.optional (rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_render/jpeg") "jpeg")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_render/png" || rootFeatures' ? "bevy-ios-example") "png")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_render/hdr" || rootFeatures' ? "bevy-ios-example") "scoped_threadpool")
      (lib.optional (rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_render/tga") "tga")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "bytemuck" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.7.2" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "byteorder" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "color_quant" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".color_quant."1.1.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_render/jpeg" then "jpeg" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jpeg-decoder."0.1.22" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "num_iter" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-iter."0.1.42" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "num_rational" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-rational."0.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" then "num_traits" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_render/png" || rootFeatures' ? "bevy-ios-example" then "png" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".png."0.16.8" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_render/hdr" || rootFeatures' ? "bevy-ios-example" then "scoped_threadpool" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scoped_threadpool."0.1.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".indexmap."1.7.0" = overridableMkRustCrate (profileName: rec {
    name = "indexmap";
    version = "1.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bc633605454125dec4b66843673f01c7df2b89479b32e0ed634e43a91cff62a5"; };
    dependencies = {
      hashbrown = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.11.2" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.0.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".inflections."1.1.1" = overridableMkRustCrate (profileName: rec {
    name = "inflections";
    version = "1.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a257582fdcde896fd96463bf2d40eefea0580021c0712a0e2b028b60b47a837a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".inotify."0.9.4" = overridableMkRustCrate (profileName: rec {
    name = "inotify";
    version = "0.9.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d88ed757e516714cd8736e65b84ed901f72458512111871f20c1d377abdfbf5e"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      inotify_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".inotify-sys."0.1.5" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".inotify-sys."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "inotify-sys";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e05c02b5e89bff3b946cedeca278abc628fe811e604f027c45a8aa3cf793d0eb"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".inplace_it."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "inplace_it";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "90953f308a79fe6d62a4643e51f848fbfddcd05975a38e69fdf4ab86a7baf7ca"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".instant."0.1.11" = overridableMkRustCrate (profileName: rec {
    name = "instant";
    version = "0.1.11";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "716d3d89f35ac6a34fd0eed635395f4c3b76fa889338a4632e5231a8684216bd"; };
    features = builtins.concatLists [
      [ "js-sys" ]
      [ "wasm-bindgen" ]
      [ "wasm-bindgen_rs" ]
      [ "web-sys" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.config == "asmjs-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-unknown" || hostPlatform.config == "wasm32-unknown-emscripten" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      ${ if hostPlatform.config == "asmjs-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-unknown" || hostPlatform.config == "wasm32-unknown-emscripten" then "wasm_bindgen_rs" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if hostPlatform.config == "wasm32-unknown-unknown" || hostPlatform.config == "asmjs-unknown-emscripten" || hostPlatform.config == "wasm32-unknown-emscripten" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".io-kit-sys."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "io-kit-sys";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f21dcc74995dd4cd090b147e79789f8d65959cbfb5f0b118002db869ea3bd0a0"; };
    dependencies = {
      core_foundation_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.6.2" { inherit profileName; };
      mach = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mach."0.2.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".iovec."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "iovec";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b2b3ea6ff95e175473f8ffe6a7eb7c00d054240321b84c57051175fe3c1e075e"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".itoa."0.4.8" = overridableMkRustCrate (profileName: rec {
    name = "itoa";
    version = "0.4.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b71991ff56294aa922b450139ee08b3bfc70982c6b2c7562771375cf73542dd4"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jni."0.19.0" = overridableMkRustCrate (profileName: rec {
    name = "jni";
    version = "0.19.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c6df18c2e3db7e453d3c6ac5b3e9d5182664d28788126d39b91f2d1e22b017ec"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      cesu8 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cesu8."1.1.0" { inherit profileName; };
      combine = rustPackages."registry+https://github.com/rust-lang/crates.io-index".combine."4.6.1" { inherit profileName; };
      jni_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.29" { inherit profileName; };
    };
    buildDependencies = {
      walkdir = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.2" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "jni-sys";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8eaf4bc02d17cbdd7ff4c7438cafcdf7fb9a4613313ad11b4f8fefe7d3fa0130"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.24" = overridableMkRustCrate (profileName: rec {
    name = "jobserver";
    version = "0.1.24";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "af25a77299a7f711a01975c35a6a424eb6862092cc2d6c72c4ed6cbc56dfc1fa"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".jpeg-decoder."0.1.22" = overridableMkRustCrate (profileName: rec {
    name = "jpeg-decoder";
    version = "0.1.22";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "229d53d58899083193af11e15917b5640cd40b29ff475a1fe4ef725deb02d0f2"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" = overridableMkRustCrate (profileName: rec {
    name = "js-sys";
    version = "0.3.46";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cf3d7383929f7c9c7c2d0fa596f325832df98c3704f2c60553080f7127a58175"; };
    dependencies = {
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".json."0.12.4" = overridableMkRustCrate (profileName: rec {
    name = "json";
    version = "0.12.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "078e285eafdfb6c4b434e0d31e8cfcb5115b651496faca5749b88fafd4f23bfd"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".kernel32-sys."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "kernel32-sys";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d"; };
    dependencies = {
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.2.8" { inherit profileName; };
    };
    buildDependencies = {
      build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-build."0.1.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".khronos-egl."3.0.2" = overridableMkRustCrate (profileName: rec {
    name = "khronos-egl";
    version = "3.0.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b19cc4a81304db2a0ad69740e83cdc3a9364e3f9bd6d88a87288a4c2deec927b"; };
    features = builtins.concatLists [
      [ "1_0" ]
      [ "1_1" ]
      [ "1_2" ]
      [ "1_3" ]
      [ "1_4" ]
      [ "1_5" ]
      [ "default" ]
      [ "dynamic" ]
      [ "libloading" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      libloading = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.6.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".kqueue."1.0.4" = overridableMkRustCrate (profileName: rec {
    name = "kqueue";
    version = "1.0.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "058a107a784f8be94c7d35c1300f4facced2e93d2fbe5b1452b44e905ddca4a9"; };
    dependencies = {
      kqueue_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".kqueue-sys."1.0.3" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".kqueue-sys."1.0.3" = overridableMkRustCrate (profileName: rec {
    name = "kqueue-sys";
    version = "1.0.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8367585489f01bc55dd27404dcf56b95e6da061a256a666ab23be9ba96a2e587"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" = overridableMkRustCrate (profileName: rec {
    name = "lazy_static";
    version = "1.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lazycell."1.3.0" = overridableMkRustCrate (profileName: rec {
    name = "lazycell";
    version = "1.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lewton."0.10.2" = overridableMkRustCrate (profileName: rec {
    name = "lewton";
    version = "0.10.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "777b48df9aaab155475a83a7df3070395ea1ac6902f5cd062b8f2b028075c030"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "ogg" ]
    ];
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
      ogg = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ogg."0.8.0" { inherit profileName; };
      tinyvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.5.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" = overridableMkRustCrate (profileName: rec {
    name = "libc";
    version = "0.2.103";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dd8f7255a17a627354f321ef0055d63b898c6fb27eff628af4d1b66b7331edf6"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "default")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/bevy_gilrs" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/bevy_gilrs" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_winit/wayland" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_gilrs") "extra_traits")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "std")
      (lib.optional (rootFeatures' ? "bevy/bevy_gilrs" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy_audio/mp3" || rootFeatures' ? "bevy_internal/bevy_gilrs" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gilrs") "use_std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libloading."0.6.7" = overridableMkRustCrate (profileName: rec {
    name = "libloading";
    version = "0.6.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "351a32417a12d5f7e82c368a66781e307834dae04c6ce0cd4456d52989229883"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libloading."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "libloading";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6f84d96438c15fcd6c3f244c8fce01d1e2b9c6b5623e9c711dc9286d8fc92d6a"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libm."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "libm";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7fc7aa29613bd6a620df431842069224d8bc9011086b1db4c0e0cd47fa03ec9a"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "stable" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libm."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "libm";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c7d73b3f436185384286bd8098d17ec07c9a7d2388a6599f824d8502b529702a"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".libudev-sys."0.1.4" = overridableMkRustCrate (profileName: rec {
    name = "libudev-sys";
    version = "0.1.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3c8469b4a23b962c1396b9b451dda50ef5b283e8dd309d69033475fa9b334324"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
    buildDependencies = {
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.20" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.5" = overridableMkRustCrate (profileName: rec {
    name = "lock_api";
    version = "0.4.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "712a4d093c9976e24e7dbca41db895dabcbac38eb5f4045393d17a95bdfb1109"; };
    dependencies = {
      scopeguard = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" = overridableMkRustCrate (profileName: rec {
    name = "log";
    version = "0.4.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "51b9bbe6c47d51fc3e1a9b945965946b4c44142ab8792c50835a980d362c2710"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "cfg_if" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mach."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "mach";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "86dd2487cdfea56def77b88438a2c915fb45113c5319bfe7e14306ca4cd0b0e1"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "deprecated" ]
      [ "use_std" ]
    ];
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mach."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "mach";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b823e83b2affd8f40a9ee8c29dbc56404c1e34cd2710921f2801e2cf29527afa"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".malloc_buf."0.0.6" = overridableMkRustCrate (profileName: rec {
    name = "malloc_buf";
    version = "0.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "62bb907fe88d54d8d9ce32a3cceab4218ed2f6b7d35617cafe9adf84e43919cb"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".matchers."0.0.1" = overridableMkRustCrate (profileName: rec {
    name = "matchers";
    version = "0.0.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f099785f7595cc4b4553a174ce30dd7589ef93391ff414dbb67f62392b9e0ce1"; };
    dependencies = {
      regex_automata = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.1.10" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" = overridableMkRustCrate (profileName: rec {
    name = "memchr";
    version = "2.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "308cc39be01b73d0d18f82a0e7b2a3df85245f84af96fdddc5d202d27e47b86a"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "default")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "std")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_winit/wayland" || rootFeatures' ? "bevy_audio") "use_std")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memmap2."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "memmap2";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d9b70ca2a6103ac8b665dc150b142ef0e4e89df640c9e6cf295d189c3caebe5a"; };
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.4" = overridableMkRustCrate (profileName: rec {
    name = "memoffset";
    version = "0.6.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "59accc507f1338036a0477ef61afdae33cde60840f4dfe481319ce3ad116ddf9"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.0.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".metal."0.21.0" = overridableMkRustCrate (profileName: rec {
    name = "metal";
    version = "0.21.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4598d719460ade24c7d91f335daf055bf2a7eec030728ce751814c50cdd6a26c"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "private" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      block = rustPackages."registry+https://github.com/rust-lang/crates.io-index".block."0.1.6" { inherit profileName; };
      cocoa_foundation = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cocoa-foundation."0.1.0" { inherit profileName; };
      foreign_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".foreign-types."0.3.2" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      objc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "minimal-lexical";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0c835948974f68e0bd58636fc6c5b1fbff7b297e3046f11b3b3c18bbac012c6d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".minimp3."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "minimp3";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "985438f75febf74c392071a975a29641b420dd84431135a6e6db721de4b74372"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      minimp3_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".minimp3-sys."0.3.2" { inherit profileName; };
      slice_deque = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slice-deque."0.3.0" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.29" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".minimp3-sys."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "minimp3-sys";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e21c73734c69dc95696c9ed8926a2b393171d98b3f5f5935686a26a487ab9b90"; };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.70" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.3.7" = overridableMkRustCrate (profileName: rec {
    name = "miniz_oxide";
    version = "0.3.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "791daaae1ed6889560f8c4359194f56648355540573244a5448a83ba1ecc7435"; };
    dependencies = {
      adler32 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".adler32."1.2.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mio."0.6.23" = overridableMkRustCrate (profileName: rec {
    name = "mio";
    version = "0.6.23";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4afd66f5b91bf2a3bc13fad0e21caedac168ca4c707504e75585648ae80e4cc4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "with-deprecated" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "fuchsia" then "fuchsia_zircon" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fuchsia-zircon."0.3.3" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "fuchsia" then "fuchsia_zircon_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fuchsia-zircon-sys."0.3.3" { inherit profileName; };
      iovec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".iovec."0.1.4" { inherit profileName; };
      ${ if hostPlatform.isWindows then "kernel32" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".kernel32-sys."0.2.2" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if hostPlatform.isWindows then "miow" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miow."0.2.2" { inherit profileName; };
      net2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".net2."0.2.37" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.4" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.2.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mio."0.7.13" = overridableMkRustCrate (profileName: rec {
    name = "mio";
    version = "0.7.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8c2bdb6314ec10835cd3293dd268473a835c02b7b352e788be788b3c6ca6bb16"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "os-ext" ]
      [ "os-poll" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if hostPlatform.isWindows then "miow" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miow."0.3.7" { inherit profileName; };
      ${ if hostPlatform.isWindows then "ntapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ntapi."0.3.6" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".mio-extras."2.0.6" = overridableMkRustCrate (profileName: rec {
    name = "mio-extras";
    version = "2.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "52403fe290012ce777c4626790c8951324a2b9e3316b3143779c72b029742f19"; };
    dependencies = {
      lazycell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazycell."1.3.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      mio = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.6.23" { inherit profileName; };
      slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".miow."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "miow";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ebd808424166322d4a38da87083bfddd3ac4c131334ed55856112eb06d46944d"; };
    dependencies = {
      kernel32 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".kernel32-sys."0.2.2" { inherit profileName; };
      net2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".net2."0.2.37" { inherit profileName; };
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.2.8" { inherit profileName; };
      ws2_32 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ws2_32-sys."0.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".miow."0.3.7" = overridableMkRustCrate (profileName: rec {
    name = "miow";
    version = "0.3.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b9f1c5b025cda876f66ef43a113f91ebc9f4ccef34843000e0adf6ebbab84e21"; };
    dependencies = {
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".naga."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "naga";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05089b2acdf0e6a962cdbf5e328402345a27f59fcde1a59fe97a73e8149d416f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "default")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "glsl-out")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "msl-out")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "petgraph")
      (lib.optional (rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_wgpu/trace") "serde")
      (lib.optional (rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_wgpu/trace") "serialize")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "spirv")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "spv-in")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "spv-out")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "wgsl-in")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "bit_set" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bit-set."0.5.2" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "fxhash" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "num_traits" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "petgraph" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".petgraph."0.5.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_wgpu/trace" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "spirv" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv_headers."1.5.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.29" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "ndk";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5eb167c1febed0a496639034d0c76b3b74263636045db5489eee52143c246e73"; };
    dependencies = {
      jni_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; };
      ffi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.2.1" { inherit profileName; };
      num_enum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_enum."0.4.3" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.29" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "ndk";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8794322172319b972f528bf90c6b467be0079f1fa82780ffb431088e741a73ab"; };
    dependencies = {
      jni_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; };
      ffi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.2.1" { inherit profileName; };
      num_enum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_enum."0.5.4" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.29" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "ndk";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d64d6af06fde0e527b1ba5c7b79a6cc89cfc46325b0b2887dffe8f70197e0c3c"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      jni_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni-sys."0.3.0" { inherit profileName; };
      ffi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.2.1" { inherit profileName; };
      num_enum = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_enum."0.5.4" { inherit profileName; };
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.29" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "ndk-glue";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bdf399b8b7a39c6fb153c4ec32c72fd5fe789df24a647f229c239aa7adb15241"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal") "android_logger")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "default")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal") "logger")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal" then "android_logger" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".android_logger."0.8.6" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit" then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit" then "ndk" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit" then "ndk_macro" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-macro."0.2.0" { profileName = "__noProfile"; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit" then "ndk_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "ndk-glue";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c5caf0c24d51ac1c905c27d4eda4fa0635bbe0de596b8f79235e0b17a4d29385"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ndk = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.3.0" { inherit profileName; };
      ndk_macro = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-macro."0.2.0" { profileName = "__noProfile"; };
      ndk_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "ndk-glue";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d3e9e94628f24e7a3cb5b96a2dc5683acd9230bf11991c2a1677b87695138420"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ndk = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.4.0" { inherit profileName; };
      ndk_macro = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-macro."0.2.0" { profileName = "__noProfile"; };
      ndk_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-macro."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "ndk-macro";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05d1c6307dc424d0f65b9b06e94f88248e6305726b14729fd67a5e47b2dc481d"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "default")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal") "logger")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit" then "darling" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".darling."0.10.2" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit" then "proc_macro_crate" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."0.1.5" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit" then "proc_macro2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit" then "quote" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit" then "syn" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "ndk-sys";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c44922cb3dbb1c70b5e5f443d63b64363a898564d739ba5198e3a9138442868d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".net2."0.2.37" = overridableMkRustCrate (profileName: rec {
    name = "net2";
    version = "0.2.37";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "391630d12b68002ae1e25e8f974306474966550ad82dac6886fb8910c19568ae"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "duration" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" || hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nix."0.18.0" = overridableMkRustCrate (profileName: rec {
    name = "nix";
    version = "0.18.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "83450fe6a6142ddd95fb064b746083fc4ef1705fe81f64a64e1d4b39f54a1055"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."0.1.10" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
    buildDependencies = {
      ${ if hostPlatform.parsed.kernel.name == "dragonfly" then "cc" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.70" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nix."0.20.1" = overridableMkRustCrate (profileName: rec {
    name = "nix";
    version = "0.20.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "df8e5e343312e7fbeb2a52139114e9e702991ef9c2aea6817ff2440b35647d56"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "redox") then "memoffset" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memoffset."0.6.4" { inherit profileName; };
    };
    buildDependencies = {
      ${ if hostPlatform.parsed.kernel.name == "dragonfly" then "cc" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.70" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nom."5.1.2" = overridableMkRustCrate (profileName: rec {
    name = "nom";
    version = "5.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ffb4262d26ed83a1c0a33a38fe2bb15797329c85770da05e6b828ddb782627af"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.3" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".nom."7.0.0" = overridableMkRustCrate (profileName: rec {
    name = "nom";
    version = "7.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ffd9d26838a953b4af82cbeb9f1592c6798916983959be223a7124e992742c1"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      memchr = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      minimal_lexical = rustPackages."registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.1.3" { inherit profileName; };
    };
    buildDependencies = {
      version_check = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.3" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".notify."5.0.0-pre.13" = overridableMkRustCrate (profileName: rec {
    name = "notify";
    version = "5.0.0-pre.13";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "245d358380e2352c2d020e8ee62baac09b3420f1f6c012a31326cfced4ad487d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "fsevent-sys" ]
      [ "macos_fsevent" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      crossbeam_channel = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.1" { inherit profileName; };
      filetime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".filetime."0.2.15" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" then "fsevent_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fsevent-sys."4.0.0" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "linux" then "inotify" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".inotify."0.9.4" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "dragonflybsd" then "kqueue" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".kqueue."1.0.4" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd" || hostPlatform.parsed.kernel.name == "dragonflybsd" || hostPlatform.parsed.kernel.name == "linux" then "mio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.7.13" { inherit profileName; };
      walkdir = rustPackages."registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.2" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ntapi."0.3.6" = overridableMkRustCrate (profileName: rec {
    name = "ntapi";
    version = "0.3.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f6bb902e437b6d86e03cce10a7e2af662292c5dfef23b65899ea3ac9354ad44"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "user" ]
    ];
    dependencies = {
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-derive."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "num-derive";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "876a53fff98e03a936a674b29568b0e605f06b29372c2489ff4de23f1949743d"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.44" = overridableMkRustCrate (profileName: rec {
    name = "num-integer";
    version = "0.1.44";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d2cc698a63b549a70bc047073d2949cce27cd1c7b0a4a862d08a8031bc2801db"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "i128")
      (lib.optional (rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit" then "num_traits" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit" then "autocfg" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.0.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-iter."0.1.42" = overridableMkRustCrate (profileName: rec {
    name = "num-iter";
    version = "0.1.42";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b2021c8337a54d21aca0d59a92577a029af9431cb59b909b03252b9c164fad59"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      num_integer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.44" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.0.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-rational."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "num-rational";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "12ac428b1cb17fce6f731001d307d351ec70a6d202fc2e60f7d4c5e42d8f4f07"; };
    dependencies = {
      num_integer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.44" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
    buildDependencies = {
      autocfg = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.0.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" = overridableMkRustCrate (profileName: rec {
    name = "num-traits";
    version = "0.2.14";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9a64b1ec5cda2586e284722486d802acf1f7dbdc623e2bfc57e65ca1cd099290"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "default")
      (lib.optional (rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "i128")
      (lib.optional (rootFeatures' ? "bevy_reflect/bevy" || rootFeatures' ? "bevy_reflect/glam" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "libm")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bmp" || rootFeatures' ? "bevy/dds" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/hdr" || rootFeatures' ? "bevy/jpeg" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/png" || rootFeatures' ? "bevy/render" || rootFeatures' ? "bevy/subpixel_glyph_atlas" || rootFeatures' ? "bevy/tga" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy_internal/bevy_pbr" || rootFeatures' ? "bevy_internal/bevy_render" || rootFeatures' ? "bevy_internal/bevy_sprite" || rootFeatures' ? "bevy_internal/bevy_text" || rootFeatures' ? "bevy_internal/bevy_ui" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bmp" || rootFeatures' ? "bevy_internal/dds" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/hdr" || rootFeatures' ? "bevy_internal/jpeg" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/png" || rootFeatures' ? "bevy_internal/subpixel_glyph_atlas" || rootFeatures' ? "bevy_internal/tga" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy_reflect/bevy" || rootFeatures' ? "bevy_reflect/glam" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "libm" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libm."0.2.1" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "bevy_reflect/bevy" || rootFeatures' ? "bevy_reflect/glam" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "autocfg" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.0.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.13.0" = overridableMkRustCrate (profileName: rec {
    name = "num_cpus";
    version = "1.13.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "05499f3756671c15885fee9034446956fff3f243d6077b91e5767df161f766b3"; };
    dependencies = {
      ${ if (hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "aarch64") && hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.1.19" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_enum."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "num_enum";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ca565a7df06f3d4b485494f25ba05da1435950f4dc263440eda7a6fa9b8e36e4"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      derivative = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derivative."2.2.0" { profileName = "__noProfile"; };
      num_enum_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".num_enum_derive."0.4.3" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_enum."0.5.4" = overridableMkRustCrate (profileName: rec {
    name = "num_enum";
    version = "0.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3f9bd055fb730c4f8f4f57d45d35cd6b3f0980535b056dc7ff119cee6a66ed6f"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      derivative = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".derivative."2.2.0" { profileName = "__noProfile"; };
      num_enum_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".num_enum_derive."0.5.4" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_enum_derive."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "num_enum_derive";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ffa5a33ddddfee04c0283a7653987d634e880347e96b5b2ed64de07efb59db9d"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      proc_macro_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."0.1.5" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".num_enum_derive."0.5.4" = overridableMkRustCrate (profileName: rec {
    name = "num_enum_derive";
    version = "0.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "486ea01961c4a818096de679a8b740b26d9033146ac5291b1c98557658f8cdd9"; };
    features = builtins.concatLists [
      [ "proc-macro-crate" ]
      [ "std" ]
    ];
    dependencies = {
      proc_macro_crate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.0" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" = overridableMkRustCrate (profileName: rec {
    name = "objc";
    version = "0.2.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "915b1b472bc21c53464d6c8461c9d3af805ba1ef837e1cac254428f4a77177b1"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "objc_exception")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit" then "malloc_buf" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".malloc_buf."0.0.6" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "objc_exception" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc_exception."0.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".objc_exception."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "objc_exception";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ad970fb455818ad6cba4c122ad012fae53ae8b4795f86378bce65e4f6bab2ca4"; };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.70" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".oboe."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "oboe";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e15e22bc67e047fe342a32ecba55f555e3be6166b04dd157cd0f803dfa9f48e1"; };
    features = builtins.concatLists [
      [ "java-interface" ]
      [ "jni" ]
      [ "ndk" ]
      [ "ndk-glue" ]
    ];
    dependencies = {
      jni = rustPackages."registry+https://github.com/rust-lang/crates.io-index".jni."0.19.0" { inherit profileName; };
      ndk = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.4.0" { inherit profileName; };
      ndk_glue = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.4.0" { inherit profileName; };
      num_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".num-derive."0.3.3" { profileName = "__noProfile"; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      oboe_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".oboe-sys."0.4.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".oboe-sys."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "oboe-sys";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "338142ae5ab0aaedc8275aa8f67f460e43ae0fca76a695a742d56da0a269eadc"; };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.70" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ogg."0.8.0" = overridableMkRustCrate (profileName: rec {
    name = "ogg";
    version = "0.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6951b4e8bf21c8193da321bcce9c9dd2e13c858fe078bf9054a288b419ae5d6e"; };
    dependencies = {
      byteorder = rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.4.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".once_cell."1.8.0" = overridableMkRustCrate (profileName: rec {
    name = "once_cell";
    version = "1.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "692fcb63b64b1758029e0a96ee63e049ce8c5948587f2f7208df04625e5f6b56"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "alloc")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "default")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "race")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "std")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "unstable")
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".owned_ttf_parser."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "owned_ttf_parser";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9f923fb806c46266c02ab4a5b239735c144bdeda724a50ed058e5226f594cde3"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      ttf_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ttf-parser."0.6.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".owned_ttf_parser."0.12.1" = overridableMkRustCrate (profileName: rec {
    name = "owned_ttf_parser";
    version = "0.12.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "60ac8dda2e5cc09bf6480e3b3feff9783db251710c922ae9369a429c51efdeb0"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
      [ "variable-fonts" ]
    ];
    dependencies = {
      ttf_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ttf-parser."0.12.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking."2.0.0" = overridableMkRustCrate (profileName: rec {
    name = "parking";
    version = "2.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "427c3892f9e783d91cc128285287e70a59e206ca452770ece88a76f7a3eddd72"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot";
    version = "0.11.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7d17b78036a60663b797adeaee46f5c9dfebb86948d1255007a1d6be0271ff99"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.11" { inherit profileName; };
      lock_api = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.5" { inherit profileName; };
      parking_lot_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.8.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.8.5" = overridableMkRustCrate (profileName: rec {
    name = "parking_lot_core";
    version = "0.8.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d76e8e1493bcac0d2766c42737f34458f1c8c50c0d23bcb24ea953affb273216"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      instant = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.11" { inherit profileName; };
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.10" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.6.1" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".peeking_take_while."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "peeking_take_while";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "19b17cddbe7ec3f8bc800887bab5e717348c95ea2ca0b1bf0837fb964dc67099"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" = overridableMkRustCrate (profileName: rec {
    name = "percent-encoding";
    version = "2.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".petgraph."0.5.1" = overridableMkRustCrate (profileName: rec {
    name = "petgraph";
    version = "0.5.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "467d164a6de56270bd7c4d070df81d07beace25012d5103ced4e9ff08d6afdb7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "graphmap" ]
      [ "matrix_graph" ]
      [ "stable_graph" ]
    ];
    dependencies = {
      fixedbitset = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fixedbitset."0.2.0" { inherit profileName; };
      indexmap = rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.7.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.7" = overridableMkRustCrate (profileName: rec {
    name = "pin-project-lite";
    version = "0.2.7";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8d31d11c69a6b52a174b42bdc0c30e5e11670f90788b2c471c31c1d17d449443"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.20" = overridableMkRustCrate (profileName: rec {
    name = "pkg-config";
    version = "0.3.20";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7c9b1041b4387893b91ee6746cddfc28516aff326a3519fb2adf820932c5e6cb"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".png."0.16.8" = overridableMkRustCrate (profileName: rec {
    name = "png";
    version = "0.16.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3c3287920cb847dee3de33d301c463fba14dda99db24214ddf93f83d3021f4c6"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "deflate" ]
      [ "png-encoding" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      crc32fast = rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.2.1" { inherit profileName; };
      deflate = rustPackages."registry+https://github.com/rust-lang/crates.io-index".deflate."0.8.6" { inherit profileName; };
      miniz_oxide = rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.3.7" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.10" = overridableMkRustCrate (profileName: rec {
    name = "ppv-lite86";
    version = "0.2.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac74c624d6b2d21f425f752262f42188365d7b8ff1aff74c82e45136510a4857"; };
    features = builtins.concatLists [
      [ "simd" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-crate";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1d6ea3c4595b96363c13943497db34af4460fb474a95c43f4446ad341b8c9785"; };
    dependencies = {
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro-crate";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1ebace6889caf889b4d3f76becee12e90353f2b8c7d875534a71e5742f8f6f83"; };
    dependencies = {
      thiserror = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.29" { inherit profileName; };
      toml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.5.8" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" = overridableMkRustCrate (profileName: rec {
    name = "proc-macro2";
    version = "1.0.29";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b9f5105d4fdaab20335ca9565e106a5d9b82b6219b5ba735731124ac6711d23d"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      unicode_xid = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" = overridableMkRustCrate (profileName: rec {
    name = "quote";
    version = "1.0.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c3d0b9745dc2debf507c8422de05d7226cc1f0644216dfdfead988f9b1ab32a7"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "proc-macro" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand."0.8.4" = overridableMkRustCrate (profileName: rec {
    name = "rand";
    version = "0.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2e7573632e6454cf6b99d7aac4ccca54be06da05aca2ef7423d22d27d4d4bcd8"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "getrandom" ]
      [ "libc" ]
      [ "rand_chacha" ]
      [ "rand_hc" ]
      [ "std" ]
      [ "std_rng" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      ${ if !(hostPlatform.parsed.kernel.name == "emscripten") then "rand_chacha" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.3" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "emscripten" then "rand_hc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_hc."0.3.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "rand_chacha";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88"; };
    features = builtins.concatLists [
      [ "std" ]
    ];
    dependencies = {
      ppv_lite86 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.10" { inherit profileName; };
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.3" = overridableMkRustCrate (profileName: rec {
    name = "rand_core";
    version = "0.6.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d34f1408f55294453790c48b2f1ebbb1c5b4b7563eb1f418bcfcfdbb06ebb4e7"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "getrandom" ]
      [ "std" ]
    ];
    dependencies = {
      getrandom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rand_hc."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "rand_hc";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d51e9f596de227fda2ea6c84607f5558e196eeaf43c986b724ba4fb8fdf497e7"; };
    dependencies = {
      rand_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".range-alloc."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "range-alloc";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "63e935c45e09cc6dcf00d2f0b2d630a58f4095320223d47fc68918722f0538b6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" = overridableMkRustCrate (profileName: rec {
    name = "raw-window-handle";
    version = "0.3.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0a441a7a6c80ad6473bd4b74ec1c9a4c951794285bf941c2126f607c72e48211"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rectangle-pack."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "rectangle-pack";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "831eb2fcb5b72b09c72a3f2d24c09a28d79886512827cd4674d9bac10557f16a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.2.10" = overridableMkRustCrate (profileName: rec {
    name = "redox_syscall";
    version = "0.2.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8383f39639269cde97d255a32bdb68c047337295414940c68bdd30c2e13203ff"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" = overridableMkRustCrate (profileName: rec {
    name = "regex";
    version = "1.5.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d07a8629359eb56f1e2fb1652bb04212c072a87ba68546a04065d525673ac461"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal") "aho-corasick")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal") "default")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal") "memchr")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal") "perf")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal") "perf-cache")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal") "perf-dfa")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal") "perf-inline")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal") "perf-literal")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "std")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal") "unicode")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal") "unicode-age")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal") "unicode-bool")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal") "unicode-case")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal") "unicode-gencat")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal") "unicode-perl")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal") "unicode-script")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal") "unicode-segment")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal" then "aho_corasick" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".aho-corasick."0.7.18" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_internal" then "memchr" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.4.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit" then "regex_syntax" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.25" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.1.10" = overridableMkRustCrate (profileName: rec {
    name = "regex-automata";
    version = "0.1.10";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "regex-syntax" ]
      [ "std" ]
    ];
    dependencies = {
      regex_syntax = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.25" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.25" = overridableMkRustCrate (profileName: rec {
    name = "regex-syntax";
    version = "0.6.25";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f497285884f3fcff424ffc933e56d7cbca511def0c9831a7f9b5f6153e3cc89b"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "unicode" ]
      [ "unicode-age" ]
      [ "unicode-bool" ]
      [ "unicode-case" ]
      [ "unicode-gencat" ]
      [ "unicode-perl" ]
      [ "unicode-script" ]
      [ "unicode-segment" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rodio."0.13.1" = overridableMkRustCrate (profileName: rec {
    name = "rodio";
    version = "0.13.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b65c2eda643191f6d1bb12ea323a9db8d9ba95374e9be3780b5a9fb5cfb8520f"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy_audio/flac" || rootFeatures' ? "bevy_internal/flac") "claxon")
      (lib.optional (rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy_audio/flac" || rootFeatures' ? "bevy_internal/flac") "flac")
      (lib.optional (rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_audio/wav" || rootFeatures' ? "bevy_internal/wav") "hound")
      (lib.optional (rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy_audio/vorbis" || rootFeatures' ? "bevy_internal/vorbis") "lewton")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy_audio/mp3" || rootFeatures' ? "bevy_internal/mp3") "minimp3")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy_audio/mp3" || rootFeatures' ? "bevy_internal/mp3") "mp3")
      (lib.optional (rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy_audio/vorbis" || rootFeatures' ? "bevy_internal/vorbis") "vorbis")
      (lib.optional (rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_audio/wav" || rootFeatures' ? "bevy_internal/wav") "wav")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy_audio/flac" || rootFeatures' ? "bevy_internal/flac" then "claxon" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".claxon."0.4.3" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio" then "cpal" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpal."0.13.4" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_audio/wav" || rootFeatures' ? "bevy_internal/wav" then "hound" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".hound."3.4.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy_audio/vorbis" || rootFeatures' ? "bevy_internal/vorbis" then "lewton" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lewton."0.10.2" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy_audio/mp3" || rootFeatures' ? "bevy_internal/mp3" then "minimp3" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".minimp3."0.5.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ron."0.6.5" = overridableMkRustCrate (profileName: rec {
    name = "ron";
    version = "0.6.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "45005aa836116903a49cf3461474da697cfe66221762c6e95871092009ec86d6"; };
    dependencies = {
      base64 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.0" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "rustc-hash";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "rustc_version";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a"; };
    dependencies = {
      semver = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."0.9.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rusttype."0.9.2" = overridableMkRustCrate (profileName: rec {
    name = "rusttype";
    version = "0.9.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "dc7c727aded0be18c5b80c1640eae0ac8e396abf6fa8477d96cb37d18ee5ec59"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "has-atomics" ]
      [ "std" ]
    ];
    dependencies = {
      ab_glyph_rasterizer = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ab_glyph_rasterizer."0.1.4" { inherit profileName; };
      owned_ttf_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".owned_ttf_parser."0.6.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".rusty-xinput."1.2.0" = overridableMkRustCrate (profileName: rec {
    name = "rusty-xinput";
    version = "1.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d2aa654bc32eb9ca14cce1a084abc9dfe43949a4547c35269a094c39272db3bb"; };
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.5" = overridableMkRustCrate (profileName: rec {
    name = "ryu";
    version = "1.0.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "71d301d4193d031abdd79ff7e3dd721168a9572ef3fe51a1517aba235bd8f86e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" = overridableMkRustCrate (profileName: rec {
    name = "same-file";
    version = "1.0.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi_util" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scoped-tls."1.0.0" = overridableMkRustCrate (profileName: rec {
    name = "scoped-tls";
    version = "1.0.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ea6a9290e3c9cf0f18145ef7ffa62d68ee0bf5fcd651017e586dc7fd5da448c2"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scoped_threadpool."0.1.9" = overridableMkRustCrate (profileName: rec {
    name = "scoped_threadpool";
    version = "0.1.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1d51f5df5af43ab3f1360b429fa5e0152ac5ce8c0bd6485cae490332e96846a8"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "scopeguard";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver."0.9.0" = overridableMkRustCrate (profileName: rec {
    name = "semver";
    version = "0.9.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      semver_parser = rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver-parser."0.7.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".semver-parser."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "semver-parser";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" = overridableMkRustCrate (profileName: rec {
    name = "serde";
    version = "1.0.130";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f12d06de37cf59146fbdecab66aa99f9fe4f78722e3607577a5375d66bd0c913"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_derive" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_ecs_macros" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "default")
      (lib.optional (rootFeatures' ? "bevy_reflect/bevy" || rootFeatures' ? "bevy_reflect/glam" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "derive")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "serde_derive")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_derive" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_ecs_macros" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "serde_derive" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.130" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.130" = overridableMkRustCrate (profileName: rec {
    name = "serde_derive";
    version = "1.0.130";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d7bc1a1ab1961464eae040d96713baa5a724a8152c1222492465b54322ec508b"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.68" = overridableMkRustCrate (profileName: rec {
    name = "serde_json";
    version = "1.0.68";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0f690853975602e1bfe1ccbf50504d67174e3bcf340f23b5ea9992e0587a52d8"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "default")
      (lib.optional (rootFeatures' ? "bevy/bevy_gltf" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy_internal/bevy_gltf" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gltf") "raw_value")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit" then "itoa" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."0.4.8" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit" then "ryu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.5" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sha1."0.6.0" = overridableMkRustCrate (profileName: rec {
    name = "sha1";
    version = "0.6.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2579985fda508104f7587689507983eadd6a6e84dd35d6d115361f530916fa0d"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".shaderc."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "shaderc";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "58da8aaf4ad3508598cdf098567114c98d5f455de7d69b1213232ac557bc67ea"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      shaderc_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".shaderc-sys."0.7.3" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".shaderc-sys."0.7.3" = overridableMkRustCrate (profileName: rec {
    name = "shaderc-sys";
    version = "0.7.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8bd76ec0bd25f2017a65250373485e43cdc81b5cb8fd83c6115375c8d018cdf9"; };
    dependencies = {
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
    buildDependencies = {
      cmake = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cmake."0.1.45" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".sharded-slab."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "sharded-slab";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "740223c51853f3145fe7c90360d2d4232f2b62e3449489c207eccde818979982"; };
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".shlex."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "shlex";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7fdf1b9db47230893d76faad238fd6097fd6d6a9245cd7a4d90dbd639536bbd2"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slab."0.4.4" = overridableMkRustCrate (profileName: rec {
    name = "slab";
    version = "0.4.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c307a32c1c5c437f38c7fd45d753050587732ba8628319fbdf12a7e289ccc590"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slice-deque."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "slice-deque";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "31ef6ee280cdefba6d2d0b4b78a84a1c1a3f3a4cec98c2d4231c8bc225de0f25"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "use_std" ]
    ];
    dependencies = {
      ${ if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "dragonfly" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then "mach" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mach."0.3.2" { inherit profileName; };
      ${ if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".slotmap."0.4.3" = overridableMkRustCrate (profileName: rec {
    name = "slotmap";
    version = "0.4.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6bf34684c5767b87de9119790e92e9a1d60056be2ceeaf16a8e6ef13082aeab1"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smallvec."1.6.1" = overridableMkRustCrate (profileName: rec {
    name = "smallvec";
    version = "1.6.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fe0f37c9e8f3c5a4a66ad655a93c74daac4ad00c441533bf5c6e7990bb42604e"; };
    features = builtins.concatLists [
      [ "serde" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".smithay-client-toolkit."0.12.3" = overridableMkRustCrate (profileName: rec {
    name = "smithay-client-toolkit";
    version = "0.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4750c76fd5d3ac95fa3ed80fe667d6a3d8590a960e5b575b98eea93339a80b80"; };
    features = builtins.concatLists [
      [ "andrew" ]
      [ "calloop" ]
      [ "default" ]
      [ "frames" ]
    ];
    dependencies = {
      andrew = rustPackages."registry+https://github.com/rust-lang/crates.io-index".andrew."0.3.1" { inherit profileName; };
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      calloop = rustPackages."registry+https://github.com/rust-lang/crates.io-index".calloop."0.6.5" { inherit profileName; };
      dlib = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dlib."0.4.2" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      memmap2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".memmap2."0.1.0" { inherit profileName; };
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.18.0" { inherit profileName; };
      wayland_client = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.28.6" { inherit profileName; };
      wayland_cursor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-cursor."0.28.6" { inherit profileName; };
      wayland_protocols = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.28.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spirv-reflect."0.2.3" = overridableMkRustCrate (profileName: rec {
    name = "spirv-reflect";
    version = "0.2.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cecc7af6a7d3ca6d15f4d6b5077df89c77ad1f4b314d0cabee221656d041dad7"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.130" { profileName = "__noProfile"; };
      spirv_headers = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv_headers."1.5.0" { inherit profileName; };
    };
    buildDependencies = {
      cc = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.70" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spirv-std."0.4.0-alpha.8" = overridableMkRustCrate (profileName: rec {
    name = "spirv-std";
    version = "0.4.0-alpha.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "0e2676f3e58345b7c742b266b5bec022445b43e6471b9a00895faec03a52723e"; };
    features = builtins.concatLists [
      [ "const-generics" ]
      [ "default" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
      spirv_std_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv-std-macros."0.4.0-alpha.12" { profileName = "__noProfile"; };
      spirv_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv-types."0.4.0-alpha.12" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spirv-std-macros."0.4.0-alpha.12" = overridableMkRustCrate (profileName: rec {
    name = "spirv-std-macros";
    version = "0.4.0-alpha.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "207e8515dfbb48bff03f64bf5f8388d4e0f2f526ee769cc6556df98477098ca5"; };
    dependencies = {
      heck = rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.3.3" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      spirv_types = rustPackages."registry+https://github.com/rust-lang/crates.io-index".spirv-types."0.4.0-alpha.12" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spirv-types."0.4.0-alpha.12" = overridableMkRustCrate (profileName: rec {
    name = "spirv-types";
    version = "0.4.0-alpha.12";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "71cc4b8f7ec707459fdeddb4f137109947045592f5b0c139f7bf1360058bac6b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spirv_cross."0.23.1" = overridableMkRustCrate (profileName: rec {
    name = "spirv_cross";
    version = "0.23.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "60647fadbf83c4a72f0d7ea67a7ca3a81835cf442b8deae5c134c3e0055b2e14"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "glsl" ]
      [ "hlsl" ]
      [ "msl" ]
    ];
    dependencies = {
      ${ if hostPlatform.config == "wasm32-unknown-unknown" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      ${ if hostPlatform.config == "wasm32-unknown-unknown" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
    };
    buildDependencies = {
      ${ if !(hostPlatform.parsed.cpu.name == "wasm32") then "cc" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.0.70" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".spirv_headers."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "spirv_headers";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1f5b132530b1ac069df335577e3581765995cba5a13995cdbbdbc8fb057c532c"; };
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      num_traits = rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.14" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stdweb."0.1.3" = overridableMkRustCrate (profileName: rec {
    name = "stdweb";
    version = "0.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ef5430c8e36b713e13b48a9f709cc21e046723fe44ce34587b73a830203b533e"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stdweb."0.4.20" = overridableMkRustCrate (profileName: rec {
    name = "stdweb";
    version = "0.4.20";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d022496b16281348b52d0e30ae99e01a73d737b2f45d38fed4edf79f9325a1d5"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "serde" ]
      [ "serde_json" ]
    ];
    dependencies = {
      discard = rustPackages."registry+https://github.com/rust-lang/crates.io-index".discard."1.0.4" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.68" { inherit profileName; };
      stdweb_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".stdweb-derive."0.5.3" { profileName = "__noProfile"; };
      stdweb_internal_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".stdweb-internal-macros."0.2.9" { profileName = "__noProfile"; };
      stdweb_internal_runtime = rustPackages."registry+https://github.com/rust-lang/crates.io-index".stdweb-internal-runtime."0.1.5" { inherit profileName; };
      ${ if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.vendor.name == "unknown" && hostPlatform.parsed.kernel.name == "unknown" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
    };
    buildDependencies = {
      rustc_version = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.2.3" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stdweb-derive."0.5.3" = overridableMkRustCrate (profileName: rec {
    name = "stdweb-derive";
    version = "0.5.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c87a60a40fccc84bef0652345bbbbbe20a605bf5d0ce81719fc476f5c03b50ef"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.130" { profileName = "__noProfile"; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stdweb-internal-macros."0.2.9" = overridableMkRustCrate (profileName: rec {
    name = "stdweb-internal-macros";
    version = "0.2.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "58fa5ff6ad0d98d1ffa8cb115892b6e69d67799f6763e162a1c9db421dc22e11"; };
    dependencies = {
      base_x = rustPackages."registry+https://github.com/rust-lang/crates.io-index".base-x."0.2.8" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
      serde_derive = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.130" { profileName = "__noProfile"; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.68" { inherit profileName; };
      sha1 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1."0.6.0" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stdweb-internal-runtime."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "stdweb-internal-runtime";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "213701ba3370744dcd1a12960caa4843b3d68b4d1c0a5d575e0d65b2ee9d16c0"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".storage-map."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "storage-map";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "418bb14643aa55a7841d5303f72cf512cfb323b8cc221d51580500a1ca75206c"; };
    dependencies = {
      lock_api = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".stretch."0.3.2" = overridableMkRustCrate (profileName: rec {
    name = "stretch";
    version = "0.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7b0dc6d20ce137f302edf90f9cd3d278866fd7fb139efca6f246161222ad6d87"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libm = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libm."0.1.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".strsim."0.9.3" = overridableMkRustCrate (profileName: rec {
    name = "strsim";
    version = "0.9.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "6446ced80d6c486436db5c078dde11a9f73d42b57fb273121e160b84f63d894c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".svg_fmt."0.4.1" = overridableMkRustCrate (profileName: rec {
    name = "svg_fmt";
    version = "0.4.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8fb1df15f412ee2e9dfc1c504260fa695c1c3f10fe9f4a6ee2d2184d7d6450e2"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" = overridableMkRustCrate (profileName: rec {
    name = "syn";
    version = "1.0.65";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f3a1d708c221c5a612956ef9f75b37e454e88d1f7b899fbd3a18d4252012d663"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_derive" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_ecs_macros" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "clone-impls")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_derive" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_ecs_macros" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "default")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_derive" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_ecs_macros" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "derive")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "extra-traits")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "full")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_derive" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_ecs_macros" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "parsing")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_derive" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_ecs_macros" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "printing")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_derive" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_ecs_macros" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "proc-macro")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_derive" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_ecs_macros" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "quote")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "visit")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "visit-mut")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_derive" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_ecs_macros" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "proc_macro2" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_derive" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_ecs_macros" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "quote" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_derive" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_ecs_macros" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "unicode_xid" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.29" = overridableMkRustCrate (profileName: rec {
    name = "thiserror";
    version = "1.0.29";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "602eca064b2d83369e2b2f34b09c70b605402801927c65c11071ac911d299b88"; };
    dependencies = {
      thiserror_impl = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.29" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.29" = overridableMkRustCrate (profileName: rec {
    name = "thiserror-impl";
    version = "1.0.29";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bad553cc2c78e8de258400763a647e80e6d1b31ee237275d756f6836d204494c"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.3" = overridableMkRustCrate (profileName: rec {
    name = "thread_local";
    version = "1.1.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8018d24e04c95ac8790716a5987d0fec4f8b27249ffa0f7d33f1369bdfb88cbd"; };
    dependencies = {
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.8.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".thunderdome."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "thunderdome";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7572415bd688d401c52f6e36f4c8e805b9ae1622619303b9fa835d531db0acae"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.5.0" = overridableMkRustCrate (profileName: rec {
    name = "tinyvec";
    version = "1.5.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f83b2a3d4d9091d0abd7eba4dc2710b1718583bd4d8992e2190720ea38f391f7"; };
    features = builtins.concatLists [
      [ "alloc" ]
      [ "default" ]
      [ "tinyvec_macros" ]
    ];
    dependencies = {
      tinyvec_macros = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "tinyvec_macros";
    version = "0.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "cda74da7e1a664f795bb1f8a87ec406fb89a02522cf6e50620d016add6dbbf5c"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".toml."0.5.8" = overridableMkRustCrate (profileName: rec {
    name = "toml";
    version = "0.5.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a31142970826733df8241ef35dc040ef98c679ab14d7c3e54d827099b3acecaa"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.28" = overridableMkRustCrate (profileName: rec {
    name = "tracing";
    version = "0.1.28";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "84f96e095c0c82419687c20ddf5cb3eadb61f4e1405923c9dc8e53a1adacbda8"; };
    features = builtins.concatLists [
      [ "attributes" ]
      [ "default" ]
      [ "release_max_level_info" ]
      [ "std" ]
      [ "tracing-attributes" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      pin_project_lite = rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.7" { inherit profileName; };
      tracing_attributes = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.16" { profileName = "__noProfile"; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.20" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.16" = overridableMkRustCrate (profileName: rec {
    name = "tracing-attributes";
    version = "0.1.16";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "98863d0dd09fa59a1b79c6750ad80dbda6b75f4e71c437a6a1a8cb91a8bcbd77"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-chrome."0.3.1" = overridableMkRustCrate (profileName: rec {
    name = "tracing-chrome";
    version = "0.3.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a0b56325e75af38a126daf4e9b577bdb6de801ec0de8b431749a4f4754657804"; };
    dependencies = {
      json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".json."0.12.4" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.28" { inherit profileName; };
      tracing_subscriber = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.2.24" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.20" = overridableMkRustCrate (profileName: rec {
    name = "tracing-core";
    version = "0.1.20";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "46125608c26121c81b0c6d693eab5a420e416da7e43c426d2e8f7df8da8a3acf"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "default")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "lazy_static")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "std")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "tracing-log";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a6923477a48e41c1951f1999ef8bb5a3023eb723ceadafe78ffb65dc366761e3"; };
    features = builtins.concatLists [
      [ "log-tracer" ]
      [ "std" ]
    ];
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.20" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-serde."0.1.2" = overridableMkRustCrate (profileName: rec {
    name = "tracing-serde";
    version = "0.1.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fb65ea441fbb84f9f6748fd496cf7f63ec9af5bca94dd86456978d055e8eb28b"; };
    dependencies = {
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.20" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.2.24" = overridableMkRustCrate (profileName: rec {
    name = "tracing-subscriber";
    version = "0.2.24";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fdd0568dbfe3baf7048b7908d2b32bca0d81cd56bec6d2a8f894b01d74f86be3"; };
    features = builtins.concatLists [
      [ "ansi" ]
      [ "ansi_term" ]
      [ "chrono" ]
      [ "default" ]
      [ "env-filter" ]
      [ "fmt" ]
      [ "json" ]
      [ "lazy_static" ]
      [ "matchers" ]
      [ "regex" ]
      [ "registry" ]
      [ "serde" ]
      [ "serde_json" ]
      [ "sharded-slab" ]
      [ "smallvec" ]
      [ "thread_local" ]
      [ "tracing" ]
      [ "tracing-log" ]
      [ "tracing-serde" ]
    ];
    dependencies = {
      ansi_term = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ansi_term."0.12.1" { inherit profileName; };
      chrono = rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.19" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      matchers = rustPackages."registry+https://github.com/rust-lang/crates.io-index".matchers."0.0.1" { inherit profileName; };
      regex = rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.5.4" { inherit profileName; };
      serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
      serde_json = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.68" { inherit profileName; };
      sharded_slab = rustPackages."registry+https://github.com/rust-lang/crates.io-index".sharded-slab."0.1.3" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.6.1" { inherit profileName; };
      thread_local = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.3" { inherit profileName; };
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.28" { inherit profileName; };
      tracing_core = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.20" { inherit profileName; };
      tracing_log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.1.2" { inherit profileName; };
      tracing_serde = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-serde."0.1.2" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".tracing-wasm."0.2.0" = overridableMkRustCrate (profileName: rec {
    name = "tracing-wasm";
    version = "0.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8ae741706df70547fca8715f74a8569677666e7be3454313af70f6e158034485"; };
    dependencies = {
      tracing = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.28" { inherit profileName; };
      tracing_subscriber = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.2.24" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ttf-parser."0.6.2" = overridableMkRustCrate (profileName: rec {
    name = "ttf-parser";
    version = "0.6.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3e5d7cd7ab3e47dda6e56542f4bbf3824c15234958c6e1bd6aaa347e93499fdc"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ttf-parser."0.12.3" = overridableMkRustCrate (profileName: rec {
    name = "ttf-parser";
    version = "0.12.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7ae2f58a822f08abdaf668897e96a5656fe72f5a9ce66422423e8849384872e6"; };
    features = builtins.concatLists [
      [ "std" ]
      [ "variable-fonts" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-segmentation."1.8.0" = overridableMkRustCrate (profileName: rec {
    name = "unicode-segmentation";
    version = "1.8.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8895849a949e7845e06bd6dc1aa51731a103c42707010a5b591c0038fb73385b"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".unicode-xid."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "unicode-xid";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "8ccb82d61f80a663efe1f787a51b16b5a51e3314d6ac365b08639f52387b33f3"; };
    features = builtins.concatLists [
      [ "default" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".uuid."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "uuid";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "bc5cf98d8186244414c848017f0e2676b3fcb46807f6668a97dfe67359a3c4b7"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "default")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "getrandom")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "serde")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "std")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "v4")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "wasm-bindgen")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "getrandom" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.3" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_reflect_derive" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".vec_map."0.8.2" = overridableMkRustCrate (profileName: rec {
    name = "vec_map";
    version = "0.8.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "f1bddf1187be692e79c5ffeab891132dfb0f236ed36a43c7ed39f1165ee20191"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.3" = overridableMkRustCrate (profileName: rec {
    name = "version_check";
    version = "0.9.3";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5fecdca9a5291cc2b8dcf7dc02453fee791a280f3743cb0905f8822ae463b3fe"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".waker-fn."1.1.0" = overridableMkRustCrate (profileName: rec {
    name = "waker-fn";
    version = "1.1.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "9d5b2c62b4012a3e1eca5a7e077d13b3bf498c4073e33ccd58626607748ceeca"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".walkdir."2.3.2" = overridableMkRustCrate (profileName: rec {
    name = "walkdir";
    version = "2.3.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "808cf2735cd4b6866113f648b791c6adc5714537bc222d9347bb203386ffda56"; };
    dependencies = {
      same_file = rustPackages."registry+https://github.com/rust-lang/crates.io-index".same-file."1.0.6" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
      ${ if hostPlatform.isWindows then "winapi_util" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasi."0.10.2+wasi-snapshot-preview1" = overridableMkRustCrate (profileName: rec {
    name = "wasi";
    version = "0.10.2+wasi-snapshot-preview1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "fd6fbd9a79829dd1ad0cc20627bf1ed606756a7f77edff7b66b7064f9cb327c6"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "std" ]
    ];
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen";
    version = "0.2.69";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "3cd364751395ca0f68cafb17666eee36b63077fb5ecd972bbcd74c90c4bf736e"; };
    features = builtins.concatLists [
      [ "default" ]
      [ "spans" ]
      [ "std" ]
    ];
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      wasm_bindgen_macro = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.69" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.69" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-backend";
    version = "0.2.69";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1114f89ab1f4106e5b55e688b828c0ab0ea593a1ea7c094b141b14cbaaec2d62"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      bumpalo = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.7.1" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      log = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
      wasm_bindgen_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.19" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-futures";
    version = "0.4.19";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "1fe9756085a84584ee9457a002b7cdfe0bfff169f45d2591d8be1345a6780e35"; };
    dependencies = {
      cfg_if = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" { inherit profileName; };
      js_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      wasm_bindgen = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if builtins.elem "atomics" hostPlatformFeatures then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.69" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro";
    version = "0.2.69";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7a6ac8995ead1f084a8dea1e65f194d0973800c7f571f6edd70adf06ecf77084"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      wasm_bindgen_macro_support = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.69" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-macro-support";
    version = "0.2.69";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "b5a48c72f299d80557c7c62e37e7225369ecc0c963964059509fbafe917c7549"; };
    features = builtins.concatLists [
      [ "spans" ]
    ];
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      syn = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
      wasm_bindgen_backend = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.69" { inherit profileName; };
      wasm_bindgen_shared = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.69" = overridableMkRustCrate (profileName: rec {
    name = "wasm-bindgen-shared";
    version = "0.2.69";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "7e7811dd7f9398f14cc76efd356f98f03aa30419dea46aa810d71e819fc97158"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.28.6" = overridableMkRustCrate (profileName: rec {
    name = "wayland-client";
    version = "0.28.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "e3ab332350e502f159382201394a78e3cc12d0f04db863429260164ea40e0355"; };
    features = builtins.concatLists [
      [ "dlopen" ]
      [ "scoped-tls" ]
      [ "use_system_lib" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      downcast_rs = rustPackages."registry+https://github.com/rust-lang/crates.io-index".downcast-rs."1.2.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.20.1" { inherit profileName; };
      scoped_tls = rustPackages."registry+https://github.com/rust-lang/crates.io-index".scoped-tls."1.0.0" { inherit profileName; };
      wayland_commons = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-commons."0.28.6" { inherit profileName; };
      wayland_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.28.6" { inherit profileName; };
    };
    buildDependencies = {
      wayland_scanner = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.28.6" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-commons."0.28.6" = overridableMkRustCrate (profileName: rec {
    name = "wayland-commons";
    version = "0.28.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a21817947c7011bbd0a27e11b17b337bfd022e8544b071a2641232047966fbda"; };
    dependencies = {
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.20.1" { inherit profileName; };
      once_cell = rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.8.0" { inherit profileName; };
      smallvec = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.6.1" { inherit profileName; };
      wayland_sys = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.28.6" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-cursor."0.28.6" = overridableMkRustCrate (profileName: rec {
    name = "wayland-cursor";
    version = "0.28.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "be610084edd1586d45e7bdd275fe345c7c1873598caa464c4fb835dee70fa65a"; };
    dependencies = {
      nix = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nix."0.20.1" { inherit profileName; };
      wayland_client = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.28.6" { inherit profileName; };
      xcursor = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xcursor."0.3.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-protocols."0.28.6" = overridableMkRustCrate (profileName: rec {
    name = "wayland-protocols";
    version = "0.28.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "286620ea4d803bacf61fa087a4242ee316693099ee5a140796aaba02b29f861f"; };
    features = builtins.concatLists [
      [ "client" ]
      [ "unstable_protocols" ]
      [ "wayland-client" ]
    ];
    dependencies = {
      bitflags = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      wayland_client = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.28.6" { inherit profileName; };
      wayland_commons = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-commons."0.28.6" { inherit profileName; };
    };
    buildDependencies = {
      wayland_scanner = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.28.6" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-scanner."0.28.6" = overridableMkRustCrate (profileName: rec {
    name = "wayland-scanner";
    version = "0.28.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ce923eb2deb61de332d1f356ec7b6bf37094dc5573952e1c8936db03b54c03f1"; };
    dependencies = {
      proc_macro2 = rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.29" { inherit profileName; };
      quote = rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.9" { inherit profileName; };
      xml = rustPackages."registry+https://github.com/rust-lang/crates.io-index".xml-rs."0.8.4" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wayland-sys."0.28.6" = overridableMkRustCrate (profileName: rec {
    name = "wayland-sys";
    version = "0.28.6";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d841fca9aed7febf9bed2e9796c49bf58d4152ceda8ac949ebe00868d8f0feb8"; };
    features = builtins.concatLists [
      [ "client" ]
      [ "dlib" ]
      [ "dlopen" ]
      [ "lazy_static" ]
    ];
    dependencies = {
      dlib = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dlib."0.5.0" { inherit profileName; };
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
    };
    buildDependencies = {
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.20" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" = overridableMkRustCrate (profileName: rec {
    name = "web-sys";
    version = "0.3.46";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "222b1ef9334f92a21d3fb53dc3fd80f30836959a90f9274a626d7e06315ba3c3"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "AddEventListenerOptions")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "AngleInstancedArrays")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio") "AudioBuffer")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio") "AudioBufferSourceNode")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio") "AudioContext")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio") "AudioContextOptions")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio") "AudioContextState")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio") "AudioDestinationNode")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio") "AudioNode")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio") "AudioScheduledSourceNode")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio") "BaseAudioContext")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "BeforeUnloadEvent")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "CssStyleDeclaration")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "Document")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "DomRect")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "DomRectReadOnly")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "Element")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "Event")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "EventTarget")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "ExtBlendMinmax")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "ExtColorBufferFloat")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "ExtColorBufferHalfFloat")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "ExtDisjointTimerQuery")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "ExtFragDepth")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "ExtSRgb")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "ExtShaderTextureLod")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "ExtTextureFilterAnisotropic")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "FocusEvent")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "Gpu")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuAdapter")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuAddressMode")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuBindGroup")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuBindGroupDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuBindGroupEntry")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuBindGroupLayout")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuBindGroupLayoutDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuBindGroupLayoutEntry")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuBindingType")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuBlendDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuBlendFactor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuBlendOperation")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuBuffer")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuBufferBinding")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuBufferCopyView")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuBufferDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuCanvasContext")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuColorDict")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuColorStateDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuCommandBuffer")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuCommandBufferDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuCommandEncoder")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuCommandEncoderDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuCompareFunction")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuComputePassDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuComputePassEncoder")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuComputePipeline")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuComputePipelineDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuCullMode")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuDepthStencilStateDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuDevice")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuDeviceDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuExtent3dDict")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuFilterMode")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuFrontFace")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuIndexFormat")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuInputStepMode")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuLimits")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuLoadOp")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuMapMode")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuOrigin3dDict")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuPipelineLayout")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuPipelineLayoutDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuPowerPreference")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuPrimitiveTopology")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuProgrammableStageDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuQueue")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuRasterizationStateDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuRenderBundle")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuRenderBundleDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuRenderBundleEncoder")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuRenderBundleEncoderDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuRenderPassColorAttachmentDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuRenderPassDepthStencilAttachmentDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuRenderPassDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuRenderPassEncoder")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuRenderPipeline")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuRenderPipelineDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuRequestAdapterOptions")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuSampler")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuSamplerDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuShaderModule")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuShaderModuleDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuStencilOperation")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuStencilStateFaceDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuStoreOp")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuSwapChain")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuSwapChainDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuTexture")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuTextureAspect")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuTextureComponentType")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuTextureCopyView")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuTextureDataLayout")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuTextureDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuTextureDimension")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuTextureFormat")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuTextureView")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuTextureViewDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuTextureViewDimension")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuVertexAttributeDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuVertexBufferLayoutDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuVertexFormat")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "GpuVertexStateDescriptor")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "HtmlCanvasElement")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "HtmlElement")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "HtmlImageElement")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "ImageBitmap")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "KeyboardEvent")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "MediaQueryList")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "MediaQueryListEvent")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "MessageEvent")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "MouseEvent")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "Navigator")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "Node")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "NodeList")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "OesElementIndexUint")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "OesStandardDerivatives")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "OesTextureFloat")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "OesTextureFloatLinear")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "OesTextureHalfFloat")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "OesTextureHalfFloatLinear")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "OesVertexArrayObject")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "Performance")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "PerformanceTiming")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "PointerEvent")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "Request")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "Response")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "UiEvent")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebGl2RenderingContext")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebGlActiveInfo")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebGlBuffer")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebGlFramebuffer")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebGlProgram")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebGlQuery")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebGlRenderbuffer")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebGlRenderingContext")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebGlSampler")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebGlShader")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebGlSync")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebGlTexture")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebGlTransformFeedback")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebGlUniformLocation")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebGlVertexArrayObject")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebglColorBufferFloat")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebglCompressedTextureAstc")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebglCompressedTextureEtc")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebglCompressedTextureEtc1")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebglCompressedTexturePvrtc")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebglCompressedTextureS3tc")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebglCompressedTextureS3tcSrgb")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebglDebugRendererInfo")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebglDebugShaders")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebglDepthTexture")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebglDrawBuffers")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "WebglLoseContext")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "WheelEvent")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "Window")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "Worker")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "console")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      ${ if rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_tasks" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_utils" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wgpu."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "wgpu";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "79a0a0a63fac9492cfaf6e7e4bdf9729c128f1e94124b9e4cbc4004b8cb6d1d8"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "default")
      (lib.optional (rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_wgpu/trace") "serde")
      (lib.optional (rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_wgpu/trace") "trace")
      (lib.optional (rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_wgpu/trace") "wgc")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "arrayvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") && hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.46" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") && hostPlatform.parsed.cpu.name == "wasm32" then "naga" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "raw_window_handle" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_wgpu/trace" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "smallvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.6.1" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") && hostPlatform.parsed.cpu.name == "wasm32" then "syn" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.65" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "tracing" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.28" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.19" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") && hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") && (!(hostPlatform.parsed.cpu.name == "wasm32") || hostPlatform.parsed.cpu.name == "wasm32") then "wgc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-core."0.7.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "wgt" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-types."0.7.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wgpu-core."0.7.1" = overridableMkRustCrate (profileName: rec {
    name = "wgpu-core";
    version = "0.7.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "c89fa2cc5d72236461ac09c5be967012663e29cb62f1a972654cbf35e49dffa8"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "default")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "raw-window-handle")
      (lib.optional (rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_wgpu/trace") "ron")
      (lib.optional (rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_wgpu/trace") "serde")
      (lib.optional (rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_wgpu/trace") "trace")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "arrayvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.5.2" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "copyless" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".copyless."0.1.5" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "fxhash" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".fxhash."0.2.1" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") && !(hostPlatform.parsed.cpu.name == "wasm32") && hostPlatform.isWindows then "gfx_backend_dx11" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-backend-dx11."0.7.0" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") && !(hostPlatform.parsed.cpu.name == "wasm32") && hostPlatform.isWindows then "gfx_backend_dx12" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-backend-dx12."0.7.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "gfx_backend_empty" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-backend-empty."0.7.0" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") && (hostPlatform.parsed.cpu.name == "wasm32" || !(hostPlatform.parsed.cpu.name == "wasm32") && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "ios") && !(hostPlatform.parsed.kernel.name == "darwin")) then "gfx_backend_gl" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-backend-gl."0.7.1" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") && !(hostPlatform.parsed.cpu.name == "wasm32") && (hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin") then "gfx_backend_metal" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-backend-metal."0.7.0" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") && (!(hostPlatform.parsed.cpu.name == "wasm32") && hostPlatform.isWindows || !(hostPlatform.parsed.cpu.name == "wasm32") && hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "ios") && !(hostPlatform.parsed.kernel.name == "darwin")) then "gfx_backend_vulkan" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-backend-vulkan."0.7.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "hal" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gfx-hal."0.7.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "gpu_alloc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-alloc."0.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "gpu_descriptor" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".gpu-descriptor."0.1.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "naga" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".naga."0.3.2" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "raw_window_handle" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_wgpu/trace" then "ron" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ron."0.6.5" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_wgpu/trace" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "smallvec" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.6.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "thiserror" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.29" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "tracing" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.28" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "wgt" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wgpu-types."0.7.0" { inherit profileName; };
    };
    buildDependencies = {
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "cfg_aliases" else null } = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg_aliases."0.1.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wgpu-types."0.7.0" = overridableMkRustCrate (profileName: rec {
    name = "wgpu-types";
    version = "0.7.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "72fa9ba80626278fd87351555c363378d08122d7601e58319be3d6fa85a87747"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_wgpu/trace") "serde")
      (lib.optional (rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_wgpu/trace") "trace")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_wgpu/trace" then "serde" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.130" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi."0.2.8" = overridableMkRustCrate (profileName: rec {
    name = "winapi";
    version = "0.2.8";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" = overridableMkRustCrate (profileName: rec {
    name = "winapi";
    version = "0.3.9";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio") "audioclient")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio") "audiosessiontypes")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "basetsd")
      (lib.optional (rootFeatures' ? "bevy_asset/default" || rootFeatures' ? "bevy_asset/filesystem_watcher" || rootFeatures' ? "bevy_asset/notify" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "cfg")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_winit") "combaseapi")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio") "coml2api")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "commctrl")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "consoleapi")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "d3d11")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "d3d11_1")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "d3d11sdklayers")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "d3d12")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "d3d12sdklayers")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "d3d12shader")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "d3dcommon")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "d3dcompiler")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio") "debug")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio") "devpkey")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "dwmapi")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "dxgi1_2")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "dxgi1_3")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "dxgi1_4")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "dxgi1_5")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "dxgi1_6")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "dxgidebug")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "dxgiformat")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu") "dxgitype")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "errhandlingapi")
      (lib.optional (rootFeatures' ? "bevy_asset/default" || rootFeatures' ? "bevy_asset/filesystem_watcher" || rootFeatures' ? "bevy_asset/notify" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "evntrace")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "fileapi")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "handleapi")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "hidusage")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "imm")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio") "impl-debug")
      (lib.optional (rootFeatures' ? "bevy_asset/default" || rootFeatures' ? "bevy_asset/filesystem_watcher" || rootFeatures' ? "bevy_asset/notify" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "in6addr")
      (lib.optional (rootFeatures' ? "bevy_asset/default" || rootFeatures' ? "bevy_asset/filesystem_watcher" || rootFeatures' ? "bevy_asset/notify" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "inaddr")
      (lib.optional (rootFeatures' ? "bevy_asset/default" || rootFeatures' ? "bevy_asset/filesystem_watcher" || rootFeatures' ? "bevy_asset/notify" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "ioapiset")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio") "ksmedia")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/bevy_dynamic_plugin" || rootFeatures' ? "bevy/bevy_gilrs" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/bevy_dynamic_plugin" || rootFeatures' ? "bevy_internal/bevy_gilrs" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "libloaderapi")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy_audio/mp3" || rootFeatures' ? "bevy_internal/mp3") "memoryapi")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "minwinbase")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "minwindef")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio") "mmdeviceapi")
      (lib.optional (rootFeatures' ? "bevy_asset/default" || rootFeatures' ? "bevy_asset/filesystem_watcher" || rootFeatures' ? "bevy_asset/notify" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "mstcpip")
      (lib.optional (rootFeatures' ? "bevy_asset/default" || rootFeatures' ? "bevy_asset/filesystem_watcher" || rootFeatures' ? "bevy_asset/notify" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "mswsock")
      (lib.optional (rootFeatures' ? "bevy_asset/default" || rootFeatures' ? "bevy_asset/filesystem_watcher" || rootFeatures' ? "bevy_asset/notify" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "namedpipeapi")
      (lib.optional (rootFeatures' ? "bevy_asset/default" || rootFeatures' ? "bevy_asset/filesystem_watcher" || rootFeatures' ? "bevy_asset/notify" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "ntdef")
      (lib.optional (rootFeatures' ? "bevy_asset/default" || rootFeatures' ? "bevy_asset/filesystem_watcher" || rootFeatures' ? "bevy_asset/notify" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "ntsecapi")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "ntstatus")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_winit") "objbase")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "ole2")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "processenv")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "processthreadsapi")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_audio") "profileapi")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "shellapi")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "shellscalingapi")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "shobjidl_core")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "std")
      (lib.optional (rootFeatures' ? "bevy_asset/default" || rootFeatures' ? "bevy_asset/filesystem_watcher" || rootFeatures' ? "bevy_asset/notify" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "synchapi")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy_audio/mp3" || rootFeatures' ? "bevy_internal/mp3") "sysinfoapi")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "timezoneapi")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "unknwnbase")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "winbase")
      (lib.optional (rootFeatures' ? "bevy_asset/default" || rootFeatures' ? "bevy_asset/filesystem_watcher" || rootFeatures' ? "bevy_asset/notify" || rootFeatures' ? "bevy_winit/wayland" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "wincon")
      (lib.optional (rootFeatures' ? "bevy_asset/default" || rootFeatures' ? "bevy_asset/filesystem_watcher" || rootFeatures' ? "bevy_asset/notify" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "windef")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "windowsx")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "winerror")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "wingdi")
      (lib.optional (rootFeatures' ? "bevy_asset/default" || rootFeatures' ? "bevy_asset/filesystem_watcher" || rootFeatures' ? "bevy_asset/notify" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "winioctl")
      (lib.optional (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") "winnt")
      (lib.optional (rootFeatures' ? "bevy_asset/default" || rootFeatures' ? "bevy_asset/filesystem_watcher" || rootFeatures' ? "bevy_asset/notify" || rootFeatures' ? "bevy_winit/x11" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "winsock2")
      (lib.optional (rootFeatures' ? "bevy/bevy_audio" || rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/flac" || rootFeatures' ? "bevy/mp3" || rootFeatures' ? "bevy/vorbis" || rootFeatures' ? "bevy/wav" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_audio" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/flac" || rootFeatures' ? "bevy_internal/mp3" || rootFeatures' ? "bevy_internal/vorbis" || rootFeatures' ? "bevy_internal/wav" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_winit") "winuser")
      (lib.optional (rootFeatures' ? "bevy_asset/default" || rootFeatures' ? "bevy_asset/filesystem_watcher" || rootFeatures' ? "bevy_asset/notify" || rootFeatures' ? "bevy_winit/x11" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "ws2def")
      (lib.optional (rootFeatures' ? "bevy_asset/default" || rootFeatures' ? "bevy_asset/filesystem_watcher" || rootFeatures' ? "bevy_asset/notify" || rootFeatures' ? "bevy_winit/x11" || rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu") "ws2ipdef")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_winit/x11") "ws2tcpip")
      (lib.optional (rootFeatures' ? "bevy/bevy_gilrs" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy_internal/bevy_gilrs" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_gilrs") "xinput")
    ];
    dependencies = {
      ${ if (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") && hostPlatform.config == "i686-pc-windows-gnu" then "winapi_i686_pc_windows_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_app" || rootFeatures' ? "bevy_asset" || rootFeatures' ? "bevy_audio" || rootFeatures' ? "bevy_core" || rootFeatures' ? "bevy_diagnostic" || rootFeatures' ? "bevy_dylib" || rootFeatures' ? "bevy_dynamic_plugin" || rootFeatures' ? "bevy_ecs" || rootFeatures' ? "bevy_gilrs" || rootFeatures' ? "bevy_gltf" || rootFeatures' ? "bevy_input" || rootFeatures' ? "bevy_internal" || rootFeatures' ? "bevy_log" || rootFeatures' ? "bevy_math" || rootFeatures' ? "bevy_pbr" || rootFeatures' ? "bevy_reflect" || rootFeatures' ? "bevy_render" || rootFeatures' ? "bevy_scene" || rootFeatures' ? "bevy_sprite" || rootFeatures' ? "bevy_text" || rootFeatures' ? "bevy_transform" || rootFeatures' ? "bevy_ui" || rootFeatures' ? "bevy_wgpu" || rootFeatures' ? "bevy_window" || rootFeatures' ? "bevy_winit") && hostPlatform.config == "x86_64-pc-windows-gnu" then "winapi_x86_64_pc_windows_gnu" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-build."0.1.1" = overridableMkRustCrate (profileName: rec {
    name = "winapi-build";
    version = "0.1.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-i686-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-util."0.1.5" = overridableMkRustCrate (profileName: rec {
    name = "winapi-util";
    version = "0.1.5";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178"; };
    dependencies = {
      ${ if hostPlatform.isWindows then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" = overridableMkRustCrate (profileName: rec {
    name = "winapi-x86_64-pc-windows-gnu";
    version = "0.4.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".winit."0.24.0" = overridableMkRustCrate (profileName: rec {
    name = "winit";
    version = "0.24.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "da4eda6fce0eb84bd0a33e3c8794eb902e1033d0a1d5a31bc4f19b1b4bbff597"; };
    features = builtins.concatLists [
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_winit/x11") "mio")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_winit/x11") "mio-extras")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_winit/x11") "parking_lot")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_winit/x11") "percent-encoding")
      (lib.optional (rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_winit/wayland") "sctk")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "wasm-bindgen")
      (lib.optional (rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_winit/wayland") "wayland")
      (lib.optional (rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_winit/wayland") "wayland-client")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "web-sys")
      (lib.optional (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") "web_sys")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_winit/x11") "x11")
      (lib.optional (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_winit/x11") "x11-dl")
    ];
    dependencies = {
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit" then "bitflags" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."1.2.1" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") && hostPlatform.parsed.kernel.name == "darwin" then "cocoa" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".cocoa."0.24.0" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") && hostPlatform.parsed.kernel.name == "darwin" then "core_foundation" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.1" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") && hostPlatform.parsed.kernel.name == "darwin" then "core_graphics" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-graphics."0.22.2" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") && hostPlatform.parsed.kernel.name == "darwin" then "core_video_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-video-sys."0.1.4" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") && hostPlatform.parsed.kernel.name == "darwin" then "dispatch" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".dispatch."0.2.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit" then "instant" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".instant."0.1.11" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit" then "lazy_static" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit" then "libc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit" then "log" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.14" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_winit/x11") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "mio" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."0.6.23" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_winit/x11") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "mio_extras" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio-extras."2.0.6" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") && hostPlatform.parsed.kernel.name == "android" then "ndk" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk."0.2.1" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") && hostPlatform.parsed.kernel.name == "android" then "ndk_glue" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-glue."0.2.1" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") && hostPlatform.parsed.kernel.name == "android" then "ndk_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".ndk-sys."0.2.1" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") && (hostPlatform.parsed.kernel.name == "ios" || hostPlatform.parsed.kernel.name == "darwin") then "objc" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".objc."0.2.7" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") && (hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "parking_lot" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.11.2" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_winit/x11") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "percent_encoding" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.1.0" { inherit profileName; };
      ${ if rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit" then "raw_window_handle" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-window-handle."0.3.3" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_winit/wayland") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "sctk" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".smithay-client-toolkit."0.12.3" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") && hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.69" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_winit/wayland") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "wayland_client" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".wayland-client."0.28.6" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") && hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.46" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/bevy_wgpu" || rootFeatures' ? "bevy/bevy_winit" || rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/wayland" || rootFeatures' ? "bevy/wgpu_trace" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/bevy_wgpu" || rootFeatures' ? "bevy_internal/bevy_winit" || rootFeatures' ? "bevy_internal/wayland" || rootFeatures' ? "bevy_internal/wgpu_trace" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_wgpu/bevy_winit" || rootFeatures' ? "bevy_wgpu/default" || rootFeatures' ? "bevy-ios-example" || rootFeatures' ? "bevy_winit") && hostPlatform.parsed.kernel.name == "windows" then "winapi" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
      ${ if (rootFeatures' ? "bevy/default" || rootFeatures' ? "bevy/x11" || rootFeatures' ? "bevy_internal/x11" || rootFeatures' ? "bevy_winit/x11") && (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "dragonfly" || hostPlatform.parsed.kernel.name == "freebsd" || hostPlatform.parsed.kernel.name == "openbsd" || hostPlatform.parsed.kernel.name == "netbsd") then "x11_dl" else null } = rustPackages."registry+https://github.com/rust-lang/crates.io-index".x11-dl."2.19.1" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".wio."0.2.2" = overridableMkRustCrate (profileName: rec {
    name = "wio";
    version = "0.2.2";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "5d129932f4644ac2396cb456385cbf9e63b5b30c6e8dc4820bdca4eb082037a5"; };
    dependencies = {
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".ws2_32-sys."0.2.1" = overridableMkRustCrate (profileName: rec {
    name = "ws2_32-sys";
    version = "0.2.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d59cefebd0c892fa2dd6de581e937301d8552cb44489cdff035c6187cb63fa5e"; };
    dependencies = {
      winapi = rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.2.8" { inherit profileName; };
    };
    buildDependencies = {
      build = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-build."0.1.1" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".x11-dl."2.19.1" = overridableMkRustCrate (profileName: rec {
    name = "x11-dl";
    version = "2.19.1";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "ea26926b4ce81a6f5d9d0f3a0bc401e5a37c6ae14a1bfaa8ff6099ca80038c59"; };
    dependencies = {
      lazy_static = rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.4.0" { inherit profileName; };
      libc = rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.103" { inherit profileName; };
    };
    buildDependencies = {
      pkg_config = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.20" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xcursor."0.3.4" = overridableMkRustCrate (profileName: rec {
    name = "xcursor";
    version = "0.3.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "463705a63313cd4301184381c5e8042f0a7e9b4bb63653f216311d4ae74690b7"; };
    dependencies = {
      nom = rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.0.0" { inherit profileName; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xdg."2.2.0" = overridableMkRustCrate (profileName: rec {
    name = "xdg";
    version = "2.2.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d089681aa106a86fade1b0128fb5daf07d5867a509ab036d99988dec80429a57"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xi-unicode."0.3.0" = overridableMkRustCrate (profileName: rec {
    name = "xi-unicode";
    version = "0.3.0";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "a67300977d3dc3f8034dae89778f502b6ba20b269527b3223ba59c0cf393bb8a"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xml-rs."0.8.4" = overridableMkRustCrate (profileName: rec {
    name = "xml-rs";
    version = "0.8.4";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "d2d7d3948613f75c98fd9328cfdcc45acc4d360655289d0a7d4ec931392200a3"; };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xshell."0.1.17" = overridableMkRustCrate (profileName: rec {
    name = "xshell";
    version = "0.1.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "eaad2035244c56da05573d4d7fda5f903c60a5f35b9110e157a14a1df45a9f14"; };
    dependencies = {
      xshell_macros = buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".xshell-macros."0.1.17" { profileName = "__noProfile"; };
    };
  });
  
  "registry+https://github.com/rust-lang/crates.io-index".xshell-macros."0.1.17" = overridableMkRustCrate (profileName: rec {
    name = "xshell-macros";
    version = "0.1.17";
    registry = "registry+https://github.com/rust-lang/crates.io-index";
    src = fetchCratesIo { inherit name version; sha256 = "4916a4a3cad759e499a3620523bf9545cc162d7a06163727dde97ce9aaa4cf39"; };
  });
  
}
